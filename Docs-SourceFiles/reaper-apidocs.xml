<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<USDocBlocs>
  <USDocBloc>
    <slug>1.Introduction</slug>
    <requires>
    </requires>
    <description>
<h2 id="reascript-api-as-of-reaper-5.983">ReaScript API as of Reaper 5.983</h2>
<p>REAPER provides an API (advanced programming interface) for users and third parties to create extended functionality. API functions can be called from a compiled C/C++ dynamic library that is loaded by REAPER, or at run-time by user-created ReaScripts that can be written using REAPER’s own editor.</p>
<p>ReaScripts can be written in EEL2, a specialized language that is also used to write JSFX; Lua, a popular scripting language; or Python, another scripting language. EEL and Lua are embedded within REAPER and require no additional downloads or settings. Python must be downloaded and installed separately, and enabled in REAPER preferences.</p>
<p>A script named “__startup.lua|.eel” will be started automatically by Reaper at startup. You can have both; Reaper will run __startup.eel first, __startup.lua second. This __startup-script doesn’t need to be registered into the actionlist of Reaper; it’s pure existence in the scripts-folder of the resources-folder of Reaper is sufficient for it to be run.</p>
<p>Learn more about ReaScript: <a href="http://www.cockos.com/reaper/sdk/reascript/reascript.php">http://www.cockos.com/reaper/sdk/reascript/reascript.php</a>.</p>
<p>This documentation includes the functions provided by SWS: <a href="https://www.sws-extension.org">sws-extension.org</a> as well as Julian Sader’s plugin, that can be installed via ReaPack.</p>
<p>The IDE in Reaper has some limitations, as every line must not exceed 4095 characters, or they will be split when the script is loaded the next time.</p>
<p>The base-directory for files created from ReaScript can be read from the reaper.ini -&gt; [REAPER] -&gt; lastcwd= That means, if you create a new file without giving it a path, it will be created in the path set in lastcwd.</p>

    </description>
    <chapter_context>
      API-Documentation
    </chapter_context>
    <tags>
     documentation
     introduction
     reascript
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>2.1.cpp_desc</slug>
    <requires>
    </requires>
    <description>
<h3 id="usage-of-the-reaper-api-in-c">Usage of the Reaper Api in C++</h3>
<p>Note: the C++ pure virtual interfaces used require the MSVC-compatible C++ ABI on Win32. Sorry, mingw users.</p>
<p>Reaper extensions: see <a href="http://www.cockos.com/reaper/sdk/plugin/plugin.php">http://www.cockos.com/reaper/sdk/plugin/plugin.php</a> and reaper_plugin.h. The API functions in this header can be retrieved using reaper_plugin_info_t.GetFunc() or by using the Action “[developer] Write C++ API functions header” directly in Reaper.</p>
<p>VST plugins: see <a href="http://www.cockos.com/reaper/sdk/vst/vst_ext.php">http://www.cockos.com/reaper/sdk/vst/vst_ext.php</a> The API functions in this header can be retrieved using audioMasterCallback.</p>
<p>Because the API is dynamic, callers should never assume a function exists. Check that a non-NULL function pointer was returned before using it (unless loaded functions are verified using REAPERAPI_LoadAPI(), see note below).</p>
<p>New (4.76+) usage of this file: - 1) most source files should just #include “reaper_plugin_functions.h” as is. - 2) one file should #define REAPERAPI_IMPLEMENT before including this file. - 3) the plug-in should call REAPERAPI_LoadAPI(rec-&gt;GetFunc) from REAPER_PLUGIN_ENTRYPOINT - and check the return value for errors (REAPERAPI_LoadAPI will return 0 on success).</p>
<p>By default, all functions listed in this file are loaded. This means that an older version of REAPER may not succeed in loading, and also it may bloat your plug-in. If you wish to only load needed functions, #define REAPERAPI_MINIMAL and various #define REAPERAPI_WANT_&amp;lt;functionname&amp;gt; lines before including this file. You must put these definitions where REAPERAPI_IMPLEMENT is defined and you can optionally put them elsewhere (to detect needed REAPERAPI_WANT_xxx lines at compile- time rather than link-time).</p>

    </description>
    <chapter_context>
      API-Documentation
    </chapter_context>
    <tags>
     documentation
     introduction
     eel
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>2.2.eel_desc</slug>
    <requires>
    </requires>
    <description>
<h3 id="reascripteel-api">ReaScript/EEL API</h3>
<p>For information on the EEL2 language, please see the <a href="https://www.cockos.com/EEL2/">EEL2 User Guide</a></p>
<p>ReaScript/EEL scripts can call API functions using functionname().</p>
<p>Parameters that return information are effectively passed by reference, not value. If an API returns a string value, it will usually be as the first parameter.</p>
<p>Examples: // function returning a single (scalar) value: sec = <a href="#parse_timestr">parse_timestr(“1:12”)</a>;</p>
<pre><code>// function returning information in the first parameter (function returns void):
[GetProjectPath(#string)](#GetProjectPath);

// lower volume of track 3 by half:
tr = [GetTrack(0, 2)](#GetTrack);
[GetTrackUIVolPan(tr, vol, pan)](#GetTrackUIVolPan);
[SetMediaTrackInfo\_Value(tr, &amp;quot;D_VOL&amp;quot;, vol*0.5)](#SetMediaTrackInfo_Value);</code></pre>
<p>ReaScript/EEL can import functions from other reascripts using <span class="citation" data-cites="import">@import</span> filename.eel – note that only the file’s functions will be imported, normal code in that file will not be executed.</p>

    </description>
    <chapter_context>
      API-Documentation
    </chapter_context>
    <tags>
     documentation
     introduction
     eel
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>2.3.python_desc</slug>
    <requires>
    </requires>
    <description>
<h3 id="reascriptpython-api">ReaScript/Python API</h3>
<p>ReaScript/Python requires a recent version of Python installed on this machine. Python is available from multiple sources <a href="http://www.python.org/download">as a free download</a>. After installing Python, REAPER may detect the Python dynamic library automatically. If not, you can enter the path in the ReaScript preferences page, at Options/Preferences/Plug-Ins/ReaScript.</p>
<p>ReaScript/Python scripts can call API functions using RPR_functionname().</p>
<p>All parameters are passed by value, not reference. API functions that cannot return information in the parameter list will return a single value. API functions that can return any information in the parameter list will return a list of values; The first value in the list will be the function return value (unless the function is declared to return void).</p>
<p>Examples: # function returning a single (scalar) value: sec = <a href="#parse_timestr">RPR_parse_timestr(“1:12”)</a></p>
<pre><code># function returning information in the first parameter (function returns void):
(str) = [RPR\_GetProjectPath(&amp;quot;&amp;quot;, 512)](#GetProjectPath)

# lower volume of track 3 by half (RPR\_GetTrackUIVolPan returns Bool):
tr = [RPR\_GetTrack(0, 2)](#GetTrack)
(ok, tr, vol, pan) = [RPR\_GetTrackUIVolPan(tr, 0, 0)](#GetTrackUIVolPan)
# this also works, if you only care about one of the returned values:
vol = [RPR\_GetTrackUIVolPan(tr, 0, 0)[2]](#GetTrackUIVolPan)
[RPR\_SetMediaTrackInfo\_Value(tr, &amp;quot;D\_VOL&amp;quot;, vol*0.5)](#SetMediaTrackInfo_Value)</code></pre>
<p>You can create and save modules of useful functions that you can import into other ReaScripts. For example, if you create a file called reascript_utility.py that contains the function helpful_function(), you can import that file into any Python ReaScript with the line: import reascript_utility and call the function by using: reascript_utility.helpful_function()</p>
<p>Note that ReaScripts must explicitly import the REAPER python module, even if the script is imported into another ReaScript: from reaper_python import *</p>

    </description>
    <chapter_context>
      API-Documentation
    </chapter_context>
    <tags>
     documentation
     introduction
     python
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>2.4.lua_desc</slug>
    <requires>
    </requires>
    <description>
<h3 id="reascriptlua-api">ReaScript/Lua API</h3>
<p>ReaScript/Lua scripts can call API functions using reaper.functionname().</p>
<p>Some functions return multiple values. In many cases, some function parameters are ignored, especially when similarly named parameters are present in the returned values.</p>
<p>Examples: – function returning a single (scalar) value: sec = reaper.<a href="#parse_timestr">parse_timestr(“1:12”)</a></p>
<pre><code>-- function with an ignored (dummy) parameter:
path = reaper.[GetProjectPath(&amp;quot;&amp;quot;)](#GetProjectPath)

-- lower volume of track 3 by half:
tr = reaper.[GetTrack(0, 2)](#GetTrack)
ok, vol, pan = reaper.[GetTrackUIVolPan(tr, 0, 0)](#GetTrackUIVolPan)
reaper.[SetMediaTrackInfo\_Value(tr, &amp;quot;D_VOL&amp;quot;, vol*0.5)](#SetMediaTrackInfo_Value)</code></pre>
<p>ReaScript/Lua can import functions from other ReaScripts using require. If the files are not being found, it is probably a path problem (remember that lua paths are wildcard patterns, not just directory listings, see details <a href="http://www.lua.org/pil/8.1.html">here</a>).</p>

    </description>
    <chapter_context>
      API-Documentation
    </chapter_context>
    <tags>
     documentation
     introduction
     lua
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>3.Datatypes_used_in_this_document</slug>
    <requires>
    </requires>
    <description>
<h3 id="datatypes-used-in-this-document">Datatypes used in this document</h3>
<p>boolean - accepts only true or false as values optional boolean - a boolean, that can be given, but is not required number - can be integer, double or a floating-point-number optional number - a number, that can be given, but is not required integer - only integer numbers allowed reaper.array - a special array, that Reaper provides string - a string of characters/text optional string - a string, that can be given, but is not required</p>
<p>AudioAccessor - Audio Accessor object for a track or a media-item BR_Envelope (BR) - an envelope-object, created from a track or take-envelope HWND - a window IReaperControlSurface - a ControlSurface, e.g. OSC-devices joystick_device - a joystick-device KbdSectionInfo - Keyboard Section Info, - 0, Main - 100, Main (alt recording) - 32060, MIDI Editor - 32061, MIDI Event List Editor - 32062, MIDI Inline Editor - 32063, Media Explorer PCM_source - the audiosource of a MediaItem ReaProject - a project within Reaper; 0 for current open project(-tab); in <a href="#EnumProjects">EnumProjects</a>, it is an object, not a number! RprMidiTake (FNG) - ReaperMidiTake as object RprMidiNote (FNG) - RprMidiNote as object MediaTrack - a Reaper-Track as object MediaItem - a Reaper-MediaItem like audio,video, Midi, etc as object MediaItem_Take - a take within a MediaItem as object TrackEnvelope - an envelope of a track as object WDL_FastString(S&amp;M) - a different kind of a string, made into a Reaper-object</p>
<p>deviceHDC - get it using function <a href="#JS_GDI_GetWindowDC">JS_GDI_GetWindowDC</a></p>

    </description>
    <chapter_context>
      API-Documentation
    </chapter_context>
    <tags>
     documentation
     introduction
     eel
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AddMediaItemToTrack</slug>
    <functioncall prog_lang="cpp">MediaItem* item AddMediaItemToTrack(MediaTrack* tr)</functioncall>
    <functioncall prog_lang="eel">MediaItem item AddMediaItemToTrack(MediaTrack tr)</functioncall>
    <functioncall prog_lang="lua">MediaItem item = reaper.AddMediaItemToTrack(MediaTrack tr)</functioncall>
    <functioncall prog_lang="python">MediaItem item RPR_AddMediaItemToTrack(MediaTrack tr)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Creates a new media item. It will be empty and therefore not be shown in the arrange-view, until you associate a mediafile(audio, picture, video, etc) or a length and position to it using <a href="#SetMediaItemInfo_Value">SetMediaItemInfo_Value</a></p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="item">
<p>the newly created MediaItem-object</p>

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="tr">
tracknumber(zero based), with 0 for track 1, 1 for track 2, etc.
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     mediaitem
     item
     track
     empty
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AddProjectMarker</slug>
    <functioncall prog_lang="cpp">int AddProjectMarker(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx)</functioncall>
    <functioncall prog_lang="eel">int AddProjectMarker(ReaProject proj, bool isrgn, pos, rgnend, &quot;name&quot;, int wantidx)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.AddProjectMarker(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx)</functioncall>
    <functioncall prog_lang="python">Int RPR_AddProjectMarker(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Creates a new Projectmarker/Region. Returns the index of the created marker/region, or -1 on failure. Supply wantidx&amp;gt;=0 if you want a particular index number, but you’ll get a different index number a region and wantidx is already in use.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the shown-number of the newly created marker/region
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
      </parameter>
      <parameter id="2" datatype="boolean" parmname="isrgn">
true, if it shall be a region; false, if a normal marker
      </parameter>
      <parameter id="3" datatype="number" parmname="pos">
the position of the newly created marker/region in seconds
      </parameter>
      <parameter id="4" datatype="number" parmname="rgnend">
if the marker is a region, this is the end of the region in seconds
      </parameter>
      <parameter id="5" datatype="string" parmname="name">
the shown name of the marker
      </parameter>
      <parameter id="6" datatype="integer" parmname="wantidx">
the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given.
      </parameter>
    </parameters>
    <tags>
     markermanagement
     region
     marker
     name
     shownnumber
     pos
     project
     add
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AddProjectMarker2</slug>
    <functioncall prog_lang="cpp">int AddProjectMarker2(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color)</functioncall>
    <functioncall prog_lang="eel">int AddProjectMarker2(ReaProject proj, bool isrgn, pos, rgnend, &quot;name&quot;, int wantidx, int color)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.AddProjectMarker2(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx, integer color)</functioncall>
    <functioncall prog_lang="python">Int RPR_AddProjectMarker2(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx, Int color)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns the index of the created marker/region, or -1 on failure. Supply wantidx&amp;gt;=0 if you want a particular index number, but you’ll get a different index number a region and wantidx is already in use. color should be 0 (default color), or <a href="#ColorToNative">ColorToNative(r,g,b)|0x1000000</a></p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the shown-number of the newly created marker/region
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="boolean" parmname="isrgn">
<p>true, if it shall be a region; false, if a normal marker</p>

      </parameter>
      <parameter id="3" datatype="number" parmname="pos">
<p>the position of the newly created marker/region in seconds</p>

      </parameter>
      <parameter id="4" datatype="number" parmname="rgnend">
<p>if the marker is a region, this is the end of the region in seconds</p>

      </parameter>
      <parameter id="5" datatype="string" parmname="name">
<p>the shown name of the marker</p>

      </parameter>
      <parameter id="6" datatype="integer" parmname="wantidx">
<p>the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given.</p>

      </parameter>
      <parameter id="7" datatype="integer" parmname="color">
<p>the color as returned by the function <a href="#ColorToNative">ColorToNative(r,g,b)|0x1000000</a></p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     region
     marker
     name
     shownnumber
     pos
     project
     add
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AddRemoveReaScript</slug>
    <functioncall prog_lang="cpp">int AddRemoveReaScript(bool add, int sectionID, const char* scriptfn, bool commit)</functioncall>
    <functioncall prog_lang="eel">int AddRemoveReaScript(bool add, int sectionID, &quot;scriptfn&quot;, bool commit)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.AddRemoveReaScript(boolean add, integer sectionID, string scriptfn, boolean commit)</functioncall>
    <functioncall prog_lang="python">Int RPR_AddRemoveReaScript(Boolean add, Int sectionID, String scriptfn, Boolean commit)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Adds a ReaScript (returns the new command ID, or 0 if failed) or removes a ReaScript Returns &amp;gt;0 on success. Use commit==true when adding/removing a single script. When bulk adding/removing multiple scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.<br />
The commandID returned, might change, when addng this script into an other Reaper-installation. To be sure to use the right command-id, use <a href="#ReverseNamedCommandLookup">ReverseNamedCommandLookup()</a> to get the ActionCommandID, which will never change, until you remove the script.</p>
<p>If you want to add a script to several sections, you need to add them individually, by calling the function again with the changed section-number.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the command ID for this script.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="boolean" parmname="add">
true, if it shall be added, false if it shall be removed
      </parameter>
      <parameter id="2" datatype="integer" parmname="sectionID">
the section, in which this script shall appear(e.g. in the Show Actions-Dialog)<br/>
  0, Main<br/>
  100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.<br/>
  32060, MIDI Editor<br/>
  32061, MIDI Event List Editor<br/>
  32062, MIDI Inline Editor<br/>
  32063, Media Explorer
      </parameter>
      <parameter id="3" datatype="string" parmname="scriptfn">
the filename of the Reascript to be added
      </parameter>
      <parameter id="4" datatype="boolean" parmname="commit">
true, if it shall be committed, false, if you want to add new scripts first. <br/>
Committing means, that Reaper stores the Reascript-information into the reaper-kb.ini for permanent use. <br/>
It will be committed at Reaper's exit as well, but if Reaper crashes before exiting properly, your added<br/>
script might get lost. When adding many Reascripts to Reaper, setting commit to false might help prevail <br/>
ressources, as you don't rewrite the reaper-kb.ini file over and over again. However, if you only add a <br/>
few scripts, this might not be of importance to you.
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     reascript
     lua
     python
     eel
     add
     remove
     commandid
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AddTakeToMediaItem</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* AddTakeToMediaItem(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take AddTakeToMediaItem(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take = reaper.AddTakeToMediaItem(MediaItem item)</functioncall>
    <functioncall prog_lang="python">MediaItem_Take RPR_AddTakeToMediaItem(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
creates a new take in an item
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="MediaItem_Take">
the newly created MediaItem_Take-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">
a MediaItem-object, in which you want to add the new take
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     mediaitem
     item
     track
     empty
     take
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AddTempoTimeSigMarker</slug>
    <functioncall prog_lang="cpp">bool AddTempoTimeSigMarker(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange)</functioncall>
    <functioncall prog_lang="eel">bool AddTempoTimeSigMarker(ReaProject proj, timepos, bpm, int timesig_num, int timesig_denom, bool lineartempochange)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.AddTempoTimeSigMarker(ReaProject proj, number timepos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempochange)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_AddTempoTimeSigMarker(ReaProject proj, Float timepos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempochange)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Deprecated. Use <a href="#SetTempoTimeSigMarker">SetTempoTimeSigMarker</a> with ptidx=-1.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if adding was successful; false, if not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project in which to add the TempoTimesigMarker, 0 for the current project; can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="number" parmname="timepos">
<p>the position in seconds</p>

      </parameter>
      <parameter id="3" datatype="number" parmname="bpm">
<p>the speed in bpm</p>

      </parameter>
      <parameter id="4" datatype="integer" parmname="timesig_num">
<p>timesignature number : timesig_num/timesig_denom, e.g. 3/4</p>

      </parameter>
      <parameter id="5" datatype="integer" parmname="timesig_denom">
<p>timesignature denominator : timesig_num/timesig_denom, e.g. 3/4</p>

      </parameter>
      <parameter id="6" datatype="boolean" parmname="lineartempochange">
<p>true, linear tempo change, false not</p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     timesignature
     tempo
     marker
     add
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>adjustZoom</slug>
    <functioncall prog_lang="cpp">void adjustZoom(double amt, int forceset, bool doupd, int centermode)</functioncall>
    <functioncall prog_lang="eel">adjustZoom(amt, int forceset, bool doupd, int centermode)</functioncall>
    <functioncall prog_lang="lua">reaper.adjustZoom(number amt, integer forceset, boolean doupd, integer centermode)</functioncall>
    <functioncall prog_lang="python">RPR_adjustZoom(Float amt, Int forceset, Boolean doupd, Int centermode)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets horizontal zoom in track view.
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="number" parmname="amt">
the zoom factor, positive values=zoom in, negative values=zoom out, 0=no zoom
      </parameter>
      <parameter id="2" datatype="integer" parmname="forceset">
forces one amt-zoomfactor(non zero) or allows repeatable zoom-in/zoomout(0)
      </parameter>
      <parameter id="3" datatype="boolean" parmname="doupd">
true, updates the track-view instantly; false, or only when mouse hovers over trackview
      </parameter>
      <parameter id="4" datatype="integer" parmname="centermode">
decides, what shall be in the center of the view. The following are available:<br/>
 -1, default selection, as set in the reaper-prefs, <br/>
  0, edit-cursor or playcursor(if it's in the current zoomfactor of the view during playback/recording) in center,<br/>
  1, keeps edit-cursor in center of zoom<br/>
  2, keeps center of view in the center during zoom<br/>
  3, keeps in center of zoom, what is beneath the mousecursor
      </parameter>
    </parameters>
    <tags>
     arrangeviewmanagement
     view
     zoom
     center
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AnyTrackSolo</slug>
    <functioncall prog_lang="cpp">bool AnyTrackSolo(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">bool AnyTrackSolo(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.AnyTrackSolo(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_AnyTrackSolo(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns, whether any of the tracks is solo in Project proj
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true if any track is solo; false if not. Covers all solo-states(solo in place, ignore routing, exclusive solo, solo defeat).
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project to be checked for. 0 for current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     trackmanagement
     states
     solo
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>APIExists</slug>
    <functioncall prog_lang="cpp">bool APIExists(const char* function_name)</functioncall>
    <functioncall prog_lang="eel">bool APIExists(function_name&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.APIExists(string function_name)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_APIExists(String function_name)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns true if function_name exists in the REAPER API
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if function_name exists, false if not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="function_name">
the name of the function you want to check the existence for
      </parameter>
    </parameters>
    <tags>
     api
     exists
     check
     helper
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>APITest</slug>
    <functioncall prog_lang="cpp">void APITest()</functioncall>
    <functioncall prog_lang="eel">APITest()</functioncall>
    <functioncall prog_lang="lua">reaper.APITest()</functioncall>
    <functioncall prog_lang="python">RPR_APITest()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Displays a message window with &quot;Hello World&quot;, if the API was successfully called.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <tags>
     api
     test
     check
     hello world
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ApplyNudge</slug>
    <functioncall prog_lang="cpp">bool ApplyNudge(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies)</functioncall>
    <functioncall prog_lang="eel">bool ApplyNudge(ReaProject project, int nudgeflag, int nudgewhat, int nudgeunits, value, bool reverse, int copies)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.ApplyNudge(ReaProject project, integer nudgeflag, integer nudgewhat, integer nudgeunits, number value, boolean reverse, integer copies)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_ApplyNudge(ReaProject project, Int nudgeflag, Int nudgewhat, Int nudgeunits, Float value, Boolean reverse, Int copies)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Nudges elements like items, cursor, contents, etc to or by a value you want. Nudges only selected mediaitems.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if it worked; false, if it didn't
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="project">
the project, in which to nudge; 0 for the current project
      </parameter>
      <parameter id="2" datatype="integer" parmname="nudgeflag">
the way to nudge<br/>
&amp;1, set to value(otherwise nudge by values)<br/>
&amp;2, snap
      </parameter>
      <parameter id="3" datatype="integer" parmname="nudgewhat">
what to nudge<br/>
0, position<br/>
1, left trim<br/>
2, left edge<br/>
3, right edge<br/>
4, contents<br/>
5, duplicate<br/>
6, editcursor
      </parameter>
      <parameter id="4" datatype="integer" parmname="nudgeunits">
the unit, in which to nudge<br/>
0, ms<br/>
1, seconds<br/>
2, grid<br/>
3, 256th notes<br/>
...<br/>
15, whole notes<br/>
16, measures.beats (1.15 = 1 measure + 1.5 beats)<br/>
17, samples<br/>
18, frames<br/>
19, pixels <br/>
20, item lengths<br/>
21, item selections
      </parameter>
      <parameter id="5" datatype="number" parmname="value">
amount to nudge by, or value to set to(depending on the settings in nudgeflag and the unit in nudgeunits)
      </parameter>
      <parameter id="6" datatype="boolean" parmname="reverse">
in nudge mode: true nudges left; right doesn't nudge to left
      </parameter>
      <parameter id="7" datatype="integer" parmname="copies">
in nudge duplicate mode, number of copies (otherwise ignored)
      </parameter>
    </parameters>
    <tags>
     arrangeviewmanagement
     nudge
     snap
     value
     units
     trim
     position
     content
     duplicate
     editcursor
     ms
     grid
     pixels
     frames
     samples
     measures
     beats
     length
     selection
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Audio_Init</slug>
    <functioncall prog_lang="cpp">void Audio_Init()</functioncall>
    <functioncall prog_lang="eel">Audio_Init()</functioncall>
    <functioncall prog_lang="lua">reaper.Audio_Init()</functioncall>
    <functioncall prog_lang="python">RPR_Audio_Init()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
open all audio and MIDI devices, if not open
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <tags>
     audio
     midi
     audiomanagement
     open
     devices
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Audio_IsPreBuffer</slug>
    <functioncall prog_lang="cpp">int Audio_IsPreBuffer()</functioncall>
    <functioncall prog_lang="eel">int Audio_IsPreBuffer()</functioncall>
    <functioncall prog_lang="lua">integer = reaper.Audio_IsPreBuffer()</functioncall>
    <functioncall prog_lang="python">Int RPR_Audio_IsPreBuffer()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
is in pre-buffer? threadsafe
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Audio_IsRunning</slug>
    <functioncall prog_lang="cpp">int Audio_IsRunning()</functioncall>
    <functioncall prog_lang="eel">int Audio_IsRunning()</functioncall>
    <functioncall prog_lang="lua">integer = reaper.Audio_IsRunning()</functioncall>
    <functioncall prog_lang="python">Int RPR_Audio_IsRunning()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
is audio running at all? threadsafe
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
0, audio is not running; 1, audio is running
      </retval>
    </retvals>
    <tags>
     audio
     midi
     audiomanagement
     running
     devices
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Audio_Quit</slug>
    <functioncall prog_lang="cpp">void Audio_Quit()</functioncall>
    <functioncall prog_lang="eel">Audio_Quit()</functioncall>
    <functioncall prog_lang="lua">reaper.Audio_Quit()</functioncall>
    <functioncall prog_lang="python">RPR_Audio_Quit()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
close all audio and MIDI devices, if open
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <tags>
     audio
     midi
     audiomanagement
     quit
     devices
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AudioAccessorStateChanged</slug>
    <functioncall prog_lang="cpp">bool AudioAccessorStateChanged(AudioAccessor* accessor)</functioncall>
    <functioncall prog_lang="eel">bool AudioAccessorStateChanged(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.AudioAccessorStateChanged(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_AudioAccessorStateChanged(AudioAccessor accessor)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call <a href="#AudioAccessorValidateState">AudioAccessorValidateState</a> only when needed.</p>
<p>See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>

    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <tags>
     audio
     accessor
     get
     statechange
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AudioAccessorUpdate</slug>
    <functioncall prog_lang="cpp">void AudioAccessorUpdate(AudioAccessor* accessor)</functioncall>
    <functioncall prog_lang="eel">AudioAccessorUpdate(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="lua">reaper.AudioAccessorUpdate(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="python">RPR_AudioAccessorUpdate(AudioAccessor accessor)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Force the accessor to reload its state from the underlying track or media item take.</p>
<p>See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>

    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <tags>
     audio
     accessor
     update
     mediatrack
     mediaitemtake
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AudioAccessorValidateState</slug>
    <functioncall prog_lang="cpp">bool AudioAccessorValidateState(AudioAccessor* accessor)</functioncall>
    <functioncall prog_lang="eel">bool AudioAccessorValidateState(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.AudioAccessorValidateState(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_AudioAccessorValidateState(AudioAccessor accessor)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if state has changed; false, if state hasn't changed
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="AudioAccessor" parmname="accessor">
the AudioAccessor for a MediaTrack or a MediaItem_take
      </parameter>
    </parameters>
    <tags>
     audiomanagement
     validate
     audio
     accessor
     item
     take
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BypassFxAllTracks</slug>
    <functioncall prog_lang="cpp">void BypassFxAllTracks(int bypass)</functioncall>
    <functioncall prog_lang="eel">BypassFxAllTracks(int bypass)</functioncall>
    <functioncall prog_lang="lua">reaper.BypassFxAllTracks(integer bypass)</functioncall>
    <functioncall prog_lang="python">RPR_BypassFxAllTracks(Int bypass)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Does bypassing of the fx of all tracks.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="bypass">
-1, bypass all if not all bypassed,otherwise unbypass all
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     track
     bypass
     fx
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ClearAllRecArmed</slug>
    <functioncall prog_lang="cpp">void ClearAllRecArmed()</functioncall>
    <functioncall prog_lang="eel">ClearAllRecArmed()</functioncall>
    <functioncall prog_lang="lua">reaper.ClearAllRecArmed()</functioncall>
    <functioncall prog_lang="python">RPR_ClearAllRecArmed()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Clears all armed states of all tracks.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <tags>
     trackmanagement
     rec
     arm
     state
     clear
     off
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ClearConsole</slug>
    <functioncall prog_lang="cpp">void ClearConsole()</functioncall>
    <functioncall prog_lang="eel">ClearConsole()</functioncall>
    <functioncall prog_lang="lua">reaper.ClearConsole()</functioncall>
    <functioncall prog_lang="python">RPR_ClearConsole()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Clear the ReaScript console. See <a href="#ShowConsoleMsg">ShowConsoleMsg</a></p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <tags>
     helperfunctions
     console
     clear
     reaconsole
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ClearPeakCache</slug>
    <functioncall prog_lang="cpp">void ClearPeakCache()</functioncall>
    <functioncall prog_lang="eel">ClearPeakCache()</functioncall>
    <functioncall prog_lang="lua">reaper.ClearPeakCache()</functioncall>
    <functioncall prog_lang="python">RPR_ClearPeakCache()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
resets the global peak caches
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <tags>
     helperfunctions
     peak
     cache
     clear
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ColorFromNative</slug>
    <functioncall prog_lang="cpp">void ColorFromNative(int col, int* rOut, int* gOut, int* bOut)</functioncall>
    <functioncall prog_lang="eel">ColorFromNative(int col, int &amp;amp;r, int &amp;amp;g, int &amp;amp;b)</functioncall>
    <functioncall prog_lang="lua">integer r, integer g, integer b = reaper.ColorFromNative(integer col)</functioncall>
    <functioncall prog_lang="python">(Int col, Int rOut, Int gOut, Int bOut) = RPR_ColorFromNative(col, rOut, gOut, bOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Extract RGB values from an OS dependent color. See <a href="#ColorToNative">ColorToNative</a>.</p>
<p>As Reaper treats colors differently on Mac and Windows, you should always use <a href="#ColorFromNative">ColorFromNative</a> and <a href="#ColorToNative">ColorToNative</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="r">
the value for red, from 0 to 255
      </retval>
      <retval id="2" datatype="integer" retvalname="g">
the value for green, from 0 to 255
      </retval>
      <retval id="3" datatype="integer" retvalname="b">
the value for blue, from 0 to 255
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="col">
the colorvalue to convert from
      </parameter>
    </parameters>
    <tags>
     colormanagement
     native
     from
     conversion
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ColorToNative</slug>
    <functioncall prog_lang="cpp">int ColorToNative(int r, int g, int b)</functioncall>
    <functioncall prog_lang="eel">int ColorToNative(int r, int g, int b)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.ColorToNative(integer r, integer g, integer b)</functioncall>
    <functioncall prog_lang="python">Int RPR_ColorToNative(Int r, Int g, Int b)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See <a href="#ColorFromNative">ColorFromNative</a> As Reaper treats colors differently on Mac and Windows, you should always use <a href="#ColorFromNative">ColorFromNative</a> and <a href="ColorToNative">ColorToNative</a>.</p>
<p>When using the returned colorvalue, you need to add |0x1000000 at the end of it, like ColorToNative(20,30,40)|0x1000000.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="col">
the correct colorvalue, fitting to your system.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="r">
the value for red, from 0 to 255
      </parameter>
      <parameter id="2" datatype="integer" parmname="g">
the value for green, from 0 to 255
      </parameter>
      <parameter id="3" datatype="integer" parmname="b">
the value for blue, from 0 to 255
      </parameter>
    </parameters>
    <tags>
     colormanagement
     native
     from
     conversion
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountAutomationItems</slug>
    <functioncall prog_lang="cpp">int CountAutomationItems(TrackEnvelope* env)</functioncall>
    <functioncall prog_lang="eel">int CountAutomationItems(TrackEnvelope env)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountAutomationItems(TrackEnvelope env)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountAutomationItems(TrackEnvelope env)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns the number of automation items on this envelope. See <a href="#GetSetAutomationItemInfo">GetSetAutomationItemInfo</a>.</p>

    </description>
    <chapter_context>
      Automation Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
number of automation items
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="env">
the envelope-object for the envelope-lane
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     automation items
     count
     envelopes
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountEnvelopePoints</slug>
    <functioncall prog_lang="cpp">int CountEnvelopePoints(TrackEnvelope* envelope)</functioncall>
    <functioncall prog_lang="eel">int CountEnvelopePoints(TrackEnvelope envelope)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountEnvelopePoints(TrackEnvelope envelope)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountEnvelopePoints(TrackEnvelope envelope)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Returns the number of points in the envelope. See <a href="#CountEnvelopePointsEx">#CountEnvelopePointsEx</a></p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of envelope-points in the envelopeobject envelope
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">
the TrackEnvelope-object, in which to count for the envelope-points
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     envelopes
     count
     points
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountEnvelopePointsEx</slug>
    <functioncall prog_lang="cpp">int CountEnvelopePointsEx(TrackEnvelope* envelope, int autoitem_idx)</functioncall>
    <functioncall prog_lang="eel">int CountEnvelopePointsEx(TrackEnvelope envelope, int autoitem_idx)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountEnvelopePointsEx(TrackEnvelope envelope, integer autoitem_idx)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountEnvelopePointsEx(TrackEnvelope envelope, Int autoitem_idx)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Returns the number of points in the envelope. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration, even if the automation item is trimmed so that not all points are visible. Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.</p>
<p>See <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of envelope-points in the envelopeobject envelope
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">
the TrackEnvelope-object, in which to count for the envelope-points
      </parameter>
      <parameter id="2" datatype="integer" parmname="autoitem_idx">
-1, for the underlying envelope, 0, for the first automation item on the envelope, etc.
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     envelopes
     count
     points
     automation items
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountMediaItems</slug>
    <functioncall prog_lang="cpp">int CountMediaItems(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int CountMediaItems(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountMediaItems(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountMediaItems(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
count the number of items in the project (proj=0 for active project)
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of MediaItems in a project
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project, in which to count for the number of items; 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     count
     mediaitems
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountProjectMarkers</slug>
    <functioncall prog_lang="cpp">int CountProjectMarkers(ReaProject* proj, int* num_markersOut, int* num_regionsOut)</functioncall>
    <functioncall prog_lang="eel">int CountProjectMarkers(ReaProject proj, int &amp;amp;num_markers, int &amp;amp;num_regions)</functioncall>
    <functioncall prog_lang="lua">integer retval, number num_markers, number num_regions = reaper.CountProjectMarkers(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">(Int retval, ReaProject proj, Int num_markersOut, Int num_regionsOut) = RPR_CountProjectMarkers(proj, num_markersOut, num_regionsOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns the number of all markers and regions, as well as all markers and all regions in a project.<br/>
num_markersOut and num_regionsOut may be NULL.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
all markers and regions in the project
      </retval>
      <retval id="2" datatype="integer" retvalname="num_markers">
the number of markers in the project
      </retval>
      <retval id="3" datatype="integer" retvalname="num_regions">
the number of regions in the project
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project, in which to count the markers; 0 for current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     count
     all
     markers
     regions
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>CountSelectedMediaItems</slug>
    <functioncall prog_lang="cpp">int CountSelectedMediaItems(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int CountSelectedMediaItems(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountSelectedMediaItems(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountSelectedMediaItems(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
count the number of selected items in the project (proj=0 for active project)
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of selected items in the project
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project, in which to count for the selected mediaitems; 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     count
     selected
     mediaitem
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountSelectedTracks</slug>
    <functioncall prog_lang="cpp">int CountSelectedTracks(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int CountSelectedTracks(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountSelectedTracks(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountSelectedTracks(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Count the number of selected tracks in the project. This function ignores the master track, see <a href="#CountSelectedTracks2">CountSelectedTracks2</a></p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of selected tracks in the project
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project in which to count the selected tracks; 0 for current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     trackmanagement
     track
     selected
     count
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountSelectedTracks2</slug>
    <functioncall prog_lang="cpp">int CountSelectedTracks2(ReaProject* proj, bool wantmaster)</functioncall>
    <functioncall prog_lang="eel">int CountSelectedTracks2(ReaProject proj, bool wantmaster)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountSelectedTracks2(ReaProject proj, boolean wantmaster)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountSelectedTracks2(ReaProject proj, Boolean wantmaster)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Count the number of selected tracks in the project.<br/>
if you set wantmaster to true, it will include the master track as well.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of selected tracks in your project
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the number of the project in which to count the selected tracks; 0 for current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="boolean" parmname="wantmaster">
<p>true, if you want to count the master-track as well; false, if you don’t want to count it</p>

      </parameter>
    </parameters>
    <tags>
     trackmanagement
     selected
     track
     master
     count
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountTakeEnvelopes</slug>
    <functioncall prog_lang="cpp">int CountTakeEnvelopes(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">int CountTakeEnvelopes(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountTakeEnvelopes(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountTakeEnvelopes(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#GetTakeEnvelope">GetTakeEnvelope</a></p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
number of envelopes of this take of a mediaitem
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">
the mediaitem-object for a certain take
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     take
     envelope
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountTakes</slug>
    <functioncall prog_lang="cpp">int CountTakes(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">int CountTakes(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountTakes(MediaItem item)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountTakes(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
count the number of takes in the item
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of takes in a mediaitem
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">
the mediaitem to count the takes of
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     count
     takes
     mediaitem
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountTCPFXParms</slug>
    <functioncall prog_lang="cpp">int CountTCPFXParms(ReaProject* project, MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int CountTCPFXParms(ReaProject project, MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountTCPFXParms(ReaProject project, MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountTCPFXParms(ReaProject project, MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Count the number of FX parameter knobs displayed on the track control panel.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of FX-parameter-knobs 
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="project">
the project, in which to count the knobs
      </parameter>
      <parameter id="2" datatype="MediaTrack" parmname="track">
the track of which to count the knobs
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     count
     fx
     parameter
     knobs
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountTempoTimeSigMarkers</slug>
    <functioncall prog_lang="cpp">int CountTempoTimeSigMarkers(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int CountTempoTimeSigMarkers(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountTempoTimeSigMarkers(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountTempoTimeSigMarkers(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Count the number of tempo/time signature markers in the project. See <a href="#GetTempoTimeSigMarker">GetTempoTimeSigMarker</a>, <a href="#SetTempoTimeSigMarker">SetTempoTimeSigMarker</a>, <a href="#AddTempoTimeSigMarker">AddTempoTimeSigMarker</a>, <a href="#DeleteTempoTimeSigMarker">DeleteTempoTimeSigMarker</a>.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of tempo/time-signature markers in the project.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
project number; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
      </parameter>
    </parameters>
    <tags>
     markermanagement
     tempo
     timesignature
     count
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountTrackEnvelopes</slug>
    <functioncall prog_lang="cpp">int CountTrackEnvelopes(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int CountTrackEnvelopes(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountTrackEnvelopes(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountTrackEnvelopes(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Counts the number of track-envelopes of a certain track. see <a href="#GetTrackEnvelope">GetTrackEnvelope</a></p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of track-envelopes in a track
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">
the object of the track to count it's envelopes
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     count
     track-envelopes
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountTrackMediaItems</slug>
    <functioncall prog_lang="cpp">int CountTrackMediaItems(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int CountTrackMediaItems(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountTrackMediaItems(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountTrackMediaItems(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
count the number of items in the track
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of mediaitems in the track
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">
the MediaTrack to count the items of
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     track
     count
     mediaitem
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountTracks</slug>
    <functioncall prog_lang="cpp">int CountTracks(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int CountTracks(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CountTracks(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_CountTracks(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
count the number of tracks in the project (proj=0 for active project)
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of tracks in the project, excluding the master-track.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project in which to count the tracks; 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     trackmanagement
     count
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CreateNewMIDIItemInProj</slug>
    <functioncall prog_lang="cpp">MediaItem* CreateNewMIDIItemInProj(MediaTrack* track, double starttime, double endtime, const bool* qnInOptional)</functioncall>
    <functioncall prog_lang="eel">MediaItem CreateNewMIDIItemInProj(MediaTrack track, starttime, endtime, optional bool qnIn)</functioncall>
    <functioncall prog_lang="lua">MediaItem = reaper.CreateNewMIDIItemInProj(MediaTrack track, number starttime, number endtime, optional boolean qnIn)</functioncall>
    <functioncall prog_lang="python">MediaItem RPR_CreateNewMIDIItemInProj(MediaTrack track, Float starttime, Float endtime, const bool qnInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="MediaItem">
the newly created MIDI-mediaitem.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">
the object of the track, in which to create this mediaitem
      </parameter>
      <parameter id="2" datatype="number" parmname="starttime">
starttime of the item in seconds, unless qnIn is set to true
      </parameter>
      <parameter id="3" datatype="number" parmname="endtime">
endtime of the item in seconds, unless qnIn is set to true
      </parameter>
      <parameter id="4" datatype="boolean" parmname="qnIn">
unknown; can be set to true, or false or be omitted
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     midi
     track
     mediaitem
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CreateTakeAudioAccessor</slug>
    <functioncall prog_lang="cpp">AudioAccessor* CreateTakeAudioAccessor(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">AudioAccessor CreateTakeAudioAccessor(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">AudioAccessor = reaper.CreateTakeAudioAccessor(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">AudioAccessor RPR_CreateTakeAudioAccessor(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Create an audio accessor object for this take. Must only call from the main thread.</p>
<p>See <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="AudioAccessor" retvalname="AudioAccessor">
the newly created AudioAccessor
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">
the take from a MediaItem-object, of which you want to create a new AudioAccessor
      </parameter>
    </parameters>
    <tags>
     audiomanagement
     audio
     accessor
     create
     item
     take
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CreateTrackAudioAccessor</slug>
    <functioncall prog_lang="cpp">AudioAccessor* CreateTrackAudioAccessor(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">AudioAccessor CreateTrackAudioAccessor(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">AudioAccessor = reaper.CreateTrackAudioAccessor(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">AudioAccessor RPR_CreateTrackAudioAccessor(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Create an audio accessor object for this track. Must only call from the main thread. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="AudioAccessor" retvalname="AudioAccessor">
the newly created AudioAccessor for this MediaTrack
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">
the MediaTrack, of which you want to create an AudioAccessor
      </parameter>
    </parameters>
    <tags>
     audiomanagement
     audio
     accessor
     create
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CreateTrackSend</slug>
    <functioncall prog_lang="cpp">int CreateTrackSend(MediaTrack* tr, MediaTrack* desttrInOptional)</functioncall>
    <functioncall prog_lang="eel">int CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)</functioncall>
    <functioncall prog_lang="python">Int RPR_CreateTrackSend(MediaTrack tr, MediaTrack desttrInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return &amp;gt;=0 on success (== new send/receive index). See <a href="#RemoveTrackSend">RemoveTrackSend</a>, <a href="#GetSetTrackSendInfo">GetSetTrackSendInfo</a>, <a href="#GetTrackSendInfo_Value">GetTrackSendInfo_Value</a>, <a href="#SetTrackSendInfo_Value">SetTrackSendInfo_Value</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the id of the new HWOut or Send created. HWOut and Send have their own individual index-numbering.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="tr">
the MediaTrack in which to create the send/hwout
      </parameter>
      <parameter id="2" datatype="MediaTrack" parmname="desttrIn">
destination track input; <br/>
a MediaTrack-object, creates a new send to tr from MediaTrack-object; <br/>
nil(or no MediaTrack-object), creates a new hardware-output
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     create
     routing
     hwout
     hardware out
     send
     receive
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_FlushUndo</slug>
    <functioncall prog_lang="cpp">void CSurf_FlushUndo(bool force)</functioncall>
    <functioncall prog_lang="eel">CSurf_FlushUndo(bool force)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_FlushUndo(boolean force)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_FlushUndo(Boolean force)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
call this to force flushing of the undo states after using CSurf_On*Change()
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="boolean" parmname="force">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_GetTouchState</slug>
    <functioncall prog_lang="cpp">bool CSurf_GetTouchState(MediaTrack* trackid, int isPan)</functioncall>
    <functioncall prog_lang="eel">bool CSurf_GetTouchState(MediaTrack trackid, int isPan)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.CSurf_GetTouchState(MediaTrack trackid, integer isPan)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_CSurf_GetTouchState(MediaTrack trackid, Int isPan)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">

      </parameter>
      <parameter id="2" datatype="integer" parmname="isPan">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_GoEnd</slug>
    <functioncall prog_lang="cpp">void CSurf_GoEnd()</functioncall>
    <functioncall prog_lang="eel">CSurf_GoEnd()</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_GoEnd()</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_GoEnd()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Moves the cursor to the end of the last item in the project.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <tags>
     transportmanagement
     move
     cursor
     end
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_GoStart</slug>
    <functioncall prog_lang="cpp">void CSurf_GoStart()</functioncall>
    <functioncall prog_lang="eel">CSurf_GoStart()</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_GoStart()</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_GoStart()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Moves the cursor to the start of the project.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <tags>
     transportmanagement
     move
     cursor
     start
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_NumTracks</slug>
    <functioncall prog_lang="cpp">int CSurf_NumTracks(bool mcpView)</functioncall>
    <functioncall prog_lang="eel">int CSurf_NumTracks(bool mcpView)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CSurf_NumTracks(boolean mcpView)</functioncall>
    <functioncall prog_lang="python">Int RPR_CSurf_NumTracks(Boolean mcpView)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
counts the number of tracks, or the number of visible tracks, when mcpView is set to true.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
number of tracks
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="boolean" parmname="mcpView">
true, only return the number of tracks visible in MCP; false, count all tracks, incl. invisible
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     count
     tracks
     visible
     invisible
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnArrow</slug>
    <functioncall prog_lang="cpp">void CSurf_OnArrow(int whichdir, bool wantzoom)</functioncall>
    <functioncall prog_lang="eel">CSurf_OnArrow(int whichdir, bool wantzoom)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnArrow(integer whichdir, boolean wantzoom)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnArrow(Int whichdir, Boolean wantzoom)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Zoom or scroll the Arrangeview vertically. <br/>
The stepsize with scrolling is track by track.
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="whichdir">
into which (zoom-)direction to change<br/>
  0, move arrangeview upward(one track each step)/zoom in<br/>
  1, move arrangeview downward(one track each step)/zoom out
      </parameter>
      <parameter id="2" datatype="boolean" parmname="wantzoom">
true, adjust vertical zoom; false, adjust vertical scrolling
      </parameter>
    </parameters>
    <tags>
     arrangeviewmanagement
     zoom
     vertical
     scroll
     arrange
     view
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnFwd</slug>
    <functioncall prog_lang="cpp">void CSurf_OnFwd(int seekplay)</functioncall>
    <functioncall prog_lang="eel">CSurf_OnFwd(int seekplay)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnFwd(integer seekplay)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnFwd(Int seekplay)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Moves editcursor forward, and optionally with seekplay.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="seekplay">
how to move the editcursor forward<br/>
  0, move cursor forward in small steps. Stepsize depends on horizontal zoomfactor.<br/>
  1, move cursor forward, in half-second steps when stopped; when playing it jumps ahead with playing restarting at editcursor
      </parameter>
    </parameters>
    <tags>
     transportmanagement
     cursor
     forward
     jump
     seekplay
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnFXChange</slug>
    <functioncall prog_lang="cpp">bool CSurf_OnFXChange(MediaTrack* trackid, int en)</functioncall>
    <functioncall prog_lang="eel">bool CSurf_OnFXChange(MediaTrack trackid, int en)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.CSurf_OnFXChange(MediaTrack trackid, integer en)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_CSurf_OnFXChange(MediaTrack trackid, Int en)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/toggles activation of FX-Chain.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if FX-chain is activated; false, if FX-chain is deactivated
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack, whose FX-chain you want to de-/activate
      </parameter>
      <parameter id="2" datatype="integer" parmname="en">
activation state of FX-chain<br/>
  -1, toggle FX-chain on/off<br/>
   0, set FX-chain off<br/>
   1, set FX-chain on
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     fx
     set
     toggle
     chain
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnInputMonitorChange</slug>
    <functioncall prog_lang="cpp">int CSurf_OnInputMonitorChange(MediaTrack* trackid, int monitor)</functioncall>
    <functioncall prog_lang="eel">int CSurf_OnInputMonitorChange(MediaTrack trackid, int monitor)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CSurf_OnInputMonitorChange(MediaTrack trackid, integer monitor)</functioncall>
    <functioncall prog_lang="python">Int RPR_CSurf_OnInputMonitorChange(MediaTrack trackid, Int monitor)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
sets rec-monitoring of a specific track.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the new input-monitor-state (refer to parameter monitor for description)
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack, of which you want to toggle the monitor-button
      </parameter>
      <parameter id="2" datatype="integer" parmname="monitor">
monitor-input-state<br/>
  -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)<br/>
   0, monitor off (can be set with 3 and higher as well)<br/>
   1, monitor input on
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     rec
     toggle
     monitoring
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnInputMonitorChangeEx</slug>
    <functioncall prog_lang="cpp">int CSurf_OnInputMonitorChangeEx(MediaTrack* trackid, int monitor, bool allowgang)</functioncall>
    <functioncall prog_lang="eel">int CSurf_OnInputMonitorChangeEx(MediaTrack trackid, int monitor, bool allowgang)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CSurf_OnInputMonitorChangeEx(MediaTrack trackid, integer monitor, boolean allowgang)</functioncall>
    <functioncall prog_lang="python">Int RPR_CSurf_OnInputMonitorChangeEx(MediaTrack trackid, Int monitor, Boolean allowgang)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets monitor-input-state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the new input-monitor-state (refer to parameter monitor for description)
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack, whose monitor-input-state you want to set
      </parameter>
      <parameter id="2" datatype="integer" parmname="monitor">
monitor-input-state<br/>
  -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)<br/>
   0, monitor off (can be set with 3 and higher as well)<br/>
   1, monitor input on
      </parameter>
      <parameter id="3" datatype="boolean" parmname="allowgang">
true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     set
     monitor
     input
     tape auto style
     allowgang
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnMuteChange</slug>
    <functioncall prog_lang="cpp">bool CSurf_OnMuteChange(MediaTrack* trackid, int mute)</functioncall>
    <functioncall prog_lang="eel">bool CSurf_OnMuteChange(MediaTrack trackid, int mute)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.CSurf_OnMuteChange(MediaTrack trackid, integer mute)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_CSurf_OnMuteChange(MediaTrack trackid, Int mute)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets mute state of a MediaTrack.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
the new mute-state; true, mute is on; false, mute is off
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack to be muted
      </parameter>
      <parameter id="2" datatype="integer" parmname="mute">
mute state<br/>
  0, mute off<br/>
  1 and higher, mute on<br/>
  negative values toggle mute-state
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     mute
     set
     toggle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnMuteChangeEx</slug>
    <functioncall prog_lang="cpp">bool CSurf_OnMuteChangeEx(MediaTrack* trackid, int mute, bool allowgang)</functioncall>
    <functioncall prog_lang="eel">bool CSurf_OnMuteChangeEx(MediaTrack trackid, int mute, bool allowgang)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.CSurf_OnMuteChangeEx(MediaTrack trackid, integer mute, boolean allowgang)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_CSurf_OnMuteChangeEx(MediaTrack trackid, Int mute, Boolean allowgang)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/toggles mute-state for a MediaTrack. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
the new mute-state; true, mute is on; false, mute is off
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack to be muted
      </parameter>
      <parameter id="2" datatype="integer" parmname="mute">
mute state<br/>
  0, mute off<br/>
  1, and higher, mute on<br/>
  negative values toggle mute-state
      </parameter>
      <parameter id="3" datatype="boolean" parmname="allowgang">
true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     mute
     set
     toggle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnPanChange</slug>
    <functioncall prog_lang="cpp">double CSurf_OnPanChange(MediaTrack* trackid, double pan, bool relative)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnPanChange(MediaTrack trackid, pan, bool relative)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnPanChange(MediaTrack trackid, number pan, boolean relative)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnPanChange(MediaTrack trackid, Float pan, Boolean relative)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Changes the pan-value of a track.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new pan-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack in which to change the pan
      </parameter>
      <parameter id="2" datatype="number" parmname="pan">
-1, full pan left; 1, full pan right; 0, pan centered
      </parameter>
      <parameter id="3" datatype="boolean" parmname="relative">
true, add/subtract pan to the currently set pan-value
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     pan
     value
     center
     relative
     set
     change
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnPanChangeEx</slug>
    <functioncall prog_lang="cpp">double CSurf_OnPanChangeEx(MediaTrack* trackid, double pan, bool relative, bool allowGang)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnPanChangeEx(MediaTrack trackid, pan, bool relative, bool allowGang)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnPanChangeEx(MediaTrack trackid, number pan, boolean relative, boolean allowGang)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnPanChangeEx(MediaTrack trackid, Float pan, Boolean relative, Boolean allowGang)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Changes the pan-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new pan-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack in which to change the pan
      </parameter>
      <parameter id="2" datatype="number" parmname="pan">
-1, full pan left; 1, full pan right; 0, pan centered
      </parameter>
      <parameter id="3" datatype="boolean" parmname="relative">
true, add/subtract pan to the currently set pan-value
      </parameter>
      <parameter id="4" datatype="boolean" parmname="allowgang">
true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     pan
     value
     center
     relative
     set
     change
     allowgang
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnPause</slug>
    <functioncall prog_lang="cpp">void CSurf_OnPause()</functioncall>
    <functioncall prog_lang="eel">CSurf_OnPause()</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnPause()</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnPause()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Toggles between pause and play or when recording has started between pause and rec. Unlike <a href="#CSurf_OnPlay">CSurf_OnPlay()</a> it toggles pause first, then plays.</p>

    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <tags>
     transportmanagement
     toggle
     play
     rec
     pause
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnPlay</slug>
    <functioncall prog_lang="cpp">void CSurf_OnPlay()</functioncall>
    <functioncall prog_lang="eel">CSurf_OnPlay()</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnPlay()</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnPlay()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Toggles between play and pause or, when recording, rec and pause. Unlike <a href="#CSurf_OnPause">CSurf_OnPause()</a> it toggles play first, then pauses.</p>

    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <tags>
     transportmanagement
     toggle
     play
     rec
     pause
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnPlayRateChange</slug>
    <functioncall prog_lang="cpp">void CSurf_OnPlayRateChange(double playrate)</functioncall>
    <functioncall prog_lang="eel">CSurf_OnPlayRateChange(playrate)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnPlayRateChange(number playrate)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnPlayRateChange(Float playrate)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets the playbackrate of the current project. Can be between 0.25x to 4x.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="number" parmname="playrate">
the playbackrate of the current project. 0.25 to 4.00
      </parameter>
    </parameters>
    <tags>
     transportmanagement
     playback
     rate
     playrate
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnRecArmChange</slug>
    <functioncall prog_lang="cpp">bool CSurf_OnRecArmChange(MediaTrack* trackid, int recarm)</functioncall>
    <functioncall prog_lang="eel">bool CSurf_OnRecArmChange(MediaTrack trackid, int recarm)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.CSurf_OnRecArmChange(MediaTrack trackid, integer recarm)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_CSurf_OnRecArmChange(MediaTrack trackid, Int recarm)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets a MediaTrack's armed state.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if set to armed; false, if not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack in which to set the armed-state
      </parameter>
      <parameter id="2" datatype="integer" parmname="recarm">
the armstate; <br/>
   0, set to unarmed<br/>
   1 and higher, set to armed<br/>
  -1 and lower, toggle recarm
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     arm
     state
     set
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnRecArmChangeEx</slug>
    <functioncall prog_lang="cpp">bool CSurf_OnRecArmChangeEx(MediaTrack* trackid, int recarm, bool allowgang)</functioncall>
    <functioncall prog_lang="eel">bool CSurf_OnRecArmChangeEx(MediaTrack trackid, int recarm, bool allowgang)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.CSurf_OnRecArmChangeEx(MediaTrack trackid, integer recarm, boolean allowgang)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_CSurf_OnRecArmChangeEx(MediaTrack trackid, Int recarm, Boolean allowgang)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets a MediaTrack's armed state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if set to armed; false, if not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack in which to set the armed-state
      </parameter>
      <parameter id="2" datatype="integer" parmname="recarm">
the armstate; <br/>
   0, set to unarmed<br/>
   1 and higher, set to armed<br/>
  -1 and lower, toggle recarm
      </parameter>
      <parameter id="3" datatype="boolean" parmname="allowgang">
true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     arm
     state
     set
     allowgang
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnRecord</slug>
    <functioncall prog_lang="cpp">void CSurf_OnRecord()</functioncall>
    <functioncall prog_lang="eel">CSurf_OnRecord()</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnRecord()</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnRecord()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Toggles recording on and off. Starts recording from edit-cursor-position.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <tags>
     transportmanagement
     recording
     toggle
     on
     off
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnRecvPanChange</slug>
    <functioncall prog_lang="cpp">double CSurf_OnRecvPanChange(MediaTrack* trackid, int recv_index, double pan, bool relative)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnRecvPanChange(MediaTrack trackid, int recv_index, pan, bool relative)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnRecvPanChange(MediaTrack trackid, integer recv_index, number pan, boolean relative)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnRecvPanChange(MediaTrack trackid, Int recv_index, Float pan, Boolean relative)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/alters a pan-value for a received-track. Will also change pan in the accompanying send-track!
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new receive-pan-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack-object whose receive-pan you want to change
      </parameter>
      <parameter id="2" datatype="integer" parmname="recv_index">
the receive to be changed. 0 for the first receive, 1 for the second, etc
      </parameter>
      <parameter id="3" datatype="number" parmname="pan">
the new pan value; -1, full left; 1, full right; 0, center
      </parameter>
      <parameter id="4" datatype="boolean" parmname="relative">
false, set pan to new value; true, alter pan by new value
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     routing
     receive
     pan
     set
     alter
     relative
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>CSurf_OnRecvVolumeChange</slug>
    <functioncall prog_lang="cpp">double CSurf_OnRecvVolumeChange(MediaTrack* trackid, int recv_index, double volume, bool relative)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnRecvVolumeChange(MediaTrack trackid, int recv_index, volume, bool relative)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnRecvVolumeChange(MediaTrack trackid, integer recv_index, number volume, boolean relative)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnRecvVolumeChange(MediaTrack trackid, Int recv_index, Float volume, Boolean relative)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Sets/alters the volume-value of a received track. Will also change volume in the accompanying send-track!</p>
<p>Note: You can’t(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here! Use <a href="#mkvolstr">mkvolstr</a> instead.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new receive-volume-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack-object whose receive-pan you want to change
      </parameter>
      <parameter id="2" datatype="integer" parmname="recv_index">
the receive to be changed. 0 for the first receive, 1 for the second, etc
      </parameter>
      <parameter id="3" datatype="number" parmname="volume">
the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; higher values are possible, though fader will not reflect them. but higher values will still be applied.           
      </parameter>
      <parameter id="4" datatype="boolean" parmname="relative">
false, set volume to new value; true, alter volume by new value
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     routing
     receive
     volume
     set
     alter
     relative
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnRew</slug>
    <functioncall prog_lang="cpp">void CSurf_OnRew(int seekplay)</functioncall>
    <functioncall prog_lang="eel">CSurf_OnRew(int seekplay)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnRew(integer seekplay)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnRew(Int seekplay)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Moves editcursor backward, and optionally with seekplay.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="seekplay">
how to move the editcursor backward<br/>
  0, move cursor backward in small steps. Stepsize depends on horizontal zoomfactor.<br/>
  1, move cursor backward, in half-second steps when stopped; when playing, playing will restart at playcursor
      </parameter>
    </parameters>
    <tags>
     transportmanagement
     cursor
     backward
     jump
     seekplay
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnRewFwd</slug>
    <functioncall prog_lang="cpp">void CSurf_OnRewFwd(int seekplay, int dir)</functioncall>
    <functioncall prog_lang="eel">CSurf_OnRewFwd(int seekplay, int dir)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnRewFwd(integer seekplay, integer dir)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnRewFwd(Int seekplay, Int dir)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Will move editcursor for or backward, depending on parameter dir.<br/>
During play and whith seekplay set, the movement of the editcursor depends on the playcursor-position at the time of calling CSurf_OnRewFwd.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="seekplay">
turns seekplay on or off; has no effect during recording<br/>
  0, when stopped, jump for/backwards in small steps(stepsize depending on zoom-factor)<br/>
  1, when stopped, jump for/backwards in 0.5 seconds steps. When play/rec
      </parameter>
      <parameter id="2" datatype="integer" parmname="dir">
the direction; -1, move backwards; 0, keep the position; 1, move forwards
      </parameter>
    </parameters>
    <tags>
     transportmanagement
     move
     editcursor
     seekplay
     forward
     backward
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnScroll</slug>
    <functioncall prog_lang="cpp">void CSurf_OnScroll(int xdir, int ydir)</functioncall>
    <functioncall prog_lang="eel">CSurf_OnScroll(int xdir, int ydir)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnScroll(integer xdir, integer ydir)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnScroll(Int xdir, Int ydir)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Scroll arrangeview relative to it's current view-settings.
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="xdir">
scroll horizontally(timeline) through the project. <br/>
Negative values toward the beginning, positive toward the end. The higher the values, the farther the movement.
      </parameter>
      <parameter id="2" datatype="integer" parmname="ydir">
scroll vertically(tracks) through the project. <br/>
Negative values toward the top, positive toward the bottom. The higher the values, the farther the movement.
      </parameter>
    </parameters>
    <tags>
     arrangeviewmanagement
     scroll
     horizontal
     vertical
     relative
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnSelectedChange</slug>
    <functioncall prog_lang="cpp">bool CSurf_OnSelectedChange(MediaTrack* trackid, int selected)</functioncall>
    <functioncall prog_lang="eel">bool CSurf_OnSelectedChange(MediaTrack trackid, int selected)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.CSurf_OnSelectedChange(MediaTrack trackid, integer selected)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_CSurf_OnSelectedChange(MediaTrack trackid, Int selected)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets a track selected or not.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, track is selected; false, track is unselected
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack to be selected/unselected
      </parameter>
      <parameter id="2" datatype="integer" parmname="selected">
select-state; 0, track is selected; 1, track is unselected
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     select
     deselect
     unselect
     set
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnSendPanChange</slug>
    <functioncall prog_lang="cpp">double CSurf_OnSendPanChange(MediaTrack* trackid, int send_index, double pan, bool relative)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnSendPanChange(MediaTrack trackid, int send_index, pan, bool relative)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnSendPanChange(MediaTrack trackid, integer send_index, number pan, boolean relative)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnSendPanChange(MediaTrack trackid, Int send_index, Float pan, Boolean relative)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/alters the pan-volume of a send-track. Will also change the volume of the accompanying receive-track!
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new pan-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrackObject, whose pan-value you want to change
      </parameter>
      <parameter id="2" datatype="integer" parmname="send_index">
the index-number of the send-track. 0 for the first, 2 for the second, etc
      </parameter>
      <parameter id="3" datatype="number" parmname="pan">
the pan value; -1 for hard left; 1 for hard right; 0 for center
      </parameter>
      <parameter id="4" datatype="boolean" parmname="relative">
false, set pan to new value; true, alter pan by new value
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     receive
     pan
     routing
     set
     alter
     relative
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnSendVolumeChange</slug>
    <functioncall prog_lang="cpp">double CSurf_OnSendVolumeChange(MediaTrack* trackid, int send_index, double volume, bool relative)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnSendVolumeChange(MediaTrack trackid, int send_index, volume, bool relative)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnSendVolumeChange(MediaTrack trackid, integer send_index, number volume, boolean relative)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnSendVolumeChange(MediaTrack trackid, Int send_index, Float volume, Boolean relative)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/alters the volume-value of a send-track. Will also alter the volume of the accompanying receive-track.<br/>
<br/>
Note: You can't(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here!
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new volume-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrackObject, whose volume-value you want to change
      </parameter>
      <parameter id="2" datatype="integer" parmname="send_index">
the index-number of the send-track. 0 for the first, 2 for the second, etc
      </parameter>
      <parameter id="3" datatype="number" parmname="volume">
the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; <br/>
higher values are possible, though fader will not reflect them. but higher values will still be applied.
      </parameter>
      <parameter id="4" datatype="boolean" parmname="relative">
false, set volume to new value; true, alter volume by new value
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     routing
     receive
     volume
     set
     alter
     relative
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnSoloChange</slug>
    <functioncall prog_lang="cpp">bool CSurf_OnSoloChange(MediaTrack* trackid, int solo)</functioncall>
    <functioncall prog_lang="eel">bool CSurf_OnSoloChange(MediaTrack trackid, int solo)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.CSurf_OnSoloChange(MediaTrack trackid, integer solo)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_CSurf_OnSoloChange(MediaTrack trackid, Int solo)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/toggles solo state of a track.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, solo has been turned on; false, solo has been turned off
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack in which to toggle solo state
      </parameter>
      <parameter id="2" datatype="integer" parmname="solo">
solo state. <br/>
   0, solo off<br/>
   1 and higher, solo on<br/>
  -1 and lower, toggle solo on/off
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     solo
     toggle
     set
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnSoloChangeEx</slug>
    <functioncall prog_lang="cpp">bool CSurf_OnSoloChangeEx(MediaTrack* trackid, int solo, bool allowgang)</functioncall>
    <functioncall prog_lang="eel">bool CSurf_OnSoloChangeEx(MediaTrack trackid, int solo, bool allowgang)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.CSurf_OnSoloChangeEx(MediaTrack trackid, integer solo, boolean allowgang)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_CSurf_OnSoloChangeEx(MediaTrack trackid, Int solo, Boolean allowgang)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/toggles solo state of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, solo has been turned on; false, solo has been turned off
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack in which to toggle solo state
      </parameter>
      <parameter id="2" datatype="integer" parmname="solo">
solo state. <br/>
  0, solo off<br/>
  1 and higher, solo on<br/>
 -1 and lower, toggle solo on/off
      </parameter>
      <parameter id="3" datatype="boolean" parmname="allowgang">
true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     solo
     toggle
     set
     allowgang
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnStop</slug>
    <functioncall prog_lang="cpp">void CSurf_OnStop()</functioncall>
    <functioncall prog_lang="eel">CSurf_OnStop()</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnStop()</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnStop()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Stops playing/recording in current project.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <tags>
     trackmanagement
     stop
     recording
     play
     pause
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnTempoChange</slug>
    <functioncall prog_lang="cpp">void CSurf_OnTempoChange(double bpm)</functioncall>
    <functioncall prog_lang="eel">CSurf_OnTempoChange(bpm)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnTempoChange(number bpm)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnTempoChange(Float bpm)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets the tempo of the project in beats per minute.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="number" parmname="bpm">
the beats per minute value; 1 to 1000
      </parameter>
    </parameters>
    <tags>
     projectmanagement
     tempo
     bpm
     beats per minute
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnTrackSelection</slug>
    <functioncall prog_lang="cpp">void CSurf_OnTrackSelection(MediaTrack* trackid)</functioncall>
    <functioncall prog_lang="eel">CSurf_OnTrackSelection(MediaTrack trackid)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnTrackSelection(MediaTrack trackid)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnTrackSelection(MediaTrack trackid)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnVolumeChange</slug>
    <functioncall prog_lang="cpp">double CSurf_OnVolumeChange(MediaTrack* trackid, double volume, bool relative)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnVolumeChange(MediaTrack trackid, volume, bool relative)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnVolumeChange(MediaTrack trackid, number volume, boolean relative)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnVolumeChange(MediaTrack trackid, Float volume, Boolean relative)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Sets or alters volume of a track to a new value.</p>
<p>Use <a href="#DB2SLIDER">DB2SLIDER</a> to convert dB-value to fitting numbers of the volume-parameter.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new volume-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack, whose volume you want to change.
      </parameter>
      <parameter id="2" datatype="number" parmname="volume">
volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range.
      </parameter>
      <parameter id="3" datatype="boolean" parmname="relative">
false, set volume to new value; true, alter volume by new value
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     volume
     set
     alter
     relative
     value
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnVolumeChangeEx</slug>
    <functioncall prog_lang="cpp">double CSurf_OnVolumeChangeEx(MediaTrack* trackid, double volume, bool relative, bool allowGang)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnVolumeChangeEx(MediaTrack trackid, volume, bool relative, bool allowGang)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnVolumeChangeEx(MediaTrack trackid, number volume, boolean relative, boolean allowGang)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnVolumeChangeEx(MediaTrack trackid, Float volume, Boolean relative, Boolean allowGang)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Sets or alters volume of a track to a new value. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.</p>
<p>Use <a href="#DB2SLIDER">DB2SLIDER</a> to convert dB-value to fitting numbers of the volume-parameter.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new volume-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaTrack, whose volume you want to change.
      </parameter>
      <parameter id="2" datatype="number" parmname="volume">
volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range.
      </parameter>
      <parameter id="3" datatype="boolean" parmname="relative">
false, set volume to new value; true, alter volume by new value
      </parameter>
      <parameter id="4" datatype="boolean" parmname="allowgang">
true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     volume
     set
     alter
     relative
     value
     allowgang
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnWidthChange</slug>
    <functioncall prog_lang="cpp">double CSurf_OnWidthChange(MediaTrack* trackid, double width, bool relative)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnWidthChange(MediaTrack trackid, width, bool relative)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnWidthChange(MediaTrack trackid, number width, boolean relative)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnWidthChange(MediaTrack trackid, Float width, Boolean relative)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/alters the width-value of a track.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new width-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaItem, whose width you want to change
      </parameter>
      <parameter id="2" datatype="number" parmname="width">
the width-value; -1 to 1; 0 is no width/mono
      </parameter>
      <parameter id="3" datatype="boolean" parmname="relative">
false, set width to the new width-value; true, alter width by the new width-value
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     width
     set
     alter
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnWidthChangeEx</slug>
    <functioncall prog_lang="cpp">double CSurf_OnWidthChangeEx(MediaTrack* trackid, double width, bool relative, bool allowGang)</functioncall>
    <functioncall prog_lang="eel">double CSurf_OnWidthChangeEx(MediaTrack trackid, width, bool relative, bool allowGang)</functioncall>
    <functioncall prog_lang="lua">number = reaper.CSurf_OnWidthChangeEx(MediaTrack trackid, number width, boolean relative, boolean allowGang)</functioncall>
    <functioncall prog_lang="python">Float RPR_CSurf_OnWidthChangeEx(MediaTrack trackid, Float width, Boolean relative, Boolean allowGang)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/alters the width-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the new width-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">
the MediaItem, whose width you want to change
      </parameter>
      <parameter id="2" datatype="number" parmname="width">
the width-value; -1 to 1; 0 is no width/mono
      </parameter>
      <parameter id="3" datatype="boolean" parmname="relative">
false, set width to the new width-value; true, alter width by the new width-value
      </parameter>
      <parameter id="4" datatype="boolean" parmname="allowgang">
true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid 
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     width
     set
     alter
     allowgang
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnZoom</slug>
    <functioncall prog_lang="cpp">void CSurf_OnZoom(int xdir, int ydir)</functioncall>
    <functioncall prog_lang="eel">CSurf_OnZoom(int xdir, int ydir)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_OnZoom(integer xdir, integer ydir)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_OnZoom(Int xdir, Int ydir)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Changes horizontal/vertical zoom.
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="xdir">
horizontal zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize.
      </parameter>
      <parameter id="2" datatype="integer" parmname="ydir">
vertical zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize.
      </parameter>
    </parameters>
    <tags>
     arrangeviewmanagement
     zoom
     vertical
     horizontal
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_ResetAllCachedVolPanStates</slug>
    <functioncall prog_lang="cpp">void CSurf_ResetAllCachedVolPanStates()</functioncall>
    <functioncall prog_lang="eel">CSurf_ResetAllCachedVolPanStates()</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_ResetAllCachedVolPanStates()</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_ResetAllCachedVolPanStates()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Resets all cached vol-pan-states.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <tags>
     trackmanagement
     reset
     vol
     pan
     state
     cache
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_ScrubAmt</slug>
    <functioncall prog_lang="cpp">void CSurf_ScrubAmt(double amt)</functioncall>
    <functioncall prog_lang="eel">CSurf_ScrubAmt(amt)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_ScrubAmt(number amt)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_ScrubAmt(Float amt)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Changes position of the editcursor by amt-value in seconds. When playing, the playposition changes to the editcursor-position.<br/>
During recording, it changes only the position of the editcursor.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="number" parmname="amt">
how far to change position of the editcursor in seconds. Positive values toward the end, negative toward the beginning of the project.
      </parameter>
    </parameters>
    <tags>
     transportmanagement
     playcursor
     editcursor
     move
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetAutoMode</slug>
    <functioncall prog_lang="cpp">void CSurf_SetAutoMode(int mode, IReaperControlSurface* ignoresurf)</functioncall>
    <functioncall prog_lang="eel">CSurf_SetAutoMode(int mode, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetAutoMode(integer mode, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetAutoMode(Int mode, IReaperControlSurface ignoresurf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="mode">

      </parameter>
      <parameter id="2" datatype="IReaperControlSurface" parmname="ignoresurf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetPlayState</slug>
    <functioncall prog_lang="cpp">void CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface* ignoresurf)</functioncall>
    <functioncall prog_lang="eel">CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetPlayState(boolean play, boolean pause, boolean rec, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetPlayState(Boolean play, Boolean pause, Boolean rec, IReaperControlSurface ignoresurf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="boolean" parmname="play">

      </parameter>
      <parameter id="2" datatype="boolean" parmname="pause">

      </parameter>
      <parameter id="3" datatype="boolean" parmname="rec">

      </parameter>
      <parameter id="4" datatype="IReaperControlSurface" parmname="ignoresurf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetRepeatState</slug>
    <functioncall prog_lang="cpp">void CSurf_SetRepeatState(bool rep, IReaperControlSurface* ignoresurf)</functioncall>
    <functioncall prog_lang="eel">CSurf_SetRepeatState(bool rep, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetRepeatState(boolean rep, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetRepeatState(Boolean rep, IReaperControlSurface ignoresurf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="boolean" parmname="rep">

      </parameter>
      <parameter id="2" datatype="IReaperControlSurface" parmname="ignoresurf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetSurfaceMute</slug>
    <functioncall prog_lang="cpp">void CSurf_SetSurfaceMute(MediaTrack* trackid, bool mute, IReaperControlSurface* ignoresurf)</functioncall>
    <functioncall prog_lang="eel">CSurf_SetSurfaceMute(MediaTrack trackid, bool mute, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceMute(MediaTrack trackid, boolean mute, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetSurfaceMute(MediaTrack trackid, Boolean mute, IReaperControlSurface ignoresurf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">

      </parameter>
      <parameter id="2" datatype="integer" parmname="mute">

      </parameter>
      <parameter id="3" datatype="IReaperControlSurface" parmname="ignoresurf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetSurfacePan</slug>
    <functioncall prog_lang="cpp">void CSurf_SetSurfacePan(MediaTrack* trackid, double pan, IReaperControlSurface* ignoresurf)</functioncall>
    <functioncall prog_lang="eel">CSurf_SetSurfacePan(MediaTrack trackid, pan, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetSurfacePan(MediaTrack trackid, number pan, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetSurfacePan(MediaTrack trackid, Float pan, IReaperControlSurface ignoresurf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">

      </parameter>
      <parameter id="2" datatype="number" parmname="pan">

      </parameter>
      <parameter id="3" datatype="IReaperControlSurface" parmname="ignoresurf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetSurfaceRecArm</slug>
    <functioncall prog_lang="cpp">void CSurf_SetSurfaceRecArm(MediaTrack* trackid, bool recarm, IReaperControlSurface* ignoresurf)</functioncall>
    <functioncall prog_lang="eel">CSurf_SetSurfaceRecArm(MediaTrack trackid, bool recarm, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceRecArm(MediaTrack trackid, boolean recarm, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetSurfaceRecArm(MediaTrack trackid, Boolean recarm, IReaperControlSurface ignoresurf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">

      </parameter>
      <parameter id="2" datatype="boolean" parmname="recarm">

      </parameter>
      <parameter id="3" datatype="IReaperControlSurface" parmname="ignoresurf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetSurfaceSelected</slug>
    <functioncall prog_lang="cpp">void CSurf_SetSurfaceSelected(MediaTrack* trackid, bool selected, IReaperControlSurface* ignoresurf)</functioncall>
    <functioncall prog_lang="eel">CSurf_SetSurfaceSelected(MediaTrack trackid, bool selected, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceSelected(MediaTrack trackid, boolean selected, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetSurfaceSelected(MediaTrack trackid, Boolean selected, IReaperControlSurface ignoresurf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">

      </parameter>
      <parameter id="2" datatype="boolean" parmname="selected">

      </parameter>
      <parameter id="3" datatype="IReaperControlSurface" parmname="ignoresurf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetSurfaceSolo</slug>
    <functioncall prog_lang="cpp">void CSurf_SetSurfaceSolo(MediaTrack* trackid, bool solo, IReaperControlSurface* ignoresurf)</functioncall>
    <functioncall prog_lang="eel">CSurf_SetSurfaceSolo(MediaTrack trackid, bool solo, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceSolo(MediaTrack trackid, boolean solo, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetSurfaceSolo(MediaTrack trackid, Boolean solo, IReaperControlSurface ignoresurf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">

      </parameter>
      <parameter id="2" datatype="boolean" parmname="solo">

      </parameter>
      <parameter id="3" datatype="IReaperControlSurface" parmname="ignoresurf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetSurfaceVolume</slug>
    <functioncall prog_lang="cpp">void CSurf_SetSurfaceVolume(MediaTrack* trackid, double volume, IReaperControlSurface* ignoresurf)</functioncall>
    <functioncall prog_lang="eel">CSurf_SetSurfaceVolume(MediaTrack trackid, volume, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetSurfaceVolume(MediaTrack trackid, number volume, IReaperControlSurface ignoresurf)</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetSurfaceVolume(MediaTrack trackid, Float volume, IReaperControlSurface ignoresurf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="trackid">

      </parameter>
      <parameter id="2" datatype="number" parmname="volume">

      </parameter>
      <parameter id="3" datatype="IReaperControlSurface" parmname="ignoresurf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_SetTrackListChange</slug>
    <functioncall prog_lang="cpp">void CSurf_SetTrackListChange()</functioncall>
    <functioncall prog_lang="eel">CSurf_SetTrackListChange()</functioncall>
    <functioncall prog_lang="lua">reaper.CSurf_SetTrackListChange()</functioncall>
    <functioncall prog_lang="python">RPR_CSurf_SetTrackListChange()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_TrackFromID</slug>
    <functioncall prog_lang="cpp">MediaTrack* CSurf_TrackFromID(int idx, bool mcpView)</functioncall>
    <functioncall prog_lang="eel">MediaTrack CSurf_TrackFromID(int idx, bool mcpView)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.CSurf_TrackFromID(integer idx, boolean mcpView)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_CSurf_TrackFromID(Int idx, Boolean mcpView)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets a MediaTrack-object by it's number.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">
the MediaTrack-object of the track you requested
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="idx">
the tracknumber of the track you want to have; 0 for track 1, 1 for track 2, etc.
      </parameter>
      <parameter id="2" datatype="boolean" parmname="mcpView">
true, count only tracks, that are visible in MixerControlPanel
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     id
     tracknumber
     mediatrack
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_TrackToID</slug>
    <functioncall prog_lang="cpp">int CSurf_TrackToID(MediaTrack* track, bool mcpView)</functioncall>
    <functioncall prog_lang="eel">int CSurf_TrackToID(MediaTrack track, bool mcpView)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.CSurf_TrackToID(MediaTrack track, boolean mcpView)</functioncall>
    <functioncall prog_lang="python">Int RPR_CSurf_TrackToID(MediaTrack track, Boolean mcpView)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the tracknumber of a MediaTrack-object.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the tracknumber of the MediaTrack; when mcpView is true, invisible tracks will return -1 as number
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">
the MediaTrack-object, whose number you want to know
      </parameter>
      <parameter id="2" datatype="boolean" parmname="mcpView">
true, only tracks visible in MixerControlPanel; false, all tracks visible in MixerControlPanel
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     id
     tracknumber
     mediatrack
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DB2SLIDER</slug>
    <functioncall prog_lang="cpp">double DB2SLIDER(double x)</functioncall>
    <functioncall prog_lang="eel">double DB2SLIDER(x)</functioncall>
    <functioncall prog_lang="lua">number = reaper.DB2SLIDER(number x)</functioncall>
    <functioncall prog_lang="python">Float RPR_DB2SLIDER(Float x)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Converts dB-value into a slider-value. Good for converting envelope-point-values.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the slider-value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="number" parmname="x">
the dB-value to be converted. Minimum -332db for position 0
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     db
     slider
     converter
     value
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteEnvelopePointEx</slug>
    <functioncall prog_lang="cpp">bool DeleteEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx)</functioncall>
    <functioncall prog_lang="eel">bool DeleteEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.DeleteEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_DeleteEnvelopePointEx(TrackEnvelope envelope, Int autoitem_idx, Int ptidx)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration, even if the automation item is trimmed so that not all points are visible. Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.</p>
<p>See <a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a>, <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, deleting was successful; false, deleting was unsuccessful
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">
the envelope, in which the point lies, that you want to delete
      </parameter>
      <parameter id="2" datatype="integer" parmname="autoitem_idx">
-1, the underlying envelope; <br/>
0 to x, the 1st to x-1th automation-item<br/>
|0x10000000 to base ptidx on the number of points in one full loop iteration,<br/>
even if the automation item is trimmed so that not all points are visible.<br/>
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
      </parameter>
      <parameter id="3" datatype="integer" parmname="ptidx">
the envelope-point to delete
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     envelopepoints
     delete
     range
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteEnvelopePointRange</slug>
    <functioncall prog_lang="cpp">bool DeleteEnvelopePointRange(TrackEnvelope* envelope, double time_start, double time_end)</functioncall>
    <functioncall prog_lang="eel">bool DeleteEnvelopePointRange(TrackEnvelope envelope, time_start, time_end)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.DeleteEnvelopePointRange(TrackEnvelope envelope, number time_start, number time_end)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_DeleteEnvelopePointRange(TrackEnvelope envelope, Float time_start, Float time_end)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Delete a range of envelope points.</p>
<p>See <a href="#DeleteEnvelopePointRangeEx">DeleteEnvelopePointRangeEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if it succeeded
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">
the envelope-point-object, in which to delete the envelope-points
      </parameter>
      <parameter id="2" datatype="number" parmname="time_start">
the starttime of the deletionrange in seconds
      </parameter>
      <parameter id="3" datatype="number" parmname="time_end">
the endtime of the deletionrange in seconds
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     envelopepoints
     delete
     range
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteEnvelopePointRangeEx</slug>
    <functioncall prog_lang="cpp">bool DeleteEnvelopePointRangeEx(TrackEnvelope* envelope, int autoitem_idx, double time_start, double time_end)</functioncall>
    <functioncall prog_lang="eel">bool DeleteEnvelopePointRangeEx(TrackEnvelope envelope, int autoitem_idx, time_start, time_end)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.DeleteEnvelopePointRangeEx(TrackEnvelope envelope, integer autoitem_idx, number time_start, number time_end)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_DeleteEnvelopePointRangeEx(TrackEnvelope envelope, Int autoitem_idx, Float time_start, Float time_end)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if deleting was successful; false, if not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">
the envelope-point-object, in which to delete the envelope-points
      </parameter>
      <parameter id="2" datatype="integer" parmname="autoitem_idx">
the automation item to be affected by deletion; -1, for the underlying envelope itself; 0, for the first automation item on the envelope; 1 for the second, etc
      </parameter>
      <parameter id="3" datatype="number" parmname="time_start">
the starttime of the deletionrange in seconds
      </parameter>
      <parameter id="4" datatype="number" parmname="time_end">
the endtime of the deletionrange in seconds
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     envelopepoints
     delete
     range
     automation item
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>DeleteExtState</slug>
    <functioncall prog_lang="cpp">void DeleteExtState(const char* section, const char* key, bool persist)</functioncall>
    <functioncall prog_lang="eel">DeleteExtState(&quot;section&quot;, &quot;key&quot;, bool persist)</functioncall>
    <functioncall prog_lang="lua">reaper.DeleteExtState(string section, string key, boolean persist)</functioncall>
    <functioncall prog_lang="python">RPR_DeleteExtState(String section, String key, Boolean persist)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. If persistent, the value will be deleted from the file reaper-extstate.ini in the ressources-folder. See <a href="#SetExtState">SetExtState</a>, <a href="#GetExtState">GetExtState</a>, <a href="#HasExtState">HasExtState</a>.</p>

    </description>
    <chapter_context>
      Extended States
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="string" parmname="section">
the section, in which the value is stored
      </parameter>
      <parameter id="2" datatype="string" parmname="key">
the key, with which the value is stored
      </parameter>
      <parameter id="3" datatype="boolean" parmname="persist">
true, the value shall be deleted permanently; false, delete it only temporarily.
      </parameter>
    </parameters>
    <tags>
     extendedstates
     state
     value
     delete
     section
     key
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteProjectMarker</slug>
    <functioncall prog_lang="cpp">bool DeleteProjectMarker(ReaProject* proj, int markrgnindexnumber, bool isrgn)</functioncall>
    <functioncall prog_lang="eel">bool DeleteProjectMarker(ReaProject proj, int markrgnindexnumber, bool isrgn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.DeleteProjectMarker(ReaProject proj, integer markrgnindexnumber, boolean isrgn)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_DeleteProjectMarker(ReaProject proj, Int markrgnindexnumber, Boolean isrgn)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Deletes a marker or a region. proj==NULL for the active project.<br/>
<br/>
Does not delete tempo/timesignature markers!
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, deleting was successful; false, deleting was unsuccessful.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="markrgnindexnumber">
<p>the shown number of the marker to be deleted</p>

      </parameter>
      <parameter id="3" datatype="boolean" parmname="isrgn">
<p>true, marker is a region; false, marker is a normal marker</p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     delete
     marker
     regions
     shown number
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteProjectMarkerByIndex</slug>
    <functioncall prog_lang="cpp">bool DeleteProjectMarkerByIndex(ReaProject* proj, int markrgnidx)</functioncall>
    <functioncall prog_lang="eel">bool DeleteProjectMarkerByIndex(ReaProject proj, int markrgnidx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.DeleteProjectMarkerByIndex(ReaProject proj, integer markrgnidx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_DeleteProjectMarkerByIndex(ReaProject proj, Int markrgnidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region in the project, 1 for the next, etc, rather than representing the displayed marker/region ID number. See <a href="#EnumProjectMarkers3">EnumProjectMarkers3</a>) and <a href="#SetProjectMarker4">SetProjectMarker4</a>.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, deleting was successful; false, deleting was unsuccessful.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="markrgnidx">
<p>the id of the marker within the project, 0 for the first, 1 for the second, etc. Ignores the shown marker-index!</p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     delete
     marker
     regions
     shown number
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteTakeStretchMarkers</slug>
    <functioncall prog_lang="cpp">int DeleteTakeStretchMarkers(MediaItem_Take* take, int idx, const int* countInOptional)</functioncall>
    <functioncall prog_lang="eel">int DeleteTakeStretchMarkers(MediaItem_Take take, int idx, optional int countIn)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.DeleteTakeStretchMarkers(MediaItem_Take take, integer idx, optional number countIn)</functioncall>
    <functioncall prog_lang="python">Int RPR_DeleteTakeStretchMarkers(MediaItem_Take take, Int idx, const int countInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Deletes one or more stretch markers. Returns number of stretch markers deleted.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
      <parameter id="2" datatype="integer" parmname="idx">

      </parameter>
      <parameter id="3" datatype="optional number" parmname="countIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteTempoTimeSigMarker</slug>
    <functioncall prog_lang="cpp">bool DeleteTempoTimeSigMarker(ReaProject* project, int markerindex)</functioncall>
    <functioncall prog_lang="eel">bool DeleteTempoTimeSigMarker(ReaProject project, int markerindex)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.DeleteTempoTimeSigMarker(ReaProject project, integer markerindex)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_DeleteTempoTimeSigMarker(ReaProject project, Int markerindex)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Delete a tempo/time signature marker.</p>
<p>See <a href="#CountTempoTimeSigMarkers">CountTempoTimeSigMarkers</a>, <a href="#GetTempoTimeSigMarker">GetTempoTimeSigMarker</a>, <a href="#SetTempoTimeSigMarker">SetTempoTimeSigMarker</a>, <a href="#AddTempoTimeSigMarker">AddTempoTimeSigMarker</a>.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="markerindex">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteTrack</slug>
    <functioncall prog_lang="cpp">void DeleteTrack(MediaTrack* tr)</functioncall>
    <functioncall prog_lang="eel">DeleteTrack(MediaTrack tr)</functioncall>
    <functioncall prog_lang="lua">reaper.DeleteTrack(MediaTrack tr)</functioncall>
    <functioncall prog_lang="python">RPR_DeleteTrack(MediaTrack tr)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
deletes a track
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="tr">
the MediaTrack to be deleted
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     delete
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteTrackMediaItem</slug>
    <functioncall prog_lang="cpp">bool DeleteTrackMediaItem(MediaTrack* tr, MediaItem* it)</functioncall>
    <functioncall prog_lang="eel">bool DeleteTrackMediaItem(MediaTrack tr, MediaItem it)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.DeleteTrackMediaItem(MediaTrack tr, MediaItem it)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_DeleteTrackMediaItem(MediaTrack tr, MediaItem it)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Deletes a MediaItem.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, deleting was successful; false, deleting was unsuccessful
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="tr">
the MediaTrack, in which the MediaItem lies, that you want to delete
      </parameter>
      <parameter id="2" datatype="MediaItem" parmname="it">
the MediaItem-object you want to delete
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     delete
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DestroyAudioAccessor</slug>
    <functioncall prog_lang="cpp">void DestroyAudioAccessor(AudioAccessor* accessor)</functioncall>
    <functioncall prog_lang="eel">DestroyAudioAccessor(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="lua">reaper.DestroyAudioAccessor(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="python">RPR_DestroyAudioAccessor(AudioAccessor accessor)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Destroy an audio accessor. Must only call from the main thread. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="AudioAccessor" parmname="accessor">
the AudioAccessor to be destroyed
      </parameter>
    </parameters>
    <tags>
     audiomanagement
     audio
     accessor
     destroy
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Dock_UpdateDockID</slug>
    <functioncall prog_lang="cpp">void Dock_UpdateDockID(const char* ident_str, int whichDock)</functioncall>
    <functioncall prog_lang="eel">Dock_UpdateDockID(&quot;ident_str&quot;, int whichDock)</functioncall>
    <functioncall prog_lang="lua">reaper.Dock_UpdateDockID(string ident_str, integer whichDock)</functioncall>
    <functioncall prog_lang="python">RPR_Dock_UpdateDockID(String ident_str, Int whichDock)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
updates preference for docker window ident_str to be in dock whichDock on next open
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="string" parmname="ident_str">

      </parameter>
      <parameter id="2" datatype="integer" parmname="whichDock">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DockIsChildOfDock</slug>
    <functioncall prog_lang="cpp">int DockIsChildOfDock(HWND hwnd, bool* isFloatingDockerOut)</functioncall>
    <functioncall prog_lang="eel">int DockIsChildOfDock(HWND hwnd, bool &amp;amp;isFloatingDocker)</functioncall>
    <functioncall prog_lang="lua">integer retval, boolean isFloatingDocker = reaper.DockIsChildOfDock(HWND hwnd)</functioncall>
    <functioncall prog_lang="python">(Int retval, HWND hwnd, Boolean isFloatingDockerOut) = RPR_DockIsChildOfDock(hwnd, isFloatingDockerOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns dock index that contains hwnd, or -1
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="boolean" retvalname="isFloatingDocker">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="HWND" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DockWindowActivate</slug>
    <functioncall prog_lang="cpp">void DockWindowActivate(HWND hwnd)</functioncall>
    <functioncall prog_lang="eel">DockWindowActivate(HWND hwnd)</functioncall>
    <functioncall prog_lang="lua">reaper.DockWindowActivate(HWND hwnd)</functioncall>
    <functioncall prog_lang="python">RPR_DockWindowActivate(HWND hwnd)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="HWND" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DockWindowAdd</slug>
    <functioncall prog_lang="cpp">void DockWindowAdd(HWND hwnd, const char* name, int pos, bool allowShow)</functioncall>
    <functioncall prog_lang="eel">DockWindowAdd(HWND hwnd, &quot;name&quot;, int pos, bool allowShow)</functioncall>
    <functioncall prog_lang="lua">reaper.DockWindowAdd(HWND hwnd, string name, integer pos, boolean allowShow)</functioncall>
    <functioncall prog_lang="python">RPR_DockWindowAdd(HWND hwnd, String name, Int pos, Boolean allowShow)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="HWND" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="string" parmname="name">

      </parameter>
      <parameter id="3" datatype="integer" parmname="pos">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="allowShow">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DockWindowAddEx</slug>
    <functioncall prog_lang="cpp">void DockWindowAddEx(HWND hwnd, const char* name, const char* identstr, bool allowShow)</functioncall>
    <functioncall prog_lang="eel">DockWindowAddEx(HWND hwnd, &quot;name&quot;, &quot;identstr&quot;, bool allowShow)</functioncall>
    <functioncall prog_lang="lua">reaper.DockWindowAddEx(HWND hwnd, string name, string identstr, boolean allowShow)</functioncall>
    <functioncall prog_lang="python">RPR_DockWindowAddEx(HWND hwnd, String name, String identstr, Boolean allowShow)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="HWND" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="string" parmname="name">

      </parameter>
      <parameter id="3" datatype="string" parmname="identstr">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="allowShow">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DockWindowRefresh</slug>
    <functioncall prog_lang="cpp">void DockWindowRefresh()</functioncall>
    <functioncall prog_lang="eel">DockWindowRefresh()</functioncall>
    <functioncall prog_lang="lua">reaper.DockWindowRefresh()</functioncall>
    <functioncall prog_lang="python">RPR_DockWindowRefresh()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Refreshes docked windows.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <tags>
     userinterface
     window
     refresh
     docking
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DockWindowRefreshForHWND</slug>
    <functioncall prog_lang="cpp">void DockWindowRefreshForHWND(HWND hwnd)</functioncall>
    <functioncall prog_lang="eel">DockWindowRefreshForHWND(HWND hwnd)</functioncall>
    <functioncall prog_lang="lua">reaper.DockWindowRefreshForHWND(HWND hwnd)</functioncall>
    <functioncall prog_lang="python">RPR_DockWindowRefreshForHWND(HWND hwnd)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="HWND" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DockWindowRemove</slug>
    <functioncall prog_lang="cpp">void DockWindowRemove(HWND hwnd)</functioncall>
    <functioncall prog_lang="eel">DockWindowRemove(HWND hwnd)</functioncall>
    <functioncall prog_lang="lua">reaper.DockWindowRemove(HWND hwnd)</functioncall>
    <functioncall prog_lang="python">RPR_DockWindowRemove(HWND hwnd)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="HWND" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EditTempoTimeSigMarker</slug>
    <functioncall prog_lang="cpp">bool EditTempoTimeSigMarker(ReaProject* project, int markerindex)</functioncall>
    <functioncall prog_lang="eel">bool EditTempoTimeSigMarker(ReaProject project, int markerindex)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.EditTempoTimeSigMarker(ReaProject project, integer markerindex)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_EditTempoTimeSigMarker(ReaProject project, Int markerindex)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Open the tempo/time signature marker editor dialog.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if user clicked OK button; false if user clicked cancel
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="markerindex">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnsureNotCompletelyOffscreen</slug>
    <functioncall prog_lang="cpp">void EnsureNotCompletelyOffscreen(RECT* rInOut)</functioncall>
    <functioncall prog_lang="eel">EnsureNotCompletelyOffscreen(int &amp;amp;r.left, int &amp;amp;r.top, int &amp;amp;r.right, int &amp;amp;r.bot)</functioncall>
    <functioncall prog_lang="lua">integer r.left, integer r.top, integer r.right, integer r.bot = reaper.EnsureNotCompletelyOffscreen(integer r.left, integer r.top, integer r.right, integer r.bot)</functioncall>
    <functioncall prog_lang="python">RPR_EnsureNotCompletelyOffscreen(RECT rInOut)</functioncall>
    <requires>
      Reaper=5.978
      Lua=5.3
    </requires>
    <description>
call with a saved window rect for your window and it'll correct any positioning info.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="r.left">

      </retval>
      <retval id="2" datatype="integer" retvalname="r.top">

      </retval>
      <retval id="3" datatype="integer" retvalname="r.right">

      </retval>
      <retval id="4" datatype="integer" retvalname="r.bot">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="r.left">

      </parameter>
      <parameter id="2" datatype="integer" parmname="r.top">

      </parameter>
      <parameter id="3" datatype="integer" parmname="r.right">

      </parameter>
      <parameter id="4" datatype="integer" parmname="r.bot">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumerateFiles</slug>
    <functioncall prog_lang="cpp">const char* EnumerateFiles(const char* path, int fileindex)</functioncall>
    <functioncall prog_lang="eel">bool EnumerateFiles(#retval, &quot;path&quot;, int fileindex)</functioncall>
    <functioncall prog_lang="lua">string = reaper.EnumerateFiles(string path, integer fileindex)</functioncall>
    <functioncall prog_lang="python">String RPR_EnumerateFiles(String path, Int fileindex)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>List the files in the “path” directory. Returns NULL (or empty string, in Lua) when all files have been listed. See <a href="#EnumerateSubdirectories">EnumerateSubdirectories</a></p>

    </description>
    <chapter_context>
      File Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the filename in path, with index fileindex
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="path">
the path, where the filenames will be read from
      </parameter>
      <parameter id="2" datatype="integer" parmname="fileindex">
the number of the file, with 0 the first file. Ordered by first letter in ascending order.
      </parameter>
    </parameters>
    <tags>
     filemanagement
     enumerate
     files
     path
     fileindex
     folder
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumerateSubdirectories</slug>
    <functioncall prog_lang="cpp">const char* EnumerateSubdirectories(const char* path, int subdirindex)</functioncall>
    <functioncall prog_lang="eel">bool EnumerateSubdirectories(#retval, &quot;path&quot;, int subdirindex)</functioncall>
    <functioncall prog_lang="lua">string = reaper.EnumerateSubdirectories(string path, integer subdirindex)</functioncall>
    <functioncall prog_lang="python">String RPR_EnumerateSubdirectories(String path, Int subdirindex)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>List the subdirectories in the “path” directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See <a href="#EnumerateFiles">EnumerateFiles</a></p>

    </description>
    <chapter_context>
      File Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the filename in path, with index fileindex
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="path">
the path, where the directorynames will be read from
      </parameter>
      <parameter id="2" datatype="integer" parmname="subdirindex">
the number of the directory, with 0 the first directory. Ordered by first letter in ascending order.
      </parameter>
    </parameters>
    <tags>
     filemanagement
     enumerate
     directory
     folder
     path
     directoryindex
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumPitchShiftModes</slug>
    <functioncall prog_lang="cpp">bool EnumPitchShiftModes(int mode, const char** strOut)</functioncall>
    <functioncall prog_lang="eel">bool EnumPitchShiftModes(int mode, #str)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.EnumPitchShiftModes(integer mode)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_EnumPitchShiftModes(Int mode, String strOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported
    </description>
    <chapter_context>
      Pitchshifting
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="str">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumPitchShiftSubModes</slug>
    <functioncall prog_lang="cpp">const char* EnumPitchShiftSubModes(int mode, int submode)</functioncall>
    <functioncall prog_lang="eel">bool EnumPitchShiftSubModes(#retval, int mode, int submode)</functioncall>
    <functioncall prog_lang="lua">string = reaper.EnumPitchShiftSubModes(integer mode, integer submode)</functioncall>
    <functioncall prog_lang="python">String RPR_EnumPitchShiftSubModes(Int mode, Int submode)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns submode name, or NULL
    </description>
    <chapter_context>
      Pitchshifting
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="mode">

      </parameter>
      <parameter id="2" datatype="integer" parmname="submode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumProjectMarkers</slug>
    <functioncall prog_lang="cpp">int EnumProjectMarkers(int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</functioncall>
    <functioncall prog_lang="eel">int EnumProjectMarkers(int idx, bool &amp;amp;isrgn, &amp;amp;pos, &amp;amp;rgnend, #name, int &amp;amp;markrgnindexnumber)</functioncall>
    <functioncall prog_lang="lua">integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers(integer idx)</functioncall>
    <functioncall prog_lang="python">(Int retval, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers(idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the values of a given marker or region idx.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
number of marker beginning with 1 for the first marker<br/>
ignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, <br/>
it will be the last one, NOT the first one in the retval!
      </retval>
      <retval id="2" datatype="boolean" retvalname="isgrn">
is the marker a region?
      </retval>
      <retval id="3" datatype="number" retvalname="pos">
the time-position in seconds with 12 digits precision (1.123456789012)
      </retval>
      <retval id="4" datatype="number" retvalname="rgnend">
if it's a region, the position of the end of the region in seconds with 12 digits precision(123.123456789012); <br/>
if it's just a marker it's 0.0
      </retval>
      <retval id="5" datatype="string" retvalname="name">
name of the marker
      </retval>
      <retval id="6" datatype="integer" retvalname="markrgnindexnumber">
marker/region index number. <br/>
Note: the numbering of markers and regions is independent. If you have one region and one marker, <br/>
both share the number 1, even though you have 2 in your project(one marker and one region).
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="idx">
the number of the marker, beginning with 0 for the first marker
      </parameter>
    </parameters>
    <tags>
     markermanagement
     enum
     project
     markers
     region
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumProjectMarkers2</slug>
    <functioncall prog_lang="cpp">int EnumProjectMarkers2(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</functioncall>
    <functioncall prog_lang="eel">int EnumProjectMarkers2(ReaProject proj, int idx, bool &amp;amp;isrgn, &amp;amp;pos, &amp;amp;rgnend, #name, int &amp;amp;markrgnindexnumber)</functioncall>
    <functioncall prog_lang="lua">integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers2(ReaProject proj, integer idx)</functioncall>
    <functioncall prog_lang="python">(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers2(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the values of a given marker or region idx from a given project proj.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
number of marker beginning with 1 for the first marker<br/>
ignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. <br/>
So if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, it will be the last one, NOT the first one in the retval!
      </retval>
      <retval id="2" datatype="boolean" retvalname="isgrn">
is the marker a region?
      </retval>
      <retval id="3" datatype="number" retvalname="pos">
the time-position in seconds with 12 digits precision (1.123456789012)
      </retval>
      <retval id="4" datatype="number" retvalname="rgnend">
if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0
      </retval>
      <retval id="5" datatype="string" retvalname="name">
name of the marker
      </retval>
      <retval id="6" datatype="integer" retvalname="markrgnindexnumber">
marker/region index number. <br/>
Note: the numbering of markers and regions is independent. If you have one region and one marker, <br/>
both share the number 1, even though you have 2 in your project(one marker and one region).
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>Projectnumber. 0, current project; 1 to x the first(1) to the last project(x) (in tabs for example); can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="idx">
<p>the number of the marker, beginning with 0 for the first marker</p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     enum
     project
     markers
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumProjectMarkers3</slug>
    <functioncall prog_lang="cpp">int EnumProjectMarkers3(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut, int* colorOut)</functioncall>
    <functioncall prog_lang="eel">int EnumProjectMarkers3(ReaProject proj, int idx, bool &amp;amp;isrgn, &amp;amp;pos, &amp;amp;rgnend, #name, int &amp;amp;markrgnindexnumber, int &amp;amp;color)</functioncall>
    <functioncall prog_lang="lua">integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber, integer color = reaper.EnumProjectMarkers3(ReaProject proj, integer idx)</functioncall>
    <functioncall prog_lang="python">(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut, Int colorOut) = RPR_EnumProjectMarkers3(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut, colorOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the values of a given marker or region idx from a given project proj.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
number of marker beginning with 1 for the first marker; <br/>
ignore the order of first,second,etc creation of markers but counts from <br/>
position 00:00:00 to end of project. <br/>
So if you created a marker at position 00:00:00 and move the first created marker <br/>
to the end of the timeline, it will be the last one, NOT the first one in the retval!
      </retval>
      <retval id="2" datatype="boolean" retvalname="isgrn">
is the marker a region?
      </retval>
      <retval id="3" datatype="number" retvalname="pos">
the time-position in seconds with 12 digits precision (1.123456789012)
      </retval>
      <retval id="4" datatype="number" retvalname="rgnend">
if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0
      </retval>
      <retval id="5" datatype="string" retvalname="name">
name of the marker
      </retval>
      <retval id="6" datatype="integer" retvalname="markrgnindexnumber">
marker/region index number. <br/>
Note: the numbering of markers and regions is independent. If you have one region and one marker, <br/>
both share the number 1, even though you have 2 in your project(one marker and one region).
      </retval>
      <retval id="7" datatype="integer" retvalname="color">
number of color of the marker/region
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>Projectnumber. 0, current project; 1 to x the first(1) to the last project(x) (in tabs for example); can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="idx">
<p>the number of the marker, beginning with 0 for the first marker</p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     enum
     project
     markers
     project
     color
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumProjects</slug>
    <functioncall prog_lang="cpp">ReaProject* EnumProjects(int idx, char* projfnOutOptional, int projfnOutOptional_sz)</functioncall>
    <functioncall prog_lang="eel">ReaProject EnumProjects(int idx, optional #projfn)</functioncall>
    <functioncall prog_lang="lua">ReaProject retval, optional string projfn = reaper.EnumProjects(integer idx)</functioncall>
    <functioncall prog_lang="python">(ReaProject retval, Int idx, String projfnOutOptional, Int projfnOutOptional_sz) = RPR_EnumProjects(idx, projfnOutOptional, projfnOutOptional_sz)</functioncall>
    <requires>
      Reaper=5.982
      Lua=5.3
    </requires>
    <description>
<p>Get ReaProject-object and filename of a project. idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.</p>
<p>If you need the path to the recording-folder, use <a href="#GetProjectPath">GetProjectPath</a> instead.</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="ReaProject" retvalname="retval">
a ReaProject-object of the project you requested
      </retval>
      <retval id="2" datatype="optional string" retvalname="projfn">
the path+filename.rpp of the project. returns nil if no filename exists
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="idx">
-1 for current project; 0 and higher for the projects; 0x40000000 for currently rendering project, if any.
      </parameter>
    </parameters>
    <tags>
     projectmanagement
     enumerate
     projects
     filename
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumProjExtState</slug>
    <functioncall prog_lang="cpp">bool EnumProjExtState(ReaProject* proj, const char* extname, int idx, char* keyOutOptional, int keyOutOptional_sz, char* valOutOptional, int valOutOptional_sz)</functioncall>
    <functioncall prog_lang="eel">bool EnumProjExtState(ReaProject proj, &quot;extname&quot;, int idx, optional #key, optional #val)</functioncall>
    <functioncall prog_lang="lua">boolean retval, optional string key, optional string val = reaper.EnumProjExtState(ReaProject proj, string extname, integer idx)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, ReaProject proj, String extname, Int idx, String keyOutOptional, Int keyOutOptional_sz, String valOutOptional, Int valOutOptional_sz) = RPR_EnumProjExtState(proj, extname, idx, keyOutOptional, keyOutOptional_sz, valOutOptional, valOutOptional_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See <a href="#SetProjExtState">SetProjExtState</a>, <a href="#GetProjExtState">GetProjExtState</a>.</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, key and value to this section exist; false, no such key and value exists
      </retval>
      <retval id="2" datatype="string" retvalname="key">
the idx'th key in the section
      </retval>
      <retval id="3" datatype="string" retvalname="val">
the accompanying value to key
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)
      </parameter>
      <parameter id="2" datatype="string" parmname="extname">
the section of the extended-states
      </parameter>
      <parameter id="3" datatype="integer" parmname="idx">
the id of the entry within &quot;extname&quot;-section to be returned; 0 for the first, 1 for the second, etc.
      </parameter>
    </parameters>
    <tags>
     projectmanagement
     extended
     state
     section
     extname
     value
     key
     enumerate
     enum
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumRegionRenderMatrix</slug>
    <functioncall prog_lang="cpp">MediaTrack* EnumRegionRenderMatrix(ReaProject* proj, int regionindex, int rendertrack)</functioncall>
    <functioncall prog_lang="eel">MediaTrack EnumRegionRenderMatrix(ReaProject proj, int regionindex, int rendertrack)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.EnumRegionRenderMatrix(ReaProject proj, integer regionindex, integer rendertrack)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_EnumRegionRenderMatrix(ReaProject proj, Int regionindex, Int rendertrack)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="regionindex">


      </parameter>
      <parameter id="3" datatype="integer" parmname="rendertrack">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumTrackMIDIProgramNames</slug>
    <functioncall prog_lang="cpp">bool EnumTrackMIDIProgramNames(int track, int programNumber, char* programName, int programName_sz)</functioncall>
    <functioncall prog_lang="eel">bool EnumTrackMIDIProgramNames(int track, int programNumber, #programName)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string programName = reaper.EnumTrackMIDIProgramNames(integer track, integer programNumber, string programName)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, Int track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNames(track, programNumber, programName, programName_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="programName">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="track">

      </parameter>
      <parameter id="2" datatype="string" parmname="programNumber">

      </parameter>
      <parameter id="3" datatype="string" parmname="programName">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>EnumTrackMIDIProgramNamesEx</slug>
    <functioncall prog_lang="cpp">bool EnumTrackMIDIProgramNamesEx(ReaProject* proj, MediaTrack* track, int programNumber, char* programName, int programName_sz)</functioncall>
    <functioncall prog_lang="eel">bool EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, int programNumber, #programName)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string programName = reaper.EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, integer programNumber, string programName)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, ReaProject proj, MediaTrack track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNamesEx(proj, track, programNumber, programName, programName_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="programName">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="MediaTrack" parmname="track">


      </parameter>
      <parameter id="3" datatype="integer" parmname="programNumber">


      </parameter>
      <parameter id="4" datatype="string" parmname="programName">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Envelope_Evaluate</slug>
    <functioncall prog_lang="cpp">int Envelope_Evaluate(TrackEnvelope* envelope, double time, double samplerate, int samplesRequested, double* valueOutOptional, double* dVdSOutOptional, double* ddVdSOutOptional, double* dddVdSOutOptional)</functioncall>
    <functioncall prog_lang="eel">int Envelope_Evaluate(TrackEnvelope envelope, time, samplerate, int samplesRequested, optional &amp;amp;value, optional &amp;amp;dVdS, optional &amp;amp;ddVdS, optional &amp;amp;dddVdS)</functioncall>
    <functioncall prog_lang="lua">integer retval, optional number value, optional number dVdS, optional number ddVdS, optional number dddVdS = reaper.Envelope_Evaluate(TrackEnvelope envelope, number time, number samplerate, integer samplesRequested)</functioncall>
    <functioncall prog_lang="python">(Int retval, TrackEnvelope envelope, Float time, Float samplerate, Int samplesRequested, Float valueOutOptional, Float dVdSOutOptional, Float ddVdSOutOptional, Float dddVdSOutOptional) = RPR_Envelope_Evaluate(envelope, time, samplerate, samplesRequested, valueOutOptional, dVdSOutOptional, ddVdSOutOptional, dddVdSOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. See <a href="#GetEnvelopeScalingMode">GetEnvelopeScalingMode</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="optional number" retvalname="value">

      </retval>
      <retval id="3" datatype="optional number" retvalname="dVdS">
the change in value per sample (first derivative)
      </retval>
      <retval id="4" datatype="optional number" retvalname="ddVdS">
the second derivative
      </retval>
      <retval id="5" datatype="optional number" retvalname="dddVdS">
is the third derivative
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="number" parmname="time">

      </parameter>
      <parameter id="3" datatype="number" parmname="samplerate">

      </parameter>
      <parameter id="4" datatype="integer" parmname="samplesRequested">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Envelope_FormatValue</slug>
    <functioncall prog_lang="cpp">void Envelope_FormatValue(TrackEnvelope* env, double value, char* bufOut, int bufOut_sz)</functioncall>
    <functioncall prog_lang="eel">Envelope_FormatValue(TrackEnvelope env, value, #buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.Envelope_FormatValue(TrackEnvelope env, number value)</functioncall>
    <functioncall prog_lang="python">(TrackEnvelope env, Float value, String bufOut, Int bufOut_sz) = RPR_Envelope_FormatValue(env, value, bufOut, bufOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Formats the value of an envelope to a user-readable form
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="env">

      </parameter>
      <parameter id="2" datatype="number" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Envelope_GetParentTake</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* Envelope_GetParentTake(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take Envelope_GetParentTake(TrackEnvelope env, optional int &amp;amp;index, optional int &amp;amp;index2)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take retval, optional number index, optional number index2 = reaper.Envelope_GetParentTake(TrackEnvelope env)</functioncall>
    <functioncall prog_lang="python">(MediaItem_Take retval, TrackEnvelope env, Int indexOutOptional, Int index2OutOptional) = RPR_Envelope_GetParentTake(env, indexOutOptional, index2OutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="retval">

      </retval>
      <retval id="2" datatype="optional number" retvalname="index">

      </retval>
      <retval id="3" datatype="optional number" retvalname="index2">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="env">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Envelope_GetParentTrack</slug>
    <functioncall prog_lang="cpp">MediaTrack* Envelope_GetParentTrack(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional)</functioncall>
    <functioncall prog_lang="eel">MediaTrack Envelope_GetParentTrack(TrackEnvelope env, optional int &amp;amp;index, optional int &amp;amp;index2)</functioncall>
    <functioncall prog_lang="lua">MediaTrack retval, optional number index, optional number index2 = reaper.Envelope_GetParentTrack(TrackEnvelope env)</functioncall>
    <functioncall prog_lang="python">(MediaTrack retval, TrackEnvelope env, Int indexOutOptional, Int index2OutOptional) = RPR_Envelope_GetParentTrack(env, indexOutOptional, index2OutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="retval">

      </retval>
      <retval id="2" datatype="optional number" retvalname="index">

      </retval>
      <retval id="3" datatype="optional number" retvalname="index2">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="env">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Envelope_SortPoints</slug>
    <functioncall prog_lang="cpp">bool Envelope_SortPoints(TrackEnvelope* envelope)</functioncall>
    <functioncall prog_lang="eel">bool Envelope_SortPoints(TrackEnvelope envelope)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.Envelope_SortPoints(TrackEnvelope envelope)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_Envelope_SortPoints(TrackEnvelope envelope)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Sort envelope points by time. See <a href="#SetEnvelopePoint">SetEnvelopePoint</a>, <a href="#InsertEnvelopePoint">InsertEnvelopePoint</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>Envelope_SortPointsEx</slug>
    <functioncall prog_lang="cpp">bool Envelope_SortPointsEx(TrackEnvelope* envelope, int autoitem_idx)</functioncall>
    <functioncall prog_lang="eel">bool Envelope_SortPointsEx(TrackEnvelope envelope, int autoitem_idx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.Envelope_SortPointsEx(TrackEnvelope envelope, integer autoitem_idx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_Envelope_SortPointsEx(TrackEnvelope envelope, Int autoitem_idx)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
<p>Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See <a href="#SetEnvelopePoint">SetEnvelopePoint</a>, <a href="#InsertEnvelopePoint">InsertEnvelopePoint</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="integer" parmname="autoitem_idx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ExecProcess</slug>
    <functioncall prog_lang="cpp">const char* ExecProcess(const char* cmdline, int timeoutmsec)</functioncall>
    <functioncall prog_lang="eel">bool ExecProcess(#retval, &quot;cmdline&quot;, int timeoutmsec)</functioncall>
    <functioncall prog_lang="lua">string = reaper.ExecProcess(string cmdline, integer timeoutmsec)</functioncall>
    <functioncall prog_lang="python">String RPR_ExecProcess(String cmdline, Int timeoutmsec)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command.             <br/>
        <br/>
Commands executed with ExecProcess() don't benefit from PATH-system-variables. That said, you must give the full path to a command, even if you can usually just type the command into a shell. You also may need to set a codepage manually to get the correct character-encoding. So in some cases, writing a batch-script and executing it with ExecProcess() might be a good idea.<br/>
<br/>
The base-directory is Reaper's appdirectory.<br/>
<br/>
On Windows, you can not use command-line-internal commands, like dir or cd, directly. To use them, you need to use cmd.exe. <br/>
You can do it like:<br/>
<br/>
-    &quot;$Path_to_Command_Exe\\cmd.exe /Q /C command&quot;<br/>
<br/>
where &quot;/Q&quot; executes cmd.exe silently(otherwise a command-line-window pops up; but output of commands will show anyway) and &quot;/C command&quot; executes command.<br/>
<br/>
To get a full directory-listing of c:\\ in a file c:\\directorylisting.txt, you can use:<br/>
-   &quot;c:\\windows\\system32\\cmd.exe /Q /C dir c:\\ &gt;c:\\directorylisting.txt&quot;
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
return value, newline and output of the command; otherwise nil
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="cmdline">
the command to execute 
      </parameter>
      <parameter id="2" datatype="integer" parmname="timeoutmsec">
how long to wait, until termination of execution<br/>
positive value, the time to wait for execution in milliseconds<br/>
   0, command will be allowed to run indefinitely (recommended for large amounts of returned output).<br/>
  -1, for no wait/terminate<br/>
  -2, for no wait and minimize
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     shell
     exec
     process
     command
     terminate
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>file_exists</slug>
    <functioncall prog_lang="cpp">bool file_exists(const char* path)</functioncall>
    <functioncall prog_lang="eel">bool file_exists(&quot;path&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.file_exists(string path)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_file_exists(String path)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Checks, if a specified file exists and is readable.<br/>
<br/>
returns true if path points to a valid, readable file
    </description>
    <chapter_context>
      File Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if file exists; false, if it doesn't
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="path">
filename with path
      </parameter>
    </parameters>
    <tags>
     filemanagement
     check
     file
     existing
     existence
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>FindTempoTimeSigMarker</slug>
    <functioncall prog_lang="cpp">int FindTempoTimeSigMarker(ReaProject* project, double time)</functioncall>
    <functioncall prog_lang="eel">int FindTempoTimeSigMarker(ReaProject project, time)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.FindTempoTimeSigMarker(ReaProject project, number time)</functioncall>
    <functioncall prog_lang="python">Int RPR_FindTempoTimeSigMarker(ReaProject project, Float time)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="number" parmname="time">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>format_timestr</slug>
    <functioncall prog_lang="cpp">void format_timestr(double tpos, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">format_timestr(tpos, #buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.format_timestr(number tpos, string buf)</functioncall>
    <functioncall prog_lang="python">(Float tpos, String buf, Int buf_sz) = RPR_format_timestr(tpos, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Creates a timestring and formats it as hh:mm:ss.sss. See <a href="#format_timestr_pos">format_timestr_pos</a>, <a href="#format_timestr_len">format_timestr_len</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">
the formatted timestring
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="number" parmname="tpos">
the position in seconds, that you want to have formatted
      </parameter>
      <parameter id="2" datatype="string" parmname="buf">
unknown
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     format
     timestring
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>format_timestr_len</slug>
    <functioncall prog_lang="cpp">void format_timestr_len(double tpos, char* buf, int buf_sz, double offset, int modeoverride)</functioncall>
    <functioncall prog_lang="eel">format_timestr_len(tpos, #buf, offset, int modeoverride)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.format_timestr_len(number tpos, string buf, number offset, integer modeoverride)</functioncall>
    <functioncall prog_lang="python">(Float tpos, String buf, Int buf_sz, Float offset, Int modeoverride) = RPR_format_timestr_len(tpos, buf, buf_sz, offset, modeoverride)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
time formatting mode overrides: -1=proj default.<br/>
0=time<br/>
1=measures.beats + time<br/>
2=measures.beats<br/>
3=seconds<br/>
4=samples<br/>
5=h:m:s:f<br/>
offset is start of where the length will be calculated from
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="number" parmname="tpos">

      </parameter>
      <parameter id="2" datatype="string" parmname="buf">

      </parameter>
      <parameter id="3" datatype="number" parmname="offset">

      </parameter>
      <parameter id="4" datatype="integer" parmname="modeoverride">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>format_timestr_pos</slug>
    <functioncall prog_lang="cpp">void format_timestr_pos(double tpos, char* buf, int buf_sz, int modeoverride)</functioncall>
    <functioncall prog_lang="eel">format_timestr_pos(tpos, #buf, int modeoverride)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.format_timestr_pos(number tpos, string buf, integer modeoverride)</functioncall>
    <functioncall prog_lang="python">(Float tpos, String buf, Int buf_sz, Int modeoverride) = RPR_format_timestr_pos(tpos, buf, buf_sz, modeoverride)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
time formatting mode overrides: -1=proj default.<br/>
    0=time<br/>
    1=measures.beats + time<br/>
    2=measures.beats<br/>
    3=seconds<br/>
    4=samples<br/>
    5=h:m:s:f
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="number" parmname="tpos">

      </parameter>
      <parameter id="2" datatype="string" parmname="buf">

      </parameter>
      <parameter id="3" datatype="integer" parmname="modeoverride">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>genGuid</slug>
    <functioncall prog_lang="cpp">void genGuid(GUID* g)</functioncall>
    <functioncall prog_lang="eel">genGuid(#gGUID)</functioncall>
    <functioncall prog_lang="lua">string gGUID = reaper.genGuid(string gGUID)</functioncall>
    <functioncall prog_lang="python">RPR_genGuid(GUID g)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Generates a GUID.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="gGUID">
the generated GUID
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="gGUID">
unknown
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     guid
     generate
     create
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>get_config_var_string</slug>
    <functioncall prog_lang="cpp">bool get_config_var_string(const char* name, char* bufOut, int bufOut_sz)</functioncall>
    <functioncall prog_lang="eel">bool get_config_var_string(&quot;name&quot;, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.get_config_var_string(string name)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, String name, String bufOut, Int bufOut_sz) = RPR_get_config_var_string(name, bufOut, bufOut_sz)</functioncall>
    <requires>
      Reaper=5.972
      Lua=5.3
    </requires>
    <description>
<p>gets ini configuration variable value as string</p>
<p>see the <a href="Reaper_Config_Variables.html">configuration-variable documentation</a> for more details</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, the configuration-variable is a valid string variable
      </retval>
      <retval id="2" datatype="string" retvalname="buf">
the current value of the configuration-variable
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="name">
the config-var, whose value you want
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     configuration variable
     configvar
     string
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>get_ini_file</slug>
    <functioncall prog_lang="cpp">const char* get_ini_file()</functioncall>
    <functioncall prog_lang="eel">bool get_ini_file(#retval)</functioncall>
    <functioncall prog_lang="lua">string = reaper.get_ini_file()</functioncall>
    <functioncall prog_lang="python">String RPR_get_ini_file()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get reaper.ini full filename+path.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the reaper.ini with path
      </retval>
    </retvals>
    <tags>
     helperfunctions
     reaper.ini
     get
     path
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetActiveTake</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* GetActiveTake(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take GetActiveTake(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take = reaper.GetActiveTake(MediaItem item)</functioncall>
    <functioncall prog_lang="python">MediaItem_Take RPR_GetActiveTake(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get the active take in this item
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="MediaItem_Take">
the active take of the MediaItem
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">
the MediaItem, whose active take you want to have returned
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     active
     take
     item
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetAllProjectPlayStates</slug>
    <functioncall prog_lang="cpp">int GetAllProjectPlayStates(ReaProject* ignoreProject)</functioncall>
    <functioncall prog_lang="eel">int GetAllProjectPlayStates(ReaProject ignoreProject)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetAllProjectPlayStates(ReaProject ignoreProject)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetAllProjectPlayStates(ReaProject ignoreProject)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns the bitwise OR of all project play states, eg. and project is playing/pausing/recording (1=playing, 2=pause, 4=recording)
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the bitwise play-state of alle projects<br/>
&amp;1, at least one project is playing<br/>
&amp;2, at least one project is paused<br/>
&amp;4, at least one project is recording
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="ignoreProject">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     get
     play
     pause
     recording
     state
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetAppVersion</slug>
    <functioncall prog_lang="cpp">const char* GetAppVersion()</functioncall>
    <functioncall prog_lang="eel">bool GetAppVersion(#retval)</functioncall>
    <functioncall prog_lang="lua">string = reaper.GetAppVersion()</functioncall>
    <functioncall prog_lang="python">String RPR_GetAppVersion()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the current version of Reaper, e.g &quot;5.62/x64&quot;
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the returned version-number of Reaper
      </retval>
    </retvals>
    <tags>
     helperfunctions
     reaper
     app
     version
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetAudioAccessorEndTime</slug>
    <functioncall prog_lang="cpp">double GetAudioAccessorEndTime(AudioAccessor* accessor)</functioncall>
    <functioncall prog_lang="eel">double GetAudioAccessorEndTime(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="lua">number = reaper.GetAudioAccessorEndTime(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetAudioAccessorEndTime(AudioAccessor accessor)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Get the end time of the audio that can be returned from this accessor. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the length of the AudioAccessor
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="AudioAccessor" parmname="accessor">
the AudioAccessor, whose end-time you want to have
      </parameter>
    </parameters>
    <tags>
     audiomanagement
     accessor
     end
     length
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetAudioAccessorHash</slug>
    <functioncall prog_lang="cpp">void GetAudioAccessorHash(AudioAccessor* accessor, char* hashNeed128)</functioncall>
    <functioncall prog_lang="eel">GetAudioAccessorHash(AudioAccessor accessor, #hashNeed128)</functioncall>
    <functioncall prog_lang="lua">string hashNeed128 = reaper.GetAudioAccessorHash(AudioAccessor accessor, string hashNeed128)</functioncall>
    <functioncall prog_lang="python">(AudioAccessor accessor, String hashNeed128) = RPR_GetAudioAccessorHash(accessor, hashNeed128)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Get a short hash string (128 chars or less) that will change only if the underlying samples change. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>
<p>Deprecated. See <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a> instead.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="hashNeed128">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="AudioAccessor" parmname="accessor">

      </parameter>
      <parameter id="2" datatype="string" parmname="hashNeed128">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetAudioAccessorSamples</slug>
    <functioncall prog_lang="cpp">int GetAudioAccessorSamples(AudioAccessor* accessor, int samplerate, int numchannels, double starttime_sec, int numsamplesperchannel, double* samplebuffer)</functioncall>
    <functioncall prog_lang="eel">int GetAudioAccessorSamples(AudioAccessor accessor, int samplerate, int numchannels, starttime_sec, int numsamplesperchannel, buffer_ptr samplebuffer)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetAudioAccessorSamples(AudioAccessor accessor, integer samplerate, integer numchannels, number starttime_sec, integer numsamplesperchannel, reaper.array samplebuffer)</functioncall>
    <functioncall prog_lang="python">(Int retval, AudioAccessor accessor, Int samplerate, Int numchannels, Float starttime_sec, Int numsamplesperchannel, Float samplebuffer) = RPR_GetAudioAccessorSamples(accessor, samplerate, numchannels, starttime_sec, numsamplesperchannel, samplebuffer)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel…). Returns 0 if no audio, 1 if audio, -1 on error. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>.</p>
<p>This function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:</p>
<pre><code>        tr = RPR\_GetTrack(0, 0)
        aa = RPR\_CreateTrackAudioAccessor(tr)
        buf = list([0]\*2\*1024) \# 2 channels, 1024 samples each, initialized to zero
        pos = 0.0
        (ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)
        \# buf now holds the first 2\*1024 audio samples from the track.
        \# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.</code></pre>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="AudioAccessor" parmname="accessor">

      </parameter>
      <parameter id="2" datatype="integer" parmname="samplerate">

      </parameter>
      <parameter id="3" datatype="integer" parmname="numchannels">

      </parameter>
      <parameter id="4" datatype="number" parmname="starttime_sec">

      </parameter>
      <parameter id="5" datatype="integer" parmname="numsamplesperchannel">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetAudioAccessorStartTime</slug>
    <functioncall prog_lang="cpp">double GetAudioAccessorStartTime(AudioAccessor* accessor)</functioncall>
    <functioncall prog_lang="eel">double GetAudioAccessorStartTime(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="lua">number = reaper.GetAudioAccessorStartTime(AudioAccessor accessor)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetAudioAccessorStartTime(AudioAccessor accessor)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Get the start time of the audio that can be returned from this accessor. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="AudioAccessor" parmname="accessor">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetAudioDeviceInfo</slug>
    <functioncall prog_lang="cpp">bool GetAudioDeviceInfo(const char* attribute, char* desc, int desc_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetAudioDeviceInfo(&quot;attribute&quot;, #desc)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string desc = reaper.GetAudioDeviceInfo(string attribute, string desc)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, String attribute, String desc, Int desc_sz) = RPR_GetAudioDeviceInfo(attribute, desc, desc_sz)</functioncall>
    <requires>
      Reaper=5.96
      Lua=5.3
    </requires>
    <description>
<p>get information about the currently open audio device. Attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS.</p>
<p>returns false if unknown attribute or device not open.</p>

    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, if returning a value is possible; false, if not(unknown attribute or device not open)
      </retval>
      <retval id="2" datatype="string" retvalname="desc">
the returned value; will not return a value, if Preferences are opened
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="attribute">
the attribute to get, as set in Preferences -&gt; Device<br/>
MODE - the Audio system selected <br/>
IDENT\_IN - the selected Input device<br/>
IDENT\_OUT - the selected Output device <br/>
BSIZE - the Buffer-sample-size (not the multiplier!)<br/>
SRATE - the samplerate in Hz<br/>
BPS - the sample-format (e.g 16, 24, 32 bit)
      </parameter>
      <parameter id="2" datatype="string" parmname="desc">
a string the API needs to return the value; in Lua set it to &quot;&quot;
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetConfigWantsDock</slug>
    <functioncall prog_lang="cpp">int GetConfigWantsDock(const char* ident_str)</functioncall>
    <functioncall prog_lang="eel">int GetConfigWantsDock(&quot;ident_str&quot;)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetConfigWantsDock(string ident_str)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetConfigWantsDock(String ident_str)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
gets the dock ID desired by ident_str, if any
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="ident_str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetCurrentProjectInLoadSave</slug>
    <functioncall prog_lang="cpp">ReaProject* GetCurrentProjectInLoadSave()</functioncall>
    <functioncall prog_lang="eel">ReaProject GetCurrentProjectInLoadSave()</functioncall>
    <functioncall prog_lang="lua">ReaProject = reaper.GetCurrentProjectInLoadSave()</functioncall>
    <functioncall prog_lang="python">ReaProject RPR_GetCurrentProjectInLoadSave()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns current project if in load/save (usually only used from project_config_extension_t)
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="ReaProject" retvalname="ReaProject">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetCursorContext</slug>
    <functioncall prog_lang="cpp">int GetCursorContext()</functioncall>
    <functioncall prog_lang="eel">int GetCursorContext()</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetCursorContext()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetCursorContext()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
return the current cursor context.
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the cursor context<br/>
  -1, unknown<br/>
   0, track panels<br/>
   1, items<br/>
   2, envelopes                
      </retval>
    </retvals>
    <tags>
     arrangeviewmanagement
     cursor
     context
     track
     item
     envelope
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetCursorContext2</slug>
    <functioncall prog_lang="cpp">int GetCursorContext2(bool want_last_valid)</functioncall>
    <functioncall prog_lang="eel">int GetCursorContext2(bool want_last_valid)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetCursorContext2(boolean want_last_valid)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetCursorContext2(Boolean want_last_valid)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the cursor context<br/>
  -1, unknown<br/>
   0, track panels<br/>
   1, items<br/>
   2, envelopes                
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="boolean" parmname="want_last_valid">
true, get the last valid context; false, get the current context
      </parameter>
    </parameters>
    <tags>
     arrangeviewmanagement
     cursor
     context
     track
     item
     envelope
     get
     valid
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetCursorPosition</slug>
    <functioncall prog_lang="cpp">double GetCursorPosition()</functioncall>
    <functioncall prog_lang="eel">double GetCursorPosition()</functioncall>
    <functioncall prog_lang="lua">number = reaper.GetCursorPosition()</functioncall>
    <functioncall prog_lang="python">Float RPR_GetCursorPosition()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
edit cursor position
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the editcursor-position in seconds
      </retval>
    </retvals>
    <tags>
     transportmanagement
     edit
     cursor
     get
     last
     position
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetCursorPositionEx</slug>
    <functioncall prog_lang="cpp">double GetCursorPositionEx(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">double GetCursorPositionEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">number = reaper.GetCursorPositionEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetCursorPositionEx(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the edit cursor position in a given project
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the position in seconds
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     edit
     cursor
     position
     get
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetDisplayedMediaItemColor</slug>
    <functioncall prog_lang="cpp">int GetDisplayedMediaItemColor(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">int GetDisplayedMediaItemColor(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetDisplayedMediaItemColor(MediaItem item)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetDisplayedMediaItemColor(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>see <a href="#GetDisplayedMediaItemColor2">GetDisplayedMediaItemColor2</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetDisplayedMediaItemColor2</slug>
    <functioncall prog_lang="cpp">int GetDisplayedMediaItemColor2(MediaItem* item, MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">int GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means &quot;no color&quot;, not black.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">

      </parameter>
      <parameter id="2" datatype="MediaItem_Take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetEnvelopeInfo_Value</slug>
    <functioncall prog_lang="cpp">double GetEnvelopeInfo_Value(TrackEnvelope* tr, const char* parmname)</functioncall>
    <functioncall prog_lang="eel">double GetEnvelopeInfo_Value(TrackEnvelope tr, &quot;parmname&quot;)</functioncall>
    <functioncall prog_lang="lua">number retval = reaper.GetEnvelopeInfo_Value(TrackEnvelope tr, string parmname)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetEnvelopeInfo_Value(TrackEnvelope tr, String parmname)</functioncall>
    <requires>
      Reaper=5.982
      Lua=5.3
    </requires>
    <description>
Gets an envelope numerical-value attribute:<br/>
    I_TCPY : int *, Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)<br/>
    I_TCPH : int *, visible height of envelope<br/>
    I_TCPY_USED : int *, Y offset of envelope relative to parent track, exclusive of padding<br/>
    I_TCPH_USED : int *, visible height of envelope, exclusive of padding<br/>
    P_TRACK : MediaTrack *, parent track pointer (if any)<br/>
    P_ITEM : MediaItem *, parent item pointer (if any)<br/>
    P_TAKE : MediaItem_Take *, parent take pointer (if any)
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">
the returned value of the attribute
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="tr">
the TrackEnvelope, of which you want to retrieve the attribute-value
      </parameter>
      <parameter id="2" datatype="string" parmname="parmname">
the attribute, whose value you want; <br/>
can be I_TCPY, I_TCPH, I_TCPY_USED, I_TCPH_USED, P_TRACK, P_ITEM, P_TAKE<br/>
see description for more details
      </parameter>
    </parameters>
    <tags>
     envelope management
     get
     attribute
     value
     height
     offset
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetEnvelopeName</slug>
    <functioncall prog_lang="cpp">bool GetEnvelopeName(TrackEnvelope* env, char* bufOut, int bufOut_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetEnvelopeName(TrackEnvelope env, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetEnvelopeName(TrackEnvelope env, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String bufOut, Int bufOut_sz) = RPR_GetEnvelopeName(env, bufOut, bufOut_sz)</functioncall>
    <requires>
      Reaper=5.974
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="env">

      </parameter>
      <parameter id="2" datatype="string" parmname="buf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetEnvelopePoint</slug>
    <functioncall prog_lang="cpp">bool GetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional)</functioncall>
    <functioncall prog_lang="eel">bool GetEnvelopePoint(TrackEnvelope envelope, int ptidx, optional &amp;amp;time, optional &amp;amp;value, optional int &amp;amp;shape, optional &amp;amp;tension, optional bool &amp;amp;selected)</functioncall>
    <functioncall prog_lang="lua">boolean retval, optional number time, optional number value, optional number shape, optional number tension, optional boolean selected = reaper.GetEnvelopePoint(TrackEnvelope envelope, integer ptidx)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeOutOptional, Float valueOutOptional, Int shapeOutOptional, Float tensionOutOptional, Boolean selectedOutOptional) = RPR_GetEnvelopePoint(envelope, ptidx, timeOutOptional, valueOutOptional, shapeOutOptional, tensionOutOptional, selectedOutOptional)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Get the attributes of an envelope point. See <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a></p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="optional number" retvalname="time">

      </retval>
      <retval id="3" datatype="optional number" retvalname="value">

      </retval>
      <retval id="4" datatype="optional number" retvalname="shape">

      </retval>
      <retval id="5" datatype="optional number" retvalname="tension">

      </retval>
      <retval id="6" datatype="optional boolean" retvalname="selected">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="integer" parmname="ptidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetEnvelopePointByTime</slug>
    <functioncall prog_lang="cpp">int GetEnvelopePointByTime(TrackEnvelope* envelope, double time)</functioncall>
    <functioncall prog_lang="eel">int GetEnvelopePointByTime(TrackEnvelope envelope, time)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetEnvelopePointByTime(TrackEnvelope envelope, number time)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetEnvelopePointByTime(TrackEnvelope envelope, Float time)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Returns the envelope point at or immediately prior to the given time position.</p>
<p>See <a href="#GetEnvelopePointByTimeEx">GetEnvelopePointByTimeEx</a></p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="number" parmname="time">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetEnvelopePointByTimeEx</slug>
    <functioncall prog_lang="cpp">int GetEnvelopePointByTimeEx(TrackEnvelope* envelope, int autoitem_idx, double time)</functioncall>
    <functioncall prog_lang="eel">int GetEnvelopePointByTimeEx(TrackEnvelope envelope, int autoitem_idx, time)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetEnvelopePointByTimeEx(TrackEnvelope envelope, integer autoitem_idx, number time)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetEnvelopePointByTimeEx(TrackEnvelope envelope, Int autoitem_idx, Float time)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Returns the envelope point at or immediately prior to the given time position. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration, even if the automation item is trimmed so that not all points are visible. Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.</p>
<p>See <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="integer" parmname="autoitem_idx">

      </parameter>
      <parameter id="3" datatype="number" parmname="time">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetEnvelopePointEx</slug>
    <functioncall prog_lang="cpp">bool GetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional)</functioncall>
    <functioncall prog_lang="eel">bool GetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, optional &amp;amp;time, optional &amp;amp;value, optional int &amp;amp;shape, optional &amp;amp;tension, optional bool &amp;amp;selected)</functioncall>
    <functioncall prog_lang="lua">boolean retval, optional number time, optional number value, optional number shape, optional number tension, optional boolean selected = reaper.GetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeOutOptional, Float valueOutOptional, Int shapeOutOptional, Float tensionOutOptional, Boolean selectedOutOptional) = RPR_GetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeOutOptional, valueOutOptional, shapeOutOptional, tensionOutOptional, selectedOutOptional)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Get the attributes of an envelope point. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration, even if the automation item is trimmed so that not all points are visible. Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.</p>
<p>See <a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="optional number" retvalname="time">

      </retval>
      <retval id="3" datatype="optional number" retvalname="value">

      </retval>
      <retval id="4" datatype="optional number" retvalname="shape">

      </retval>
      <retval id="5" datatype="optional number" retvalname="tension">

      </retval>
      <retval id="6" datatype="optional boolean" retvalname="selected">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="integer" parmname="autoitem_idx">

      </parameter>
      <parameter id="3" datatype="integer" parmname="ptidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetEnvelopeScalingMode</slug>
    <functioncall prog_lang="cpp">int GetEnvelopeScalingMode(TrackEnvelope* env)</functioncall>
    <functioncall prog_lang="eel">int GetEnvelopeScalingMode(TrackEnvelope env)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetEnvelopeScalingMode(TrackEnvelope env)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetEnvelopeScalingMode(TrackEnvelope env)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see <a href="#ScaleFromEnvelopeMode">ScaleFromEnvelopeMode</a>, <a href="#ScaleToEnvelopeMode">ScaleToEnvelopeMode</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="env">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetEnvelopeStateChunk</slug>
    <functioncall prog_lang="cpp">bool GetEnvelopeStateChunk(TrackEnvelope* env, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</functioncall>
    <functioncall prog_lang="eel">bool GetEnvelopeStateChunk(TrackEnvelope env, #str, bool isundo)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.GetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetEnvelopeStateChunk(env, strNeedBig, strNeedBig_sz, isundoOptional)</functioncall>
    <requires>
      Reaper=5.982
      Lua=5.3
    </requires>
    <description>
<p>Gets the RPPXML state of an envelope.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, if it's successful; false, if unsuccessful
      </retval>
      <retval id="2" datatype="string" retvalname="str">
the state-chunk
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="env">
the Track-Envelope-object, whose trackstate you want to have
      </parameter>
      <parameter id="2" datatype="string" parmname="str">
unknown
      </parameter>
      <parameter id="3" datatype="boolean" parmname="isundo">
Undo flag is a performance/caching hint.
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     get
     statechunk
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetExePath</slug>
    <functioncall prog_lang="cpp">const char* GetExePath()</functioncall>
    <functioncall prog_lang="eel">bool GetExePath(#retval)</functioncall>
    <functioncall prog_lang="lua">string = reaper.GetExePath()</functioncall>
    <functioncall prog_lang="python">String RPR_GetExePath()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the path to the reaper.exe or reaper.app
      </retval>
    </retvals>
    <tags>
     helperfunctions
     reaper
     get
     exe
     path
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>GetExtState</slug>
    <functioncall prog_lang="cpp">const char* GetExtState(const char* section, const char* key)</functioncall>
    <functioncall prog_lang="eel">bool GetExtState(#retval, &quot;section&quot;, &quot;key&quot;)</functioncall>
    <functioncall prog_lang="lua">string = reaper.GetExtState(string section, string key)</functioncall>
    <functioncall prog_lang="python">String RPR_GetExtState(String section, String key)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the extended state value for a specific section and key. See <a href="#SetExtState">SetExtState</a>, <a href="#DeleteExtState">DeleteExtState</a>, <a href="#HasExtState">HasExtState</a>.</p>

    </description>
    <chapter_context>
      Extended States
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the value
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="section">
the section, in which the key and value is stored 
      </parameter>
      <parameter id="2" datatype="string" parmname="key">
the key, that contains the value
      </parameter>
    </parameters>
    <tags>
     extendedstates
     state
     value
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetFocusedFX</slug>
    <functioncall prog_lang="cpp">int GetFocusedFX(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)</functioncall>
    <functioncall prog_lang="eel">int GetFocusedFX(int &amp;amp;tracknumber, int &amp;amp;itemnumber, int &amp;amp;fxnumber)</functioncall>
    <functioncall prog_lang="lua">integer retval, integer tracknumber, integer itemnumber, integer fxnumber = reaper.GetFocusedFX()</functioncall>
    <functioncall prog_lang="python">(Int retval, Int tracknumberOut, Int itemnumberOut, Int fxnumberOut) = RPR_GetFocusedFX(tracknumberOut, itemnumberOut, fxnumberOut)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Get focused FX.</p>
<p>See <a href="#GetLastTouchedFX">GetLastTouchedFX</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
0, if no FX window has focus<br/>
1, if a track FX window has focus or was the last focused and still open<br/>
2, if an item FX window has focus or was the last focused and still open
      </retval>
      <retval id="2" datatype="integer" retvalname="tracknumber">
tracknumber; 0, master track; 1, track 1; etc. 
      </retval>
      <retval id="3" datatype="integer" retvalname="itemnumber">
-1, if it's a track-fx; 0 and higher, the mediaitem-number
      </retval>
      <retval id="4" datatype="integer" retvalname="fxnumber">
If item FX, fxnumber will have the high word be the take index, the low word the FX index
      </retval>
    </retvals>
    <tags>
     fxmanagement
     get
     focused
     fx
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetFreeDiskSpaceForRecordPath</slug>
    <functioncall prog_lang="cpp">int GetFreeDiskSpaceForRecordPath(ReaProject* proj, int pathidx)</functioncall>
    <functioncall prog_lang="eel">int GetFreeDiskSpaceForRecordPath(ReaProject proj, int pathidx)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetFreeDiskSpaceForRecordPath(ReaProject proj, integer pathidx)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetFreeDiskSpaceForRecordPath(ReaProject proj, Int pathidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the freedisk-size in megabytes
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="pathidx">
<p>recording path; 0, primary recording path; 1, secondary recording path</p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     free disk space
     get
     primary recording path
     secondary recording path
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetFXEnvelope</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* GetFXEnvelope(MediaTrack* track, int fxindex, int parameterindex, bool create)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope GetFXEnvelope(MediaTrack track, int fxindex, int parameterindex, bool create)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.GetFXEnvelope(MediaTrack track, integer fxindex, integer parameterindex, boolean create)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope RPR_GetFXEnvelope(MediaTrack track, Int fxindex, Int parameterindex, Boolean create)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">

      </parameter>
      <parameter id="2" datatype="integer" parmname="fxindex">

      </parameter>
      <parameter id="3" datatype="integer" parmname="parameterindex">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="create">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetGlobalAutomationOverride</slug>
    <functioncall prog_lang="cpp">int GetGlobalAutomationOverride()</functioncall>
    <functioncall prog_lang="eel">int GetGlobalAutomationOverride()</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetGlobalAutomationOverride()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetGlobalAutomationOverride()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetHZoomLevel</slug>
    <functioncall prog_lang="cpp">double GetHZoomLevel()</functioncall>
    <functioncall prog_lang="eel">double GetHZoomLevel()</functioncall>
    <functioncall prog_lang="lua">number = reaper.GetHZoomLevel()</functioncall>
    <functioncall prog_lang="python">Float RPR_GetHZoomLevel()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns pixels/second
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
pixels/shown arrange-view-second
      </retval>
    </retvals>
    <tags>
     arrangeviewmanagement
     zoom
     horizontal
     get
     factor
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetInputChannelName</slug>
    <functioncall prog_lang="cpp">const char* GetInputChannelName(int channelIndex)</functioncall>
    <functioncall prog_lang="eel">bool GetInputChannelName(#retval, int channelIndex)</functioncall>
    <functioncall prog_lang="lua">string = reaper.GetInputChannelName(integer channelIndex)</functioncall>
    <functioncall prog_lang="python">String RPR_GetInputChannelName(Int channelIndex)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the name of a input-channel.
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the name of the input-channel.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="channelIndex">
the index of the input-channels, with 0 for the first, 1 for the second, etc.
      </parameter>
    </parameters>
    <tags>
     audio
     audiomanagement
     input
     channels
     name
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetInputOutputLatency</slug>
    <functioncall prog_lang="cpp">void GetInputOutputLatency(int* inputlatencyOut, int* outputLatencyOut)</functioncall>
    <functioncall prog_lang="eel">GetInputOutputLatency(int &amp;amp;inputlatency, int &amp;amp;outputLatency)</functioncall>
    <functioncall prog_lang="lua">number inputlatency retval, number outputLatency = reaper.GetInputOutputLatency()</functioncall>
    <functioncall prog_lang="python">(Int inputlatencyOut, Int outputLatencyOut) = RPR_GetInputOutputLatency(inputlatencyOut, outputLatencyOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets the audio device input/output latency in samples
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer inputlatency" retvalname="retval">
the input-latency
      </retval>
      <retval id="2" datatype="integer" retvalname="outputLatency">
the output-latency
      </retval>
    </retvals>
    <tags>
     audio
     device
     management
     input
     output
     latency
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetItemEditingTime2</slug>
    <functioncall prog_lang="cpp">double GetItemEditingTime2(PCM_source** which_itemOut, int* flagsOut)</functioncall>
    <functioncall prog_lang="eel">double GetItemEditingTime2(PCM_source &amp;amp;which_item, int &amp;amp;flags)</functioncall>
    <functioncall prog_lang="lua">number position, PCM_source which_item, number flags = reaper.GetItemEditingTime2()</functioncall>
    <functioncall prog_lang="python">(Float retval, PCM_source* which_itemOut, Int flagsOut) = RPR_GetItemEditingTime2(which_itemOut, flagsOut)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="position">

      </retval>
      <retval id="2" datatype="PCM_source" retvalname="which_item">

      </retval>
      <retval id="3" datatype="number" retvalname="flags">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetItemFromPoint</slug>
    <functioncall prog_lang="cpp">MediaItem* GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take** takeOutOptional)</functioncall>
    <functioncall prog_lang="eel">MediaItem GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take &amp;take)</functioncall>
    <functioncall prog_lang="lua">MediaItem, MediaItem_Take take = reaper.GetItemFromPoint(integer screen_x, integer screen_y, boolean allow_locked)</functioncall>
    <functioncall prog_lang="python">MediaItem RPR_GetItemFromPoint(Int screen_x, Int screen_y, Boolean allow_locked, MediaItem_Take* takeOutOptional)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="MediaItem">
the MediaItem at the position
      </retval>
      <retval id="2" datatype="MediaItem_Take" retvalname="take">
the MediaItem_Take at the position
      </retval>
    </retvals>
    <tags>
     mediaitem management
     get
     item
     mediaitem
     mediaitem take
     take
     at position
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetItemProjectContext</slug>
    <functioncall prog_lang="cpp">ReaProject* GetItemProjectContext(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">ReaProject GetItemProjectContext(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">ReaProject = reaper.GetItemProjectContext(MediaItem item)</functioncall>
    <functioncall prog_lang="python">ReaProject RPR_GetItemProjectContext(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the project, in which a MediaItem is located.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="ReaProject" retvalname="ReaProject">
the project, in which the MediaItem is located; returned as a reaper-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">
the MediaItem, whose project-location you want to know
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     project
     context
     item
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetItemStateChunk</slug>
    <functioncall prog_lang="cpp">bool GetItemStateChunk(MediaItem* item, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</functioncall>
    <functioncall prog_lang="eel">bool GetItemStateChunk(MediaItem item, #str, bool isundo)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.GetItemStateChunk(MediaItem item, string str, boolean isundo)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem item, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetItemStateChunk(item, strNeedBig, strNeedBig_sz, isundoOptional)</functioncall>
    <requires>
      Reaper=5.982
      Lua=5.3
    </requires>
    <description>
<p>Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, getting statechunk was successful
      </retval>
      <retval id="2" datatype="string" retvalname="str">
the statechunk of the MediaItem
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">
the MediaItem, whose statechunk you want
      </parameter>
      <parameter id="2" datatype="string" parmname="str">
unknown
      </parameter>
      <parameter id="3" datatype="boolean" parmname="isundo">
Undo flag is a performance/caching hint.
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     statechunk
     item
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetLastColorThemeFile</slug>
    <functioncall prog_lang="cpp">const char* GetLastColorThemeFile()</functioncall>
    <functioncall prog_lang="eel">bool GetLastColorThemeFile(#retval)</functioncall>
    <functioncall prog_lang="lua">string = reaper.GetLastColorThemeFile()</functioncall>
    <functioncall prog_lang="python">String RPR_GetLastColorThemeFile()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the last used color-theme-file.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the path and filename of the last used theme
      </retval>
    </retvals>
    <tags>
     userinterface
     get
     color
     theme
     file
     path
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetLastMarkerAndCurRegion</slug>
    <functioncall prog_lang="cpp">void GetLastMarkerAndCurRegion(ReaProject* proj, double time, int* markeridxOut, int* regionidxOut)</functioncall>
    <functioncall prog_lang="eel">GetLastMarkerAndCurRegion(ReaProject proj, time, int &amp;amp;markeridx, int &amp;amp;regionidx)</functioncall>
    <functioncall prog_lang="lua">integer markeridx retval, integer regionidx = reaper.GetLastMarkerAndCurRegion(ReaProject proj, number time)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, Float time, Int markeridxOut, Int regionidxOut) = RPR_GetLastMarkerAndCurRegion(proj, time, markeridxOut, regionidxOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See <a href="#EnumProjectMarkers">EnumProjectMarkers</a>.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer markeridx" retvalname="retval">
the last marker-number(not shown number!) before parameter time
      </retval>
      <retval id="2" datatype="integer" retvalname="regionidx">
the region, in which parameter time lies
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="number" parmname="time">
<p>the position to check in seconds</p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     get
     last
     current
     region
     marker
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetLastTouchedFX</slug>
    <functioncall prog_lang="cpp">bool GetLastTouchedFX(int* tracknumberOut, int* fxnumberOut, int* paramnumberOut)</functioncall>
    <functioncall prog_lang="eel">bool GetLastTouchedFX(int &amp;amp;tracknumber, int &amp;amp;fxnumber, int &amp;amp;paramnumber)</functioncall>
    <functioncall prog_lang="lua">boolean retval, integer tracknumber, integer fxnumber, integer paramnumber = reaper.GetLastTouchedFX()</functioncall>
    <functioncall prog_lang="python">(Boolean retval, Int tracknumberOut, Int fxnumberOut, Int paramnumberOut) = RPR_GetLastTouchedFX(tracknumberOut, fxnumberOut, paramnumberOut)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Returns the last touched track, it’s last touched parameter and tracknumber.</p>
<p>The low word of tracknumber is the 1-based track index – 0 means the master track, 1 means track 1, etc.</p>
<p>See <a href="#GetFocusedFX">GetFocusedFX</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, if last touched FX parameter is valid; false, if otherwise
      </retval>
      <retval id="2" datatype="integer" retvalname="tracknumber">
the tracknumber; 0 means the master track, 1 means track 1, etc.<br/>
If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc).                                 
      </retval>
      <retval id="3" datatype="integer" retvalname="fxnumber">
the id of the FX in the track tracknumber, zero-based<br/>
For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. <br/>
For item FX, the low word defines the FX index in the chain, and the high word defines the take number. 
      </retval>
      <retval id="4" datatype="integer" retvalname="paramnumber">
the id of the last parameter touched, zero-based
      </retval>
    </retvals>
    <tags>
     fxmanagement
     last
     touched
     get
     parameter
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetLastTouchedTrack</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetLastTouchedTrack()</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetLastTouchedTrack()</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.GetLastTouchedTrack()</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetLastTouchedTrack()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets the MediaTrack, that has been last touched.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">
the last touched MediaTrack as an object
      </retval>
    </retvals>
    <tags>
     trackmanagement
     get
     last
     touched
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMainHwnd</slug>
    <functioncall prog_lang="cpp">HWND GetMainHwnd()</functioncall>
    <functioncall prog_lang="eel">HWND GetMainHwnd()</functioncall>
    <functioncall prog_lang="lua">HWND hwnd = reaper.GetMainHwnd()</functioncall>
    <functioncall prog_lang="python">HWND RPR_GetMainHwnd()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the Reaper-window as an HWND-object
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HWND" retvalname="hwnd">
the Reaper-Window
      </retval>
    </retvals>
    <tags>
     userinterface
     get
     reaper
     window
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMasterMuteSoloFlags</slug>
    <functioncall prog_lang="cpp">int GetMasterMuteSoloFlags()</functioncall>
    <functioncall prog_lang="eel">int GetMasterMuteSoloFlags()</functioncall>
    <functioncall prog_lang="lua">integer mastermutesolo = reaper.GetMasterMuteSoloFlags()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetMasterMuteSoloFlags()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Deprecated: Get the mute/solo-state of the master-track. This is deprecated as you can just query the master track as well.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="mastermutesolo">
state of mute/solo of the master-track; &amp;amp;1=master mute,&amp;amp;2=master solo.
      </retval>
    </retvals>
    <tags>
     trackmanagement
     get
     master
     track
     mute
     solo
     flag
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMasterTrack</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetMasterTrack(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetMasterTrack(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">MediaTrack track = reaper.GetMasterTrack(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetMasterTrack(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get a MediaTrack-object of the MasterTrack.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="track">
the MediaTrack-object of the MasterTrack
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     master
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMasterTrackVisibility</slug>
    <functioncall prog_lang="cpp">int GetMasterTrackVisibility()</functioncall>
    <functioncall prog_lang="eel">int GetMasterTrackVisibility()</functioncall>
    <functioncall prog_lang="lua">integer master_visibility = reaper.GetMasterTrackVisibility()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetMasterTrackVisibility()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the visibility of the master-track in mixer and track-control-panel. See <a href="#SetMasterTrackVisibility">SetMasterTrackVisibility</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="master_visibility">
state of visibility of the master-track<br/>
&amp;1 - 1, master track visible in tcp; 0, master track invisible in mixer<br/>
&amp;2 - 2, master track invisible in mixer; 0, master track visible in mixer
      </retval>
    </retvals>
    <tags>
     trackmanagement
     get
     master
     visibility
     tcp
     mcp
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMaxMidiInputs</slug>
    <functioncall prog_lang="cpp">int GetMaxMidiInputs()</functioncall>
    <functioncall prog_lang="eel">int GetMaxMidiInputs()</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetMaxMidiInputs()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetMaxMidiInputs()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns max dev for midi inputs
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of max midi inputs
      </retval>
    </retvals>
    <tags>
     midimanagement
     device
     input
     get
     maximum
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMaxMidiOutputs</slug>
    <functioncall prog_lang="cpp">int GetMaxMidiOutputs()</functioncall>
    <functioncall prog_lang="eel">int GetMaxMidiOutputs()</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetMaxMidiOutputs()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetMaxMidiOutputs()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns max dev for midi outputs
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of max midi outputs
      </retval>
    </retvals>
    <tags>
     midimanagement
     device
     output
     get
     maximum
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItem</slug>
    <functioncall prog_lang="cpp">MediaItem* GetMediaItem(ReaProject* proj, int itemidx)</functioncall>
    <functioncall prog_lang="eel">MediaItem GetMediaItem(ReaProject proj, int itemidx)</functioncall>
    <functioncall prog_lang="lua">MediaItem = reaper.GetMediaItem(ReaProject proj, integer itemidx)</functioncall>
    <functioncall prog_lang="python">MediaItem RPR_GetMediaItem(ReaProject proj, Int itemidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get an item from a project by item count (zero-based)
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="MediaItem">
the requested MediaItem as a MediaItem-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="itemidx">
<p>the number of the item within the whole project; 0 for the first, 1 for the second, etc; numberingorder depending on, when was a MediaItem added to the project(recording, import, etc)</p>

      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     item
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItem_Track</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetMediaItem_Track(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetMediaItem_Track(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">MediaTrack track = reaper.GetMediaItem_Track(MediaItem item)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetMediaItem_Track(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get parent track of media item
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="track">
the returned MediaTrack, in which the MediaItem lies
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">
the MediaItem, whose track you want to know
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     mediaitemmanagement
     get
     track
     mediaitem
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetArmedCommand</slug>
    <functioncall prog_lang="cpp">int GetArmedCommand(char* secOut, int secOut_sz)</functioncall>
    <functioncall prog_lang="eel">int GetArmedCommand(#sec)</functioncall>
    <functioncall prog_lang="lua">integer retval, string sec = reaper.GetArmedCommand()</functioncall>
    <functioncall prog_lang="python">(Int retval, String secOut, Int secOut_sz) = RPR_GetArmedCommand(secOut, secOut_sz)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="sec">

      </retval>
    </retvals>
    <tags>
     miscellaneous
     get
     armed
     command
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ArmCommand</slug>
    <functioncall prog_lang="cpp">void ArmCommand(int cmd, const char* sectionname)</functioncall>
    <functioncall prog_lang="eel">ArmCommand(int cmd, &quot;sectionname&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.ArmCommand(integer cmd, string sectionname)</functioncall>
    <functioncall prog_lang="python">RPR_ArmCommand(Int cmd, String sectionname)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
arms a command (or disarms if 0 passed) in section sectionname (empty string for main)
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="cmd">

      </parameter>
      <parameter id="2" datatype="string" parmname="sectionname">

      </parameter>
    </parameters>
    <tags>
     miscellaneous
     get
     armed
     command
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItemInfo_Value</slug>
    <functioncall prog_lang="cpp">double GetMediaItemInfo_Value(MediaItem* item, const char* parmname)</functioncall>
    <functioncall prog_lang="eel">double GetMediaItemInfo_Value(MediaItem item, &quot;parmname&quot;)</functioncall>
    <functioncall prog_lang="lua">number retval = reaper.GetMediaItemInfo_Value(MediaItem item, string parmname)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetMediaItemInfo_Value(MediaItem item, String parmname)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Get media item numerical-value attributes.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">
the value you requested
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">
the MediaItem, whose value you want to have
      </parameter>
      <parameter id="2" datatype="string" parmname="parmname">
the parametername, whose value you want to have:<br/>
 B_MUTE : bool * to muted state<br/>
 B_LOOPSRC : bool * to loop source<br/>
 B_ALLTAKESPLAY : bool * to all takes play<br/>
 B_UISEL : bool * to ui selected<br/>
 C_BEATATTACHMODE : char * to one char of beat attached mode, <br/>
                    -1=def, 0=time, 1=allbeats, 2=beatsosonly<br/>
 C_LOCK : char * to one char of lock flags (&amp;amp;1 is locked, currently)<br/>
 D_VOL : double * of item volume (volume bar)<br/>
 D_POSITION : double * of item position (seconds)<br/>
 D_LENGTH : double * of item length (seconds)<br/>
 D_SNAPOFFSET : double * of item snap offset (seconds)<br/>
 D_FADEINLEN : double * of item fade in length (manual, seconds)<br/>
 D_FADEOUTLEN : double * of item fade out length (manual, seconds)<br/>
 D_FADEINDIR : double * of item fade in curve [-1; 1]<br/>
 D_FADEOUTDIR : double * of item fade out curve [-1; 1]<br/>
 D_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)<br/>
 D_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)<br/>
 C_FADEINSHAPE : int * to fadein shape, 0=linear, ...<br/>
 C_FADEOUTSHAPE : int * to fadeout shape<br/>
 I_GROUPID : int * to group ID (0 = no group)<br/>
 I_LASTY : int * to last y position in track (readonly)<br/>
 I_LASTH : int * to last height in track (readonly)<br/>
 I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). <br/>
                         If you do not |0x100000, then it will not be used (though will store the color anyway).<br/>
 I_CURTAKE : int * to active take<br/>
 IP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)<br/>
 F_FREEMODE_Y : float * to free mode y position (0..1)<br/>
 F_FREEMODE_H : float * to free mode height (0..1)<br/>
 P_TRACK : MediaTrack * (read only)
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     parameter
     numerical values
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItemNumTakes</slug>
    <functioncall prog_lang="cpp">int GetMediaItemNumTakes(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">int GetMediaItemNumTakes(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">integer itemnumtakes = reaper.GetMediaItemNumTakes(MediaItem item)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetMediaItemNumTakes(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the number of takes in a MediaItem-object.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="itemnumtakes">
the number of takes within the MediaItem-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">
the MediaItem-object, whose number of takes you want to know.
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     take
     count
     number
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItemTake</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* GetMediaItemTake(MediaItem* item, int tk)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take GetMediaItemTake(MediaItem item, int tk)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take = reaper.GetMediaItemTake(MediaItem item, integer tk)</functioncall>
    <functioncall prog_lang="python">MediaItem_Take RPR_GetMediaItemTake(MediaItem item, Int tk)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get a take from a MediaItem as a MediaItem_Take-object.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="MediaItem_Take">
the returned take as a MediaItem_Take-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">
the MediaItem, whose take you want to request
      </parameter>
      <parameter id="2" datatype="integer" parmname="tk">
the id of the take, that you want to request
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     item
     take
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItemTake_Item</slug>
    <functioncall prog_lang="cpp">MediaItem* GetMediaItemTake_Item(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">MediaItem GetMediaItemTake_Item(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">MediaItem item = reaper.GetMediaItemTake_Item(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">MediaItem RPR_GetMediaItemTake_Item(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get parent item of media item take.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="item">
the MediaItem, in which the MediaItem_Take takes place.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">
the MediaItem_Take-object, whose accompanying MediaItem you want to request.
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     take
     get
     item
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItemTake_Peaks</slug>
    <functioncall prog_lang="cpp">int GetMediaItemTake_Peaks(MediaItem_Take* take, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</functioncall>
    <functioncall prog_lang="eel">int GetMediaItemTake_Peaks(MediaItem_Take take, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)</functioncall>
    <functioncall prog_lang="lua">integer peaks = reaper.GetMediaItemTake_Peaks(MediaItem_Take take, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)</functioncall>
    <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_GetMediaItemTake_Peaks(take, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="peaks">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
      <parameter id="2" datatype="number" parmname="peakrate">

      </parameter>
      <parameter id="3" datatype="number" parmname="starttime">

      </parameter>
      <parameter id="4" datatype="integer" parmname="numchannels">

      </parameter>
      <parameter id="5" datatype="integer" parmname="numsamplesperchannel">

      </parameter>
      <parameter id="6" datatype="integer" parmname="want_extra_type">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItemTake_Source</slug>
    <functioncall prog_lang="cpp">PCM_source* GetMediaItemTake_Source(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">PCM_source GetMediaItemTake_Source(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">PCM_source source = reaper.GetMediaItemTake_Source(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">PCM_source RPR_GetMediaItemTake_Source(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get media source of media item take
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_source" retvalname="source">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItemTake_Track</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetMediaItemTake_Track(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetMediaItemTake_Track(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">MediaTrack track = reaper.GetMediaItemTake_Track(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetMediaItemTake_Track(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get parent track of media item take
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="track">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItemTakeByGUID</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* GetMediaItemTakeByGUID(ReaProject* project, const GUID* guid)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take GetMediaItemTakeByGUID(ReaProject project, &quot;guidGUID&quot;)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take take = reaper.GetMediaItemTakeByGUID(ReaProject project, string guidGUID)</functioncall>
    <functioncall prog_lang="python">MediaItem_Take RPR_GetMediaItemTakeByGUID(ReaProject project, const GUID guid)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="MediaItem_Take">
take
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="string" parmname="guidGUID">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaItemTakeInfo_Value</slug>
    <functioncall prog_lang="cpp">double GetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname)</functioncall>
    <functioncall prog_lang="eel">double GetMediaItemTakeInfo_Value(MediaItem_Take take, &quot;parmname&quot;)</functioncall>
    <functioncall prog_lang="lua">number retval = reaper.GetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname)</functioncall>
    <requires>
      Reaper=5.976
      Lua=5.3
    </requires>
    <description>
Get media item take numerical-value attributes.<br/>
D_STARTOFFS : double *, start offset in take of item<br/>
D_VOL : double *, take volume (negative if take polarity is flipped)<br/>
D_PAN : double *, take pan<br/>
D_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)<br/>
D_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)<br/>
D_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)<br/>
B_PPITCH, bool *, preserve pitch when changing rate<br/>
I_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)<br/>
I_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter<br/>
I_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).<br/>
IP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)<br/>
P_TRACK : pointer to MediaTrack (read-only)<br/>
P_ITEM : pointer to MediaItem (read-only)<br/>
P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
      <parameter id="2" datatype="string" parmname="parmname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>GetMediaItemTrack</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetMediaItemTrack(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetMediaItemTrack(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.GetMediaItemTrack(MediaItem item)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetMediaItemTrack(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the associated MediaTrack of a MediaItem.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">
the MediaTrack, where the MediaItem is located in 
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="MediaItem">
the MediaItem, whose associated MediaTrack you want to have
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     item
     track
     associated
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaSourceFileName</slug>
    <functioncall prog_lang="cpp">void GetMediaSourceFileName(PCM_source* source, char* filenamebuf, int filenamebuf_sz)</functioncall>
    <functioncall prog_lang="eel">GetMediaSourceFileName(PCM_source source, #filenamebuf)</functioncall>
    <functioncall prog_lang="lua">string filenamebuf = reaper.GetMediaSourceFileName(PCM_source source, string filenamebuf)</functioncall>
    <functioncall prog_lang="python">(PCM_source source, String filenamebuf, Int filenamebuf_sz) = RPR_GetMediaSourceFileName(source, filenamebuf, filenamebuf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See <a href="#GetMediaSourceParent">GetMediaSourceParent</a>.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="filenamebuf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="source">

      </parameter>
      <parameter id="2" datatype="string" parmname="filenamebuf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaSourceLength</slug>
    <functioncall prog_lang="cpp">double GetMediaSourceLength(PCM_source* source, bool* lengthIsQNOut)</functioncall>
    <functioncall prog_lang="eel">double GetMediaSourceLength(PCM_source source, bool &amp;amp;lengthIsQN)</functioncall>
    <functioncall prog_lang="lua">number retval, boolean lengthIsQN = reaper.GetMediaSourceLength(PCM_source source)</functioncall>
    <functioncall prog_lang="python">(Float retval, PCM_source source, Boolean lengthIsQNOut) = RPR_GetMediaSourceLength(source, lengthIsQNOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">

      </retval>
      <retval id="2" datatype="boolean" retvalname="lengthIsQN">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="source">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaSourceNumChannels</slug>
    <functioncall prog_lang="cpp">int GetMediaSourceNumChannels(PCM_source* source)</functioncall>
    <functioncall prog_lang="eel">int GetMediaSourceNumChannels(PCM_source source)</functioncall>
    <functioncall prog_lang="lua">integer mediasourcenumchans = reaper.GetMediaSourceNumChannels(PCM_source source)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetMediaSourceNumChannels(PCM_source source)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the number of channels in the source media.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="mediasourcenumchans">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="source">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaSourceParent</slug>
    <functioncall prog_lang="cpp">PCM_source* GetMediaSourceParent(PCM_source* src)</functioncall>
    <functioncall prog_lang="eel">PCM_source GetMediaSourceParent(PCM_source src)</functioncall>
    <functioncall prog_lang="lua">PCM_source = reaper.GetMediaSourceParent(PCM_source src)</functioncall>
    <functioncall prog_lang="python">PCM_source RPR_GetMediaSourceParent(PCM_source src)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_source" retvalname="PCM_source">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="src">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaSourceSampleRate</slug>
    <functioncall prog_lang="cpp">int GetMediaSourceSampleRate(PCM_source* source)</functioncall>
    <functioncall prog_lang="eel">int GetMediaSourceSampleRate(PCM_source source)</functioncall>
    <functioncall prog_lang="lua">integer mediasourcesamplerate = reaper.GetMediaSourceSampleRate(PCM_source source)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetMediaSourceSampleRate(PCM_source source)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the sample rate. MIDI source media will return zero.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="mediasourcesamplerate">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="source">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaSourceType</slug>
    <functioncall prog_lang="cpp">void GetMediaSourceType(PCM_source* source, char* typebuf, int typebuf_sz)</functioncall>
    <functioncall prog_lang="eel">GetMediaSourceType(PCM_source source, #typebuf)</functioncall>
    <functioncall prog_lang="lua">string typebuf = reaper.GetMediaSourceType(PCM_source source, string typebuf)</functioncall>
    <functioncall prog_lang="python">(PCM_source source, String typebuf, Int typebuf_sz) = RPR_GetMediaSourceType(source, typebuf, typebuf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
copies the media source type (&quot;WAV&quot;, &quot;MIDI&quot;, etc) to typebuf
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="typebuf">
a string-buffer needed by the function, use &quot;&quot; in Lua
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="source">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMediaTrackInfo_Value</slug>
    <functioncall prog_lang="cpp">double GetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname)</functioncall>
    <functioncall prog_lang="eel">double GetMediaTrackInfo_Value(MediaTrack tr, &quot;parmname&quot;)</functioncall>
    <functioncall prog_lang="lua">number retval = reaper.GetMediaTrackInfo_Value(MediaTrack tr, string parmname)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetMediaTrackInfo_Value(MediaTrack tr, String parmname)</functioncall>
    <requires>
      Reaper=5.982
      Lua=5.3
    </requires>
    <description>
Get track numerical-value attributes.<br/>
B_MUTE : bool * : mute flag<br/>
B_PHASE : bool * : invert track phase<br/>
IP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)<br/>
I_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place<br/>
I_FXEN : int * : 0=fx bypassed, nonzero = fx active<br/>
I_RECARM : int * : 0=not record armed, 1=record armed<br/>
I_RECINPUT : int * : record input. &amp;lt;0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 6 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)<br/>
I_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace<br/>
I_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))<br/>
I_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)<br/>
I_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)<br/>
I_NCHAN : int * : number of track channels, must be 2-64, even<br/>
I_SELECTED : int * : track selected? 0 or 1<br/>
I_WNDH : int * : current TCP window height including envelopes (Read-only)<br/>
I_TCPH : int * : current TCP window height not including envelopes (Read-only)<br/>
I_TCPY : int * : current TCP window Y position relative to top of arrange view (Read-only)<br/>
I_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc<br/>
I_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children<br/>
I_MIDIHWOUT : int * : track midi hardware output index (&amp;gt;0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))<br/>
I_PERFFLAGS : int * : track perf flags (&amp;amp;1=no media buffering, &amp;amp;2=no anticipative FX)<br/>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).<br/>
I_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels<br/>
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)<br/>
D_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)<br/>
D_PAN : double * : trim pan of track (-1..1)<br/>
D_WIDTH : double * : width of track (-1..1)<br/>
D_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6<br/>
D_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6<br/>
I_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)<br/>
D_PANLAW : double * : pan law of track. &amp;gt;0 for project default, 1.0 for +0dB, etc<br/>
P_ENV:&amp;lt;envchunkname : read only, returns TrackEnvelope *. To get a specific TrackEnvelope, call with :&amp;lt;VOLENV, :&amp;lt;PANENV, etc appended to P_ENV.<br/>
B_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master<br/>
B_SHOWINTCP : bool * : show track panel in tcp -- do not use on master<br/>
B_MAINSEND : bool * : track sends audio to parent<br/>
C_MAINSEND_OFFS : char * : track send to parent channel offset<br/>
B_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)<br/>
C_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly<br/>
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)<br/>
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)<br/>
P_PARTRACK : MediaTrack * : parent track (read-only)<br/>
P_PROJECT : ReaProject * : parent project (read-only)
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="tr">

      </parameter>
      <parameter id="2" datatype="string" parmname="parmname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMIDIInputName</slug>
    <functioncall prog_lang="cpp">bool GetMIDIInputName(int dev, char* nameout, int nameout_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetMIDIInputName(int dev, #nameout)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string nameout = reaper.GetMIDIInputName(integer dev, string nameout)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIInputName(dev, nameout, nameout_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns true if device present
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="nameout">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="dev">

      </parameter>
      <parameter id="2" datatype="string" parmname="nameout">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMIDIOutputName</slug>
    <functioncall prog_lang="cpp">bool GetMIDIOutputName(int dev, char* nameout, int nameout_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetMIDIOutputName(int dev, #nameout)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string nameout = reaper.GetMIDIOutputName(integer dev, string nameout)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIOutputName(dev, nameout, nameout_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns true if device present
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="nameout">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="dev">

      </parameter>
      <parameter id="2" datatype="string" parmname="nameout">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMixerScroll</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetMixerScroll()</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetMixerScroll()</functioncall>
    <functioncall prog_lang="lua">MediaTrack leftmosttrack = reaper.GetMixerScroll()</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetMixerScroll()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the leftmost track visible in the mixer
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="leftmosttrack">
the leftmost track in the MCP
      </retval>
    </retvals>
    <tags>
     userinterface
     get
     visible
     leftmost
     mcp
     mixer
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMouseModifier</slug>
    <functioncall prog_lang="cpp">void GetMouseModifier(const char* context, int modifier_flag, char* action, int action_sz)</functioncall>
    <functioncall prog_lang="eel">GetMouseModifier(&quot;context&quot;, int modifier_flag, #action)</functioncall>
    <functioncall prog_lang="lua">string action = reaper.GetMouseModifier(string context, integer modifier_flag, string action)</functioncall>
    <functioncall prog_lang="python">(String context, Int modifier_flag, String action, Int action_sz) = RPR_GetMouseModifier(context, modifier_flag, action, action_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context. action will be filled in with the command ID number for a built-in mouse modifier or built-in REAPER command ID, or the custom action ID string. See <a href="#SetMouseModifier">SetMouseModifier</a> for more information.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="action">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="context">

      </parameter>
      <parameter id="2" datatype="integer" parmname="modifier_flag">

      </parameter>
      <parameter id="3" datatype="string" parmname="action">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetMousePosition</slug>
    <functioncall prog_lang="cpp">void GetMousePosition(int* xOut, int* yOut)</functioncall>
    <functioncall prog_lang="eel">GetMousePosition(int &amp;amp;x, int &amp;amp;y)</functioncall>
    <functioncall prog_lang="lua">integer x, integer y = reaper.GetMousePosition()</functioncall>
    <functioncall prog_lang="python">(Int xOut, Int yOut) = RPR_GetMousePosition(xOut, yOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get mouse position in screen coordinates
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="x">
horizontal position of the mouse in pixels
      </retval>
      <retval id="2" datatype="integer" retvalname="y">
vertical position of the mouse in pixels
      </retval>
    </retvals>
    <tags>
     userinterface
     mouse
     position
     vertical
     horizontal
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetNumAudioInputs</slug>
    <functioncall prog_lang="cpp">int GetNumAudioInputs()</functioncall>
    <functioncall prog_lang="eel">int GetNumAudioInputs()</functioncall>
    <functioncall prog_lang="lua">integer numAudioIns = reaper.GetNumAudioInputs()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetNumAudioInputs()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Return number of normal audio hardware inputs available
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="numAudioIns">
the number of audio hardware outputs available
      </retval>
    </retvals>
    <tags>
     audio
     count
     input
     hardware
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetNumAudioOutputs</slug>
    <functioncall prog_lang="cpp">int GetNumAudioOutputs()</functioncall>
    <functioncall prog_lang="eel">int GetNumAudioOutputs()</functioncall>
    <functioncall prog_lang="lua">integer numAudioOuts = reaper.GetNumAudioOutputs()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetNumAudioOutputs()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Return number of normal audio hardware outputs available
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="numAudioOuts">
the number of audio hardware outputs available
      </retval>
    </retvals>
    <tags>
     audio
     count
     output
     hardware
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetNumMIDIInputs</slug>
    <functioncall prog_lang="cpp">int GetNumMIDIInputs()</functioncall>
    <functioncall prog_lang="eel">int GetNumMIDIInputs()</functioncall>
    <functioncall prog_lang="lua">integer numMidiIns = reaper.GetNumMIDIInputs()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetNumMIDIInputs()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns max number of real midi hardware inputs
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="numMidiIns">

      </retval>
    </retvals>
    <tags>
     audio
     midi
     count
     input
     hardware
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetNumMIDIOutputs</slug>
    <functioncall prog_lang="cpp">int GetNumMIDIOutputs()</functioncall>
    <functioncall prog_lang="eel">int GetNumMIDIOutputs()</functioncall>
    <functioncall prog_lang="lua">integer numMidiOuts = reaper.GetNumMIDIOutputs()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetNumMIDIOutputs()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns max number of real midi hardware outputs
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="numMidiOuts">
the number of real midi hardware outputs
      </retval>
    </retvals>
    <tags>
     audio
     midi
     count
     output
     hardware
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetNumTracks</slug>
    <functioncall prog_lang="cpp">int GetNumTracks()</functioncall>
    <functioncall prog_lang="eel">int GetNumTracks()</functioncall>
    <functioncall prog_lang="lua">integer numtracks = reaper.GetNumTracks()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetNumTracks()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the number of tracks. Excluding the master-track.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="numtracks">
the number of tracks in the current project.
      </retval>
    </retvals>
    <tags>
     trackmanagement
     count
     tracks
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetOS</slug>
    <functioncall prog_lang="cpp">const char* GetOS()</functioncall>
    <functioncall prog_lang="eel">bool GetOS(#retval)</functioncall>
    <functioncall prog_lang="lua">string os = reaper.GetOS()</functioncall>
    <functioncall prog_lang="python">String RPR_GetOS()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the current operating-system. Good for determining, e.g. the correct filesystem-separators.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="os">
&quot;Win32&quot;, &quot;Win64&quot;, &quot;OSX32&quot;, &quot;OSX64&quot;, or &quot;Other&quot;
      </retval>
    </retvals>
    <tags>
     helperfunctions
     get
     operating system
     os
     osx
     windows
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetOutputChannelName</slug>
    <functioncall prog_lang="cpp">const char* GetOutputChannelName(int channelIndex)</functioncall>
    <functioncall prog_lang="eel">bool GetOutputChannelName(#retval, int channelIndex)</functioncall>
    <functioncall prog_lang="lua">string outputchanname= reaper.GetOutputChannelName(integer channelIndex)</functioncall>
    <functioncall prog_lang="python">String RPR_GetOutputChannelName(Int channelIndex)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the name of a specific output-channel.
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="outputchanname">
the name of the output-channel.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="channelIndex">
the index of the output-channel
      </parameter>
    </parameters>
    <tags>
     audio
     audiomanagement
     output
     channels
     name
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetOutputLatency</slug>
    <functioncall prog_lang="cpp">double GetOutputLatency()</functioncall>
    <functioncall prog_lang="eel">double GetOutputLatency()</functioncall>
    <functioncall prog_lang="lua">number outputlatency = reaper.GetOutputLatency()</functioncall>
    <functioncall prog_lang="python">Float RPR_GetOutputLatency()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns output latency in seconds
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="outputlatency">
output-latency in seconds
      </retval>
    </retvals>
    <tags>
     audiomanagement
     get
     output
     latency
     seconds
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetParentTrack</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetParentTrack(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetParentTrack(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">MediaTrack parenttrack = reaper.GetParentTrack(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetParentTrack(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the parent MediaTrack, if a MediaTrack is a track of a foldered track.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="parenttrack">
the returned parent MediaTrack of a foldered MediaTrack
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">
the MediaTrack in a folder, whose parent MediaTrack you want
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     parent
     track
     folder
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPeakFileName</slug>
    <functioncall prog_lang="cpp">void GetPeakFileName(const char* fn, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">GetPeakFileName(&quot;fn&quot;, #buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.GetPeakFileName(string fn, string buf)</functioncall>
    <functioncall prog_lang="python">(String fn, String buf, Int buf_sz) = RPR_GetPeakFileName(fn, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="fn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPeakFileNameEx</slug>
    <functioncall prog_lang="cpp">void GetPeakFileNameEx(const char* fn, char* buf, int buf_sz, bool forWrite)</functioncall>
    <functioncall prog_lang="eel">GetPeakFileNameEx(&quot;fn&quot;, #buf, bool forWrite)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.GetPeakFileNameEx(string fn, string buf, boolean forWrite)</functioncall>
    <functioncall prog_lang="python">(String fn, String buf, Int buf_sz, Boolean forWrite) = RPR_GetPeakFileNameEx(fn, buf, buf_sz, forWrite)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">
the peak-filename
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="fn">

      </parameter>
      <parameter id="2" datatype="string" parmname="buf">
a string-buffer needed by the function, just give &quot;&quot; in Lua
      </parameter>
      <parameter id="3" datatype="boolean" parmname="forWrite">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPeakFileNameEx2</slug>
    <functioncall prog_lang="cpp">void GetPeakFileNameEx2(const char* fn, char* buf, int buf_sz, bool forWrite, const char* peaksfileextension)</functioncall>
    <functioncall prog_lang="eel">GetPeakFileNameEx2(&quot;fn&quot;, #buf, bool forWrite, &quot;peaksfileextension&quot;)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.GetPeakFileNameEx2(string fn, string buf, boolean forWrite, string peaksfileextension)</functioncall>
    <functioncall prog_lang="python">(String fn, String buf, Int buf_sz, Boolean forWrite, String peaksfileextension) = RPR_GetPeakFileNameEx2(fn, buf, buf_sz, forWrite, peaksfileextension)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Like GetPeakFileNameEx, but you can specify peaksfileextension such as &quot;.reapeaks&quot;
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">
the peak-filename
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="fn">

      </parameter>
      <parameter id="2" datatype="string" parmname="buf">
a string-buffer needed by the function, just give &quot;&quot; in Lua
      </parameter>
      <parameter id="3" datatype="boolean" parmname="forWrite">

      </parameter>
      <parameter id="4" datatype="string" parmname="peaksfileextension">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPlayPosition</slug>
    <functioncall prog_lang="cpp">double GetPlayPosition()</functioncall>
    <functioncall prog_lang="eel">double GetPlayPosition()</functioncall>
    <functioncall prog_lang="lua">number playposition = reaper.GetPlayPosition()</functioncall>
    <functioncall prog_lang="python">Float RPR_GetPlayPosition()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns latency-compensated actual-what-you-hear position
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="playposition">
the playposition in seconds
      </retval>
    </retvals>
    <tags>
     transportmanagement
     get
     play
     position
     latency compensated
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPlayPosition2</slug>
    <functioncall prog_lang="cpp">double GetPlayPosition2()</functioncall>
    <functioncall prog_lang="eel">double GetPlayPosition2()</functioncall>
    <functioncall prog_lang="lua">number playposition = reaper.GetPlayPosition2()</functioncall>
    <functioncall prog_lang="python">Float RPR_GetPlayPosition2()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns position of next audio block being processed
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="playposition">
the playposition in seconds
      </retval>
    </retvals>
    <tags>
     transportmanagement
     get
     play
     position
     next audio block
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPlayPosition2Ex</slug>
    <functioncall prog_lang="cpp">double GetPlayPosition2Ex(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">double GetPlayPosition2Ex(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">number playposition = reaper.GetPlayPosition2Ex(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetPlayPosition2Ex(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns position of next audio block being processed from a specific project
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="playposition">
the playposition in seconds
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     get
     play
     position
     next audio block
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPlayPositionEx</slug>
    <functioncall prog_lang="cpp">double GetPlayPositionEx(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">double GetPlayPositionEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">number playposition = reaper.GetPlayPositionEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetPlayPositionEx(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns latency-compensated actual-what-you-hear position from a specific project
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="playposition">
the playposition in seconds
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     get
     play
     position
     latency compensated
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPlayState</slug>
    <functioncall prog_lang="cpp">int GetPlayState()</functioncall>
    <functioncall prog_lang="eel">int GetPlayState()</functioncall>
    <functioncall prog_lang="lua">integer playstate = reaper.GetPlayState()</functioncall>
    <functioncall prog_lang="python">Int RPR_GetPlayState()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns, in which play-state the current project is
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="playstate">
Either bitwise: &amp;amp;1=playing,&amp;amp;2=pause,&amp;amp;=4 is recording, or<br/>
0, stop<br/>
1, play<br/>
2, paused play<br/>
5, recording<br/>
6, paused recording
      </retval>
    </retvals>
    <tags>
     transportmanagement
     play
     state
     rec
     pause
     stop
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPlayStateEx</slug>
    <functioncall prog_lang="cpp">int GetPlayStateEx(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int GetPlayStateEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer playstate = reaper.GetPlayStateEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetPlayStateEx(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns, in which play-state a certain project is
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="playstate">
Either bitwise: &amp;amp;1=playing,&amp;amp;2=pause,&amp;amp;=4 is recording, or<br/>
0, stop<br/>
1, play<br/>
2, paused play<br/>
5, recording<br/>
6, paused recording
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     stop
     play
     state
     rec
     pause
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetProjectLength</slug>
    <functioncall prog_lang="cpp">double GetProjectLength(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">double GetProjectLength(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">number length = reaper.GetProjectLength(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetProjectLength(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns length of project (maximum of end of media item, markers, end of regions, tempo map)
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="length">
the length of the project in seconds
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     length
     get
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetProjectName</slug>
    <functioncall prog_lang="cpp">void GetProjectName(ReaProject* proj, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">GetProjectName(ReaProject proj, #buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.GetProjectName(ReaProject proj, string buf)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, String buf, Int buf_sz) = RPR_GetProjectName(proj, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the name of the projectfile.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">
a string-buffer needed by the function; just give &quot;&quot; in Lua
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     get
     project
     name
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetProjectPath</slug>
    <functioncall prog_lang="cpp">void GetProjectPath(char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">GetProjectPath(#buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.GetProjectPath(string buf)</functioncall>
    <functioncall prog_lang="python">(String buf, Int buf_sz) = RPR_GetProjectPath(buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the path of the project. Will return the defaults project-path’s recording-folder, when the project hasn’t been saved yet; when the project has been saved, it will return the path to the recording-folder.</p>
<p>If you need the filename of the path+projectfile itself, use <a href="#EnumProjects">EnumProjects</a> instead.</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">
the returned path
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="buf">
a string-buffer needed by the function, just give &quot;&quot; in Lua
      </parameter>
    </parameters>
    <tags>
     projectmanagement
     get
     path
     projectpath
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetProjectPathEx</slug>
    <functioncall prog_lang="cpp">void GetProjectPathEx(ReaProject* proj, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">GetProjectPathEx(ReaProject proj, #buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.GetProjectPathEx(ReaProject proj, string buf)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, String buf, Int buf_sz) = RPR_GetProjectPathEx(proj, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the path of a specific project, usually the recordings-folder.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">
a string-buffer needed by the function, just use &quot;&quot; in Lua
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     get
     path
     projectpath
     project
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>GetProjectStateChangeCount</slug>
    <functioncall prog_lang="cpp">int GetProjectStateChangeCount(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int GetProjectStateChangeCount(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetProjectStateChangeCount(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetProjectStateChangeCount(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns an integer that changes when the project state changes, e.g. undoable-actions have been made.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of changes, since (re-)opening of the project.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     get
     state
     changes
     undo
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetProjectTimeOffset</slug>
    <functioncall prog_lang="cpp">double GetProjectTimeOffset(ReaProject* proj, bool rndframe)</functioncall>
    <functioncall prog_lang="eel">double GetProjectTimeOffset(ReaProject proj, bool rndframe)</functioncall>
    <functioncall prog_lang="lua">number = reaper.GetProjectTimeOffset(ReaProject proj, boolean rndframe)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetProjectTimeOffset(ReaProject proj, Boolean rndframe)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets project time offset in seconds (project settings -&gt; project start time). 
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the project-time-offset
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="rndframe" parmname="rndframe">
<p>true, the offset is rounded to a multiple of the project frame size; false, no rounding happening</p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     get
     project
     time
     offset
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetProjectTimeSignature</slug>
    <functioncall prog_lang="cpp">void GetProjectTimeSignature(double* bpmOut, double* bpiOut)</functioncall>
    <functioncall prog_lang="eel">GetProjectTimeSignature(&amp;amp;bpm, &amp;amp;bpi)</functioncall>
    <functioncall prog_lang="lua">number bpm retval, number bpi = reaper.GetProjectTimeSignature()</functioncall>
    <functioncall prog_lang="python">(Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature(bpmOut, bpiOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
deprecated
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bpm" retvalname="retval">

      </retval>
      <retval id="2" datatype="bpi" retvalname="bpi">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetProjectTimeSignature2</slug>
    <functioncall prog_lang="cpp">void GetProjectTimeSignature2(ReaProject* proj, double* bpmOut, double* bpiOut)</functioncall>
    <functioncall prog_lang="eel">GetProjectTimeSignature2(ReaProject proj, &amp;amp;bpm, &amp;amp;bpi)</functioncall>
    <functioncall prog_lang="lua">number bpm retval, number bpi = reaper.GetProjectTimeSignature2(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature2(proj, bpmOut, bpiOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets basic time signature (beats per minute, numerator of time signature in bpi)<br/>
this does not reflect tempo envelopes but is purely what is set in the project settings.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bpm" retvalname="retval">

      </retval>
      <retval id="2" datatype="bpi" retvalname="bpi">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetProjExtState</slug>
    <functioncall prog_lang="cpp">int GetProjExtState(ReaProject* proj, const char* extname, const char* key, char* valOutNeedBig, int valOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">int GetProjExtState(ReaProject proj, &quot;extname&quot;, &quot;key&quot;, #val)</functioncall>
    <functioncall prog_lang="lua">integer retval, string val = reaper.GetProjExtState(ReaProject proj, string extname, string key)</functioncall>
    <functioncall prog_lang="python">(Int retval, ReaProject proj, String extname, String key, String valOutNeedBig, Int valOutNeedBig_sz) = RPR_GetProjExtState(proj, extname, key, valOutNeedBig, valOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the value previously associated with this extname and key, the last time the project was saved or the value was changed. See <a href="#SetProjExtState">SetProjExtState</a>, <a href="#EnumProjExtState">EnumProjExtState</a>.</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">
true, if such an extended-state exists; false, if not
      </retval>
      <retval id="2" datatype="val" retvalname="val">
the value, as stored in extname-&gt;key
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="extname" parmname="extname">
<p>the section, in which the key requested is stored</p>

      </parameter>
      <parameter id="3" datatype="key" parmname="key">
<p>the key, in which the requested value is stored</p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     extended
     state
     value
     section
     key
     extname
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetResourcePath</slug>
    <functioncall prog_lang="cpp">const char* GetResourcePath()</functioncall>
    <functioncall prog_lang="eel">bool GetResourcePath(#retval)</functioncall>
    <functioncall prog_lang="lua">string = reaper.GetResourcePath()</functioncall>
    <functioncall prog_lang="python">String RPR_GetResourcePath()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns path where ini files are stored, other things are in subdirectories.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the path to the resource-folder
      </retval>
    </retvals>
    <tags>
     helperfunctions
     get
     resource
     path
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSelectedEnvelope</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* GetSelectedEnvelope(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope GetSelectedEnvelope(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.GetSelectedEnvelope(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope RPR_GetSelectedEnvelope(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get the currently selected envelope, returns 0 if no envelope is selected
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">
the TrackEnvelope-object of the selected envelope-lane requested; 0, if no envelope is selected
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     get
     selected
     envelope
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSelectedMediaItem</slug>
    <functioncall prog_lang="cpp">MediaItem* GetSelectedMediaItem(ReaProject* proj, int selitem)</functioncall>
    <functioncall prog_lang="eel">MediaItem GetSelectedMediaItem(ReaProject proj, int selitem)</functioncall>
    <functioncall prog_lang="lua">MediaItem = reaper.GetSelectedMediaItem(ReaProject proj, integer selitem)</functioncall>
    <functioncall prog_lang="python">MediaItem RPR_GetSelectedMediaItem(ReaProject proj, Int selitem)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>get a selected item by selected item count (zero-based) See <a href="#CountSelectedMediaItems">CountSelectedMediaItems</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="MediaItem">
the requested MediaItem as a MediaItem-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="selitem" parmname="selitem">
<p>the id of the selected MediaItem, as multiple items can be selected. See <a href="#CountSelectedMediaItems">CountSelectedMediaItems</a></p>

      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     selected
     item
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSelectedTrack</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetSelectedTrack(ReaProject* proj, int seltrackidx)</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetSelectedTrack(ReaProject proj, int seltrackidx)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.GetSelectedTrack(ReaProject proj, integer seltrackidx)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetSelectedTrack(ReaProject proj, Int seltrackidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get a selected track from a project by selected track count (zero-based). This function ignores the master track, see <a href="#GetSelectedTrack2">GetSelectedTrack2</a> and <a href="#CountSelectedTracks">CountSelectedTracks</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">
the requested, selected MediaTrack
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="seltrackidx" parmname="seltrackidx">
<p>the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user.</p>

      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     selected
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSelectedTrack2</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetSelectedTrack2(ReaProject* proj, int seltrackidx, bool wantmaster)</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetSelectedTrack2(ReaProject proj, int seltrackidx, bool wantmaster)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.GetSelectedTrack2(ReaProject proj, integer seltrackidx, boolean wantmaster)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetSelectedTrack2(ReaProject proj, Int seltrackidx, Boolean wantmaster)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">
the requested, selected MediaTrack
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="seltrackidx" parmname="seltrackidx">
<p>the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user.</p>

      </parameter>
      <parameter id="3" datatype="wantmaster" parmname="wantmaster">
<p>true, seltrackidx=0 is the master track, if selected; false, seltrackidx=0 is the first selected normal track</p>

      </parameter>
    </parameters>
    <tags>
     trackmanagement
     master
     track
     get
     selected
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSelectedTrackEnvelope</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* GetSelectedTrackEnvelope(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope GetSelectedTrackEnvelope(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.GetSelectedTrackEnvelope(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope RPR_GetSelectedTrackEnvelope(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get the currently selected track envelope, returns 0 if no envelope is selected
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">
the selected TrackEnvelope as an object; nil if no TrackEnvelope is selected
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     get
     selected
     envelope
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSet_ArrangeView2</slug>
    <functioncall prog_lang="cpp">void GetSet_ArrangeView2(ReaProject* proj, bool isSet, int screen_x_start, int screen_x_end, double* start_timeOut, double* end_timeOut)</functioncall>
    <functioncall prog_lang="eel">GetSet_ArrangeView2(ReaProject proj, bool isSet, int screen_x_start, int screen_x_end, &amp;amp;start_time, &amp;amp;end_time)</functioncall>
    <functioncall prog_lang="lua">number start_time retval, number end_time = reaper.GetSet_ArrangeView2(ReaProject proj, boolean isSet, integer screen_x_start, integer screen_x_end)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, Boolean isSet, Int screen_x_start, Int screen_x_end, Float start_timeOut, Float end_timeOut) = RPR_GetSet_ArrangeView2(proj, isSet, screen_x_start, screen_x_end, start_timeOut, end_timeOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="start_time" retvalname="retval">

      </retval>
      <retval id="2" datatype="end_time" retvalname="end_time">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="isSet" parmname="isSet">


      </parameter>
      <parameter id="3" datatype="screen_x_start" parmname="screen_x_start">


      </parameter>
      <parameter id="4" datatype="screen_x_end" parmname="screen_x_end">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSet_LoopTimeRange</slug>
    <functioncall prog_lang="cpp">void GetSet_LoopTimeRange(bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</functioncall>
    <functioncall prog_lang="eel">GetSet_LoopTimeRange(bool isSet, bool isLoop, &amp;amp;start, &amp;amp;end, bool allowautoseek)</functioncall>
    <functioncall prog_lang="lua">number start retval, number end = reaper.GetSet_LoopTimeRange(boolean isSet, boolean isLoop, number start, number end, boolean allowautoseek)</functioncall>
    <functioncall prog_lang="python">(Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange(isSet, isLoop, startOut, endOut, allowautoseek)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="start" retvalname="retval">

      </retval>
      <retval id="2" datatype="end" retvalname="end">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="isSet" parmname="isSet">

      </parameter>
      <parameter id="2" datatype="isLoop" parmname="isLoop">

      </parameter>
      <parameter id="3" datatype="start" parmname="start">

      </parameter>
      <parameter id="4" datatype="end" parmname="end">

      </parameter>
      <parameter id="5" datatype="allowautoseek" parmname="allowautoseek">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSet_LoopTimeRange2</slug>
    <functioncall prog_lang="cpp">void GetSet_LoopTimeRange2(ReaProject* proj, bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</functioncall>
    <functioncall prog_lang="eel">GetSet_LoopTimeRange2(ReaProject proj, bool isSet, bool isLoop, &amp;amp;start, &amp;amp;end, bool allowautoseek)</functioncall>
    <functioncall prog_lang="lua">number start retval, number end = reaper.GetSet_LoopTimeRange2(ReaProject proj, boolean isSet, boolean isLoop, number start, number end, boolean allowautoseek)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange2(proj, isSet, isLoop, startOut, endOut, allowautoseek)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="start" retvalname="retval">

      </retval>
      <retval id="2" datatype="end" retvalname="end">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="isSet" parmname="isSet">


      </parameter>
      <parameter id="3" datatype="isLoop" parmname="isLoop">


      </parameter>
      <parameter id="4" datatype="start" parmname="start">


      </parameter>
      <parameter id="5" datatype="end" parmname="end">


      </parameter>
      <parameter id="6" datatype="allowautoseek" parmname="allowautoseek">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetAutomationItemInfo</slug>
    <functioncall prog_lang="cpp">double GetSetAutomationItemInfo(TrackEnvelope* env, int autoitem_idx, const char* desc, double value, bool is_set)</functioncall>
    <functioncall prog_lang="eel">double GetSetAutomationItemInfo(TrackEnvelope env, int autoitem_idx, &quot;desc&quot;, value, bool is_set)</functioncall>
    <functioncall prog_lang="lua">number = reaper.GetSetAutomationItemInfo(TrackEnvelope env, integer autoitem_idx, string desc, number value, boolean is_set)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetSetAutomationItemInfo(TrackEnvelope env, Int autoitem_idx, String desc, Float value, Boolean is_set)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:<br/>
D_POOL_ID: double *, automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID<br/>
D_POSITION: double *, automation item timeline position in seconds<br/>
D_LENGTH: double *, automation item length in seconds<br/>
D_STARTOFFS: double *, automation item start offset in seconds<br/>
D_PLAYRATE: double *, automation item playback rate<br/>
D_BASELINE: double *, automation item baseline value in the range [0,1]<br/>
D_AMPLITUDE: double *, automation item amplitude in the range [-1,1]<br/>
D_LOOPSRC: double *, nonzero if the automation item contents are looped<br/>
D_UISEL: double *, nonzero if the automation item is selected in the arrange view<br/>
D_POOL_QNLEN : double *, automation item pooled source length in quarter notes (setting will affect all pooled instances)
    </description>
    <chapter_context>
      Automation Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="env" parmname="env">

      </parameter>
      <parameter id="2" datatype="autoitem_idx" parmname="autoitem_idx">

      </parameter>
      <parameter id="3" datatype="desc" parmname="desc">

      </parameter>
      <parameter id="4" datatype="value" parmname="value">

      </parameter>
      <parameter id="5" datatype="is_set" parmname="is_set">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetAutomationItemInfo_String</slug>
    <functioncall prog_lang="cpp">bool GetSetAutomationItemInfo_String(TrackEnvelope* env, int autoitem_idx, const char* desc, char* valuestrNeedBig, bool is_set)</functioncall>
    <functioncall prog_lang="eel">bool GetSetAutomationItemInfo_String(TrackEnvelope env, int autoitem_idx, &quot;desc&quot;, #valuestrNeedBig, bool is_set)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string valuestrNeedBig = reaper.GetSetAutomationItemInfo_String(TrackEnvelope env, integer autoitem_idx, string desc, string valuestrNeedBig, boolean is_set)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, Int autoitem_idx, String desc, String valuestrNeedBig, Boolean is_set) = RPR_GetSetAutomationItemInfo_String(env, autoitem_idx, desc, valuestrNeedBig, is_set)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:<br/>
<br/>
P_POOL_NAME : char *, name of the underlying automation item pool<br/>
P_POOL_EXT:xyz : char *, extension-specific persistent data
    </description>
    <chapter_context>
      Automation Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="valuestrNeedBig">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="env">

      </parameter>
      <parameter id="2" datatype="integer" parmname="autoitem_idx">

      </parameter>
      <parameter id="3" datatype="string" parmname="desc">

      </parameter>
      <parameter id="4" datatype="string" parmname="valuestrNeedBig">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="is_set">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetEnvelopeInfo_String</slug>
    <functioncall prog_lang="cpp">bool GetSetEnvelopeInfo_String(TrackEnvelope* env, const char* parmname, char* stringNeedBig, bool setNewValue)</functioncall>
    <functioncall prog_lang="eel">bool GetSetEnvelopeInfo_String(TrackEnvelope env, &quot;parmname&quot;, #stringNeedBig, bool setNewValue)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetEnvelopeInfo_String(TrackEnvelope env, string parmname, string stringNeedBig, boolean setNewValue)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetEnvelopeInfo_String(env, parmname, stringNeedBig, setNewValue)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Gets/sets an attribute string:<br/>
P_EXT:xyz : char * : extension-specific persistent data
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="stringNeedBig">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="TrackEnvelope" parmname="env">

      </parameter>
      <parameter id="2" datatype="string" parmname="parmname">

      </parameter>
      <parameter id="3" datatype="string" parmname="stringNeedBig">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="setNewValue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetEnvelopeState</slug>
    <functioncall prog_lang="cpp">bool GetSetEnvelopeState(TrackEnvelope* env, char* str, int str_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetSetEnvelopeState(TrackEnvelope env, #str)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetEnvelopeState(TrackEnvelope env, string str)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String str, Int str_sz) = RPR_GetSetEnvelopeState(env, str, str_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>deprecated – see <a href="#SetEnvelopeStateChunk">SetEnvelopeStateChunk</a>, <a href="#GetEnvelopeStateChunk">GetEnvelopeStateChunk</a></p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="str" retvalname="str">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="env" parmname="env">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetEnvelopeState2</slug>
    <functioncall prog_lang="cpp">bool GetSetEnvelopeState2(TrackEnvelope* env, char* str, int str_sz, bool isundo)</functioncall>
    <functioncall prog_lang="eel">bool GetSetEnvelopeState2(TrackEnvelope env, #str, bool isundo)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetEnvelopeState2(TrackEnvelope env, string str, boolean isundo)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope env, String str, Int str_sz, Boolean isundo) = RPR_GetSetEnvelopeState2(env, str, str_sz, isundo)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>deprecated – see <a href="#SetEnvelopeStateChunk">SetEnvelopeStateChunk</a>, <a href="#GetEnvelopeStateChunk">GetEnvelopeStateChunk</a></p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="str" retvalname="str">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="env" parmname="env">

      </parameter>
      <parameter id="2" datatype="isundo" parmname="isundo">

      </parameter>
      <parameter id="3" datatype="isundo" parmname="isundo">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetItemState</slug>
    <functioncall prog_lang="cpp">bool GetSetItemState(MediaItem* item, char* str, int str_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetSetItemState(MediaItem item, #str)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetItemState(MediaItem item, string str)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem item, String str, Int str_sz) = RPR_GetSetItemState(item, str, str_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>deprecated – see <a href="#SetItemStateChunk">SetItemStateChunk</a>, <a href="#GetItemStateChunk">GetItemStateChunk</a></p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="str" retvalname="str">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetItemState2</slug>
    <functioncall prog_lang="cpp">bool GetSetItemState2(MediaItem* item, char* str, int str_sz, bool isundo)</functioncall>
    <functioncall prog_lang="eel">bool GetSetItemState2(MediaItem item, #str, bool isundo)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetItemState2(MediaItem item, string str, boolean isundo)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem item, String str, Int str_sz, Boolean isundo) = RPR_GetSetItemState2(item, str, str_sz, isundo)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>deprecated – see <a href="#SetItemStateChunk">SetItemStateChunk</a>, <a href="#GetItemStateChunk">GetItemStateChunk</a></p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="str" retvalname="str">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="isundo" parmname="isundo">

      </parameter>
      <parameter id="3" datatype="isundo" parmname="isundo">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetMediaItemInfo_String</slug>
    <functioncall prog_lang="cpp">bool GetSetMediaItemInfo_String(MediaItem* item, const char* parmname, char* stringNeedBig, bool setNewValue)</functioncall>
    <functioncall prog_lang="eel">bool GetSetMediaItemInfo_String(MediaItem item, &quot;parmname&quot;, #stringNeedBig, bool setNewValue)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetMediaItemInfo_String(MediaItem item, string parmname, string stringNeedBig, boolean setNewValue)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem item, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetMediaItemInfo_String(item, parmname, stringNeedBig, setNewValue)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Gets/sets an item attribute string:<br/>
    P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)<br/>
    P_EXT:xyz : char * : extension-specific persistent data<br/>
    GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="stringNeedBig">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">

      </parameter>
      <parameter id="2" datatype="string" parmname="parmname">

      </parameter>
      <parameter id="3" datatype="string" parmname="stringNeedBig">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="setNewValue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetMediaItemTakeInfo_String</slug>
    <functioncall prog_lang="cpp">bool GetSetMediaItemTakeInfo_String(MediaItem_Take* tk, const char* parmname, char* stringNeedBig, bool setnewvalue)</functioncall>
    <functioncall prog_lang="eel">bool GetSetMediaItemTakeInfo_String(MediaItem_Take tk, &quot;parmname&quot;, #stringNeedBig, bool setnewvalue)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(MediaItem_Take tk, string parmname, string stringNeedBig, boolean setnewvalue)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take tk, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaItemTakeInfo_String(tk, parmname, stringNeedBig, setnewvalue)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Gets/sets a take attribute string:<br/>
    P_NAME : char * to take name<br/>
    P_EXT:xyz : char * : extension-specific persistent data<br/>
    GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="stringNeedBig">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="tk">

      </parameter>
      <parameter id="2" datatype="string" parmname="parmname">

      </parameter>
      <parameter id="3" datatype="string" parmname="stringNeedBig">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="setnewvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetMediaTrackInfo_String</slug>
    <functioncall prog_lang="cpp">bool GetSetMediaTrackInfo_String(MediaTrack* tr, const char* parmname, char* stringNeedBig, bool setnewvalue)</functioncall>
    <functioncall prog_lang="eel">bool GetSetMediaTrackInfo_String(MediaTrack tr, &quot;parmname&quot;, #stringNeedBig, bool setnewvalue)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetMediaTrackInfo_String(MediaTrack tr, string parmname, string stringNeedBig, boolean setnewvalue)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack tr, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaTrackInfo_String(tr, parmname, stringNeedBig, setnewvalue)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Get or set track string attributes.<br/>
P_NAME : char * : track name (on master returns NULL)<br/>
P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)<br/>
P_MCP_LAYOUT : const char * : layout name<br/>
P_TCP_LAYOUT : const char * : layout name<br/>
P_EXT:xyz : char * : extension-specific persistent data<br/>
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="stringNeedBig">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="tr">

      </parameter>
      <parameter id="2" datatype="string" parmname="parmname">

      </parameter>
      <parameter id="3" datatype="string" parmname="stringNeedBig">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="setnewvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetProjectAuthor</slug>
    <functioncall prog_lang="cpp">void GetSetProjectAuthor(ReaProject* proj, bool set, char* author, int author_sz)</functioncall>
    <functioncall prog_lang="eel">GetSetProjectAuthor(ReaProject proj, bool set, #author)</functioncall>
    <functioncall prog_lang="lua">string author = reaper.GetSetProjectAuthor(ReaProject proj, boolean set, string author)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, Boolean set, String author, Int author_sz) = RPR_GetSetProjectAuthor(proj, set, author, author_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
gets or sets project author, author_sz is ignored when setting
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="author" retvalname="author">
the (new) project's author
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="set" parmname="set">
<p>true, set new author; false, get current project’s author</p>

      </parameter>
      <parameter id="3" datatype="author" parmname="author">
<p>the new project author, when set is true. When set is false, author will be ignored.</p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     project
     author
     get
     set
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetProjectGrid</slug>
    <functioncall prog_lang="cpp">int GetSetProjectGrid(ReaProject* project, bool set, double* divisionInOutOptional, int* swingmodeInOutOptional, double* swingamtInOutOptional)</functioncall>
    <functioncall prog_lang="eel">int GetSetProjectGrid(ReaProject project, bool set, optional &amp;amp;divisionIn, optional int &amp;amp;swingmodeIn, optional &amp;amp;swingamtIn)</functioncall>
    <functioncall prog_lang="lua">integer retval, optional number divisionIn, optional number swingmodeIn, optional number swingamtIn = reaper.GetSetProjectGrid(ReaProject project, boolean set)</functioncall>
    <functioncall prog_lang="python">(Int retval, ReaProject project, Boolean set, Float divisionInOutOptional, Int swingmodeInOutOptional, Float swingamtInOutOptional) = RPR_GetSetProjectGrid(project, set, divisionInOutOptional, swingmodeInOutOptional, swingamtInOutOptional)</functioncall>
    <requires>
      Reaper=5.965
      Lua=5.3
    </requires>
    <description>
Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="divisionIn" retvalname="divisionIn">

      </retval>
      <retval id="3" datatype="swingmodeIn" retvalname="swingmodeIn">

      </retval>
      <retval id="4" datatype="swingamtIn" retvalname="swingamtIn">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="project" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="set" parmname="set">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetProjectInfo</slug>
    <functioncall prog_lang="cpp">double GetSetProjectInfo(ReaProject* project, const char* desc, double value, bool is_set)</functioncall>
    <functioncall prog_lang="eel">double GetSetProjectInfo(ReaProject project, &quot;desc&quot;, value, bool is_set)</functioncall>
    <functioncall prog_lang="lua">number value = reaper.GetSetProjectInfo(ReaProject project, string desc, number value, boolean is_set)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetSetProjectInfo(ReaProject project, String desc, Float value, Boolean is_set)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Get or set project information.<br/>
<br/>
RENDER_SETTINGS: &amp;amp;(1|2)=0:master mix, &amp;amp;1=stems+master mix, &amp;amp;2=stems only, &amp;amp;4=multichannel tracks to multichannel files, &amp;amp;8=use render matrix, &amp;amp;16=tracks with only mono media to mono files, &amp;amp;32=selected media items; &amp;amp;64=selected media items via master<br/>
RENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions<br/>
RENDER_CHANNELS: number of channels in rendered file<br/>
RENDER_SRATE: sample rate of rendered file (or 0 for project sample rate)<br/>
RENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0<br/>
RENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0<br/>
RENDER_TAILFLAG: apply render tail setting when rendering: &amp;amp;1=custom time bounds, &amp;amp;2=entire project, &amp;amp;4=time selection, &amp;amp;8=all project regions, &amp;amp;16=selected media items, &amp;amp;32=selected project regions<br/>
RENDER_TAILMS: tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)<br/>
RENDER_ADDTOPROJ: 1=add rendered files to project<br/>
RENDER_DITHER: &amp;amp;1=dither, &amp;amp;2=noise shaping, &amp;amp;4=dither stems, &amp;amp;8=noise shaping on stems<br/>
PROJECT_SRATE: samplerate (ignored unless PROJECT_SRATE_USE set)<br/>
PROJECT_SRATE_USE: set to 1 if project samplerate is used
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="value">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="project">

      </parameter>
      <parameter id="2" datatype="string" parmname="desc">

      </parameter>
      <parameter id="3" datatype="number" parmname="value">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="is_set">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetProjectInfo_String</slug>
    <functioncall prog_lang="cpp">bool GetSetProjectInfo_String(ReaProject* project, const char* desc, char* valuestrNeedBig, bool is_set)</functioncall>
    <functioncall prog_lang="eel">bool GetSetProjectInfo_String(ReaProject project, &quot;desc&quot;, #valuestrNeedBig, bool is_set)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string valuestrNeedBig = reaper.GetSetProjectInfo_String(ReaProject project, string desc, string valuestrNeedBig, boolean is_set)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, ReaProject project, String desc, String valuestrNeedBig, Boolean is_set) = RPR_GetSetProjectInfo_String(project, desc, valuestrNeedBig, is_set)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
<p>Get or set project information.</p>
<p>RECORD_PATH: recording directory – may be blank or a relative path, to get the effective path see <a href="#GetProjectPathEx">GetProjectPathEx</a> RENDER_FILE: render directory RENDER_PATTERN: render file name (may contain wildcards) RENDER_FORMAT: base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), to use default settings for that sink type. see <a href="render-codes-decoded-base64-strings.txt">render-code-documentation</a> for how the unencoded RENDER_FORMAT-string is structured.</p>
<p>To just use the 4-byte-string, you can use: “evaw” for wave, “ffia” for aiff, " osi" for audio-cd, " pdd" for ddp, “calf” for flac, “l3pm” for mp3, “vggo” for ogg, “SggO” for Opus, “PMFF” for FFMpeg-video, “FVAX” for MP4Video/Audio on Mac, " FIG" for Gif, " FCL" for LCF, “kpvw” for wavepack</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="valuestrNeedBig">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="project">

      </parameter>
      <parameter id="2" datatype="string" parmname="desc">

      </parameter>
      <parameter id="3" datatype="string" parmname="valuestrNeedBig">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="is_set">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetProjectNotes</slug>
    <functioncall prog_lang="cpp">void GetSetProjectNotes(ReaProject* proj, bool set, char* notesNeedBig, int notesNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">GetSetProjectNotes(ReaProject proj, bool set, #notes)</functioncall>
    <functioncall prog_lang="lua">string notes = reaper.GetSetProjectNotes(ReaProject proj, boolean set, string notes)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, Boolean set, String notesNeedBig, Int notesNeedBig_sz) = RPR_GetSetProjectNotes(proj, set, notesNeedBig, notesNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
gets or sets project notes, notesNeedBig_sz is ignored when setting
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="notes" retvalname="notes">
the notes stored in the project's notes.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="set" parmname="set">
<p>true, set the project’s notes; false, get the project’s notes</p>

      </parameter>
      <parameter id="3" datatype="notes" parmname="notes">
<p>the new project’s notes, when set is set to true</p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     get
     set
     project
     notes
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetRepeat</slug>
    <functioncall prog_lang="cpp">int GetSetRepeat(int val)</functioncall>
    <functioncall prog_lang="eel">int GetSetRepeat(int val)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetSetRepeat(integer val)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetSetRepeat(Int val)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets or gets repeat-state of the current project.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
new/current repeat state; 0, repeat is off; 1, repeat is on
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="val" parmname="val">
-1, query repeat-state<br/>
0, clear repeat state<br/>
1, set repeat to repeat<br/>
2 and higher, toggle repeat state
      </parameter>
    </parameters>
    <tags>
     transportmanagement
     get
     set
     repeat
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetRepeatEx</slug>
    <functioncall prog_lang="cpp">int GetSetRepeatEx(ReaProject* proj, int val)</functioncall>
    <functioncall prog_lang="eel">int GetSetRepeatEx(ReaProject proj, int val)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetSetRepeatEx(ReaProject proj, integer val)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetSetRepeatEx(ReaProject proj, Int val)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets or gets repeat-state in a specific project.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
new/current repeat state; 0, repeat is off; 1, repeat is on
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="val" parmname="val">
<p>-1, query repeat-state 0, clear repeat state 1, set repeat to repeat 2 and higher, toggle repeat state</p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     get
     set
     repeat
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetTrackGroupMembership</slug>
    <functioncall prog_lang="cpp">unsigned int GetSetTrackGroupMembership(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</functioncall>
    <functioncall prog_lang="eel">uint GetSetTrackGroupMembership(MediaTrack tr, &quot;groupname&quot;, uint setmask, uint setvalue)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetSetTrackGroupMembership(MediaTrack tr, string groupname, integer setmask, integer setvalue)</functioncall>
    <functioncall prog_lang="python">Unknown RPR_GetSetTrackGroupMembership(MediaTrack tr, String groupname, Unknown setmask, Unknown setvalue)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:<br/>
    VOLUME_MASTER<br/>
    VOLUME_SLAVE<br/>
    VOLUME_VCA_MASTER<br/>
    VOLUME_VCA_SLAVE<br/>
    PAN_MASTER<br/>
    PAN_SLAVE<br/>
    WIDTH_MASTER<br/>
    WIDTH_SLAVE<br/>
    MUTE_MASTER<br/>
    MUTE_SLAVE<br/>
    SOLO_MASTER<br/>
    SOLO_SLAVE<br/>
    RECARM_MASTER<br/>
    RECARM_SLAVE<br/>
    POLARITY_MASTER<br/>
    POLARITY_SLAVE<br/>
    AUTOMODE_MASTER<br/>
    AUTOMODE_SLAVE<br/>
    VOLUME_REVERSE<br/>
    PAN_REVERSE<br/>
    WIDTH_REVERSE<br/>
    NO_MASTER_WHEN_SLAVE<br/>
    VOLUME_VCA_SLAVE_ISPREFX
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="groupname" parmname="groupname">

      </parameter>
      <parameter id="3" datatype="setmask" parmname="setmask">

      </parameter>
      <parameter id="4" datatype="setvalue" parmname="setvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetTrackState</slug>
    <functioncall prog_lang="cpp">bool GetSetTrackState(MediaTrack* track, char* str, int str_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetSetTrackState(MediaTrack track, #str)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetTrackState(MediaTrack track, string str)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String str, Int str_sz) = RPR_GetSetTrackState(track, str, str_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>deprecated – see <a href="#SetTrackStateChunk">SetTrackStateChunk</a>, <a href="#GetTrackStateChunk">GetTrackStateChunk</a></p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="str" retvalname="str">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetTrackState2</slug>
    <functioncall prog_lang="cpp">bool GetSetTrackState2(MediaTrack* track, char* str, int str_sz, bool isundo)</functioncall>
    <functioncall prog_lang="eel">bool GetSetTrackState2(MediaTrack track, #str, bool isundo)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.GetSetTrackState2(MediaTrack track, string str, boolean isundo)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String str, Int str_sz, Boolean isundo) = RPR_GetSetTrackState2(track, str, str_sz, isundo)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>deprecated – see <a href="#SetTrackStateChunk">SetTrackStateChunk</a>, <a href="#GetTrackStateChunk">GetTrackStateChunk</a></p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="str" retvalname="str">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="str" parmname="str">

      </parameter>
      <parameter id="3" datatype="isundo" parmname="isundo">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSubProjectFromSource</slug>
    <functioncall prog_lang="cpp">ReaProject* GetSubProjectFromSource(PCM_source* src)</functioncall>
    <functioncall prog_lang="eel">ReaProject GetSubProjectFromSource(PCM_source src)</functioncall>
    <functioncall prog_lang="lua">ReaProject = reaper.GetSubProjectFromSource(PCM_source src)</functioncall>
    <functioncall prog_lang="python">ReaProject RPR_GetSubProjectFromSource(PCM_source src)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="ReaProject" retvalname="ReaProject">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>GetTake</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* GetTake(MediaItem* item, int takeidx)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take GetTake(MediaItem item, int takeidx)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take = reaper.GetTake(MediaItem item, integer takeidx)</functioncall>
    <functioncall prog_lang="python">MediaItem_Take RPR_GetTake(MediaItem item, Int takeidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get a take from an item by take count (zero-based)
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="MediaItem_Take">
the requested MediaItem_Take
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">
the MediaItem, whose take you want to request
      </parameter>
      <parameter id="2" datatype="takeidx" parmname="takeidx">
the index of the takes in a MediaItem
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     take
     idx
     item
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTakeEnvelope</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* GetTakeEnvelope(MediaItem_Take* take, int envidx)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope GetTakeEnvelope(MediaItem_Take take, int envidx)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTakeEnvelope(MediaItem_Take take, integer envidx)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope RPR_GetTakeEnvelope(MediaItem_Take take, Int envidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="envidx" parmname="envidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTakeEnvelopeByName</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* GetTakeEnvelopeByName(MediaItem_Take* take, const char* envname)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope GetTakeEnvelopeByName(MediaItem_Take take, &quot;envname&quot;)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTakeEnvelopeByName(MediaItem_Take take, string envname)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope RPR_GetTakeEnvelopeByName(MediaItem_Take take, String envname)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="envname" parmname="envname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTakeName</slug>
    <functioncall prog_lang="cpp">const char* GetTakeName(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">bool GetTakeName(#retval, MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">string = reaper.GetTakeName(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">String RPR_GetTakeName(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Retruns the filename of the mediafile in a take. returns NULL if the take is not valid
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the filename of the mediafile in the take
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">
the MediaItem_Take, whose mediafilename you want to have
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     filename
     media
     take
     item
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTakeNumStretchMarkers</slug>
    <functioncall prog_lang="cpp">int GetTakeNumStretchMarkers(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">int GetTakeNumStretchMarkers(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetTakeNumStretchMarkers(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetTakeNumStretchMarkers(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns number of stretch markers in take
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTakeStretchMarker</slug>
    <functioncall prog_lang="cpp">int GetTakeStretchMarker(MediaItem_Take* take, int idx, double* posOut, double* srcposOutOptional)</functioncall>
    <functioncall prog_lang="eel">int GetTakeStretchMarker(MediaItem_Take take, int idx, &amp;amp;pos, optional &amp;amp;srcpos)</functioncall>
    <functioncall prog_lang="lua">integer retval, number pos, optional number srcpos = reaper.GetTakeStretchMarker(MediaItem_Take take, integer idx)</functioncall>
    <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int idx, Float posOut, Float srcposOutOptional) = RPR_GetTakeStretchMarker(take, idx, posOut, srcposOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. <br/>
posOut will be set to position in item, srcposOutOptional will be set to source media position. <br/>
Returns index. if input index is -1, next marker is found using position (or source position if position is -1). <br/>
If position/source position are used to find marker position, their values are not updated.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="pos" retvalname="pos">

      </retval>
      <retval id="3" datatype="srcpos" retvalname="srcpos">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="idx" parmname="idx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTakeStretchMarkerSlope</slug>
    <functioncall prog_lang="cpp">double GetTakeStretchMarkerSlope(MediaItem_Take* take, int idx)</functioncall>
    <functioncall prog_lang="eel">double GetTakeStretchMarkerSlope(MediaItem_Take take, int idx)</functioncall>
    <functioncall prog_lang="lua">number = reaper.GetTakeStretchMarkerSlope(MediaItem_Take take, integer idx)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetTakeStretchMarkerSlope(MediaItem_Take take, Int idx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#SetTakeStretchMarkerSlope">SetTakeStretchMarkerSlope</a></p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="idx" parmname="idx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTCPFXParm</slug>
    <functioncall prog_lang="cpp">bool GetTCPFXParm(ReaProject* project, MediaTrack* track, int index, int* fxindexOut, int* parmidxOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTCPFXParm(ReaProject project, MediaTrack track, int index, int &amp;amp;fxindex, int &amp;amp;parmidx)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number fxindex, number parmidx = reaper.GetTCPFXParm(ReaProject project, MediaTrack track, integer index)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, ReaProject project, MediaTrack track, Int index, Int fxindexOut, Int parmidxOut) = RPR_GetTCPFXParm(project, track, index, fxindexOut, parmidxOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get information about a specific FX parameter knob (see <a href="#CountTCPFXParms">CountTCPFXParms</a>).</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="fxindex" retvalname="fxindex">

      </retval>
      <retval id="3" datatype="parmidx" retvalname="parmidx">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="project" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="track" parmname="track">


      </parameter>
      <parameter id="3" datatype="index" parmname="index">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTempoMatchPlayRate</slug>
    <functioncall prog_lang="cpp">bool GetTempoMatchPlayRate(PCM_source* source, double srcscale, double position, double mult, double* rateOut, double* targetlenOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTempoMatchPlayRate(PCM_source source, srcscale, position, mult, &amp;amp;rate, &amp;amp;targetlen)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number rate, number targetlen = reaper.GetTempoMatchPlayRate(PCM_source source, number srcscale, number position, number mult)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, PCM_source source, Float srcscale, Float position, Float mult, Float rateOut, Float targetlenOut) = RPR_GetTempoMatchPlayRate(source, srcscale, position, mult, rateOut, targetlenOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="rate" retvalname="rate">

      </retval>
      <retval id="3" datatype="targetlen" retvalname="targetlen">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="source" parmname="source">

      </parameter>
      <parameter id="2" datatype="srcscale" parmname="srcscale">

      </parameter>
      <parameter id="3" datatype="position" parmname="position">

      </parameter>
      <parameter id="4" datatype="mult" parmname="mult">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTempoTimeSigMarker</slug>
    <functioncall prog_lang="cpp">bool GetTempoTimeSigMarker(ReaProject* proj, int ptidx, double* timeposOut, int* measureposOut, double* beatposOut, double* bpmOut, int* timesig_numOut, int* timesig_denomOut, bool* lineartempoOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTempoTimeSigMarker(ReaProject proj, int ptidx, &amp;amp;timepos, int &amp;amp;measurepos, &amp;amp;beatpos, &amp;amp;bpm, int &amp;amp;timesig_num, int &amp;amp;timesig_denom, bool &amp;amp;lineartempo)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number timepos, number measurepos, number beatpos, number bpm, number timesig_num, number timesig_denom, boolean lineartempo = reaper.GetTempoTimeSigMarker(ReaProject proj, integer ptidx)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, ReaProject proj, Int ptidx, Float timeposOut, Int measureposOut, Float beatposOut, Float bpmOut, Int timesig_numOut, Int timesig_denomOut, Boolean lineartempoOut) = RPR_GetTempoTimeSigMarker(proj, ptidx, timeposOut, measureposOut, beatposOut, bpmOut, timesig_numOut, timesig_denomOut, lineartempoOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get information about a tempo/time signature marker. See <a href="#CountTempoTimeSigMarkers">CountTempoTimeSigMarkers</a>, <a href="#SetTempoTimeSigMarker">SetTempoTimeSigMarker</a>, <a href="#AddTempoTimeSigMarker">AddTempoTimeSigMarker</a>, <a href="#DeleteTempoTimeSigMarker">DeleteTempoTimeSigMarker</a>.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="timepos" retvalname="timepos">

      </retval>
      <retval id="3" datatype="measurepos" retvalname="measurepos">

      </retval>
      <retval id="4" datatype="beatpos" retvalname="beatpos">

      </retval>
      <retval id="5" datatype="bpm" retvalname="bpm">

      </retval>
      <retval id="6" datatype="timesig_num" retvalname="timesig_num">

      </retval>
      <retval id="7" datatype="timesig_denom" retvalname="timesig_denom">

      </retval>
      <retval id="8" datatype="lineartempo" retvalname="lineartempo">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="ptidx" parmname="ptidx">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetToggleCommandState</slug>
    <functioncall prog_lang="cpp">int GetToggleCommandState(int command_id)</functioncall>
    <functioncall prog_lang="eel">int GetToggleCommandState(int command_id)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetToggleCommandState(integer command_id)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetToggleCommandState(Int command_id)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Return toggle-state of an action. See <a href="#GetToggleCommandStateEx">GetToggleCommandStateEx</a>. See <a href="#NamedCommandLookup">NamedCommandLookup</a>() for the correct command_id.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
toggle-state <br/>
0, off<br/>
1, on<br/>
-1, NA because the action does not have on/off states.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="command_id" parmname="command_id">
the command_id, whose toggle-state you want to know.
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     toggle
     get
     command
     state
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetToggleCommandStateEx</slug>
    <functioncall prog_lang="cpp">int GetToggleCommandStateEx(int section_id, int command_id)</functioncall>
    <functioncall prog_lang="eel">int GetToggleCommandStateEx(int section_id, int command_id)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetToggleCommandStateEx(integer section_id, integer command_id)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetToggleCommandStateEx(Int section_id, Int command_id)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Return toggle-state of an action. For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. For the MIDI editor, the action state for the most recently focused window will be returned. See <a href="#NamedCommandLookup">NamedCommandLookup</a>() for the correct command_id.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
toggle-state <br/>
0, off<br/>
1, on<br/>
-1, NA because the action does not have on/off states.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section_id" parmname="section_id">
the section, in which the action lies<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
      <parameter id="2" datatype="command_id" parmname="command_id">
the command_id, whose toggle-state you want to know.
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     toggle
     get
     command
     state
     section
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTooltipWindow</slug>
    <functioncall prog_lang="cpp">HWND GetTooltipWindow()</functioncall>
    <functioncall prog_lang="eel">HWND GetTooltipWindow()</functioncall>
    <functioncall prog_lang="lua">HWND = reaper.GetTooltipWindow()</functioncall>
    <functioncall prog_lang="python">HWND RPR_GetTooltipWindow()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
gets a tooltip window,in case you want to ask it for font information. Can return NULL.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HWND" retvalname="HWND">
the tooltip-window
      </retval>
    </retvals>
    <tags>
     userinterface
     hwnd
     tooltip
     window
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrack</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetTrack(ReaProject* proj, int trackidx)</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetTrack(ReaProject proj, int trackidx)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.GetTrack(ReaProject proj, integer trackidx)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_GetTrack(ReaProject proj, Int trackidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get a track from a project by track count (zero-based) (proj=0 for active project)
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">
the requested MediaTrack as an object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="trackidx" parmname="trackidx">
<p>the tracknumber; 0 for the first track, 1 for the second track, etc.</p>

      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackAutomationMode</slug>
    <functioncall prog_lang="cpp">int GetTrackAutomationMode(MediaTrack* tr)</functioncall>
    <functioncall prog_lang="eel">int GetTrackAutomationMode(MediaTrack tr)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetTrackAutomationMode(MediaTrack tr)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetTrackAutomationMode(MediaTrack tr)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
return the track mode, regardless of global override
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackColor</slug>
    <functioncall prog_lang="cpp">int GetTrackColor(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int GetTrackColor(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetTrackColor(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetTrackColor(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the os-dependent color
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack, whose color you want to request
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     color
     track
     dependent
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackDepth</slug>
    <functioncall prog_lang="cpp">int GetTrackDepth(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int GetTrackDepth(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetTrackDepth(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetTrackDepth(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the depth of a track within a folder structure
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the position in the track-folder-structure; 0 for the highest level or unfoldered tracks
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack whose position in the track-folder-structure you want to request
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     track
     depth
     folder
     depth
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackEnvelope</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* GetTrackEnvelope(MediaTrack* track, int envidx)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope GetTrackEnvelope(MediaTrack track, int envidx)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTrackEnvelope(MediaTrack track, integer envidx)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope RPR_GetTrackEnvelope(MediaTrack track, Int envidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="envidx" parmname="envidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackEnvelopeByChunkName</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* GetTrackEnvelopeByChunkName(MediaTrack* tr, const char* cfgchunkname)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope GetTrackEnvelopeByChunkName(MediaTrack tr, &quot;cfgchunkname&quot;)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTrackEnvelopeByChunkName(MediaTrack tr, string cfgchunkname)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope RPR_GetTrackEnvelopeByChunkName(MediaTrack tr, String cfgchunkname)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets a built-in track envelope by configuration chunk name, e.g. &quot;&amp;lt;VOLENV&quot;.
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="cfgchunkname" parmname="cfgchunkname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackEnvelopeByName</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* GetTrackEnvelopeByName(MediaTrack* track, const char* envname)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope GetTrackEnvelopeByName(MediaTrack track, &quot;envname&quot;)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.GetTrackEnvelopeByName(MediaTrack track, string envname)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope RPR_GetTrackEnvelopeByName(MediaTrack track, String envname)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="envname" parmname="envname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackFromPoint</slug>
    <functioncall prog_lang="cpp">MediaTrack* GetTrackFromPoint(int screen_x, int screen_y, int* infoOutOptional)</functioncall>
    <functioncall prog_lang="eel">MediaTrack GetTrackFromPoint(int screen_x, int screen_y, optional int &amp;info)</functioncall>
    <functioncall prog_lang="lua">MediaTrack retval, optional number info = reaper.GetTrackFromPoint(integer screen_x, integer screen_y)</functioncall>
    <functioncall prog_lang="python">(MediaTrack retval, Int screen_x, Int screen_y, Int infoOutOptional) = RPR_GetTrackFromPoint(screen_x, screen_y, infoOutOptional)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="retval">
the MediaTrack at position; if the position is above a window associated with the track, this holds the track, where retval info will hold additional information
      </retval>
      <retval id="2" datatype="optional number" retvalname="info">
additional information, if the position is above a windows associated with a track<br/>
1, if it is likely an envelope<br/>
2, if it is likely a track FX
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="screen_x">
the x-position in pixels, from which you want to get the underlying track
      </parameter>
      <parameter id="2" datatype="integer" parmname="screen_y">
the y-position in pixels, from which you want to get the underlying track
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackGUID</slug>
    <functioncall prog_lang="cpp">GUID* GetTrackGUID(MediaTrack* tr)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackGUID(#retguid, MediaTrack tr)</functioncall>
    <functioncall prog_lang="lua">string GUID = reaper.GetTrackGUID(MediaTrack tr)</functioncall>
    <functioncall prog_lang="python">GUID RPR_GetTrackGUID(MediaTrack tr)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="GUID" retvalname="GUID">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackMediaItem</slug>
    <functioncall prog_lang="cpp">MediaItem* GetTrackMediaItem(MediaTrack* tr, int itemidx)</functioncall>
    <functioncall prog_lang="eel">MediaItem GetTrackMediaItem(MediaTrack tr, int itemidx)</functioncall>
    <functioncall prog_lang="lua">MediaItem = reaper.GetTrackMediaItem(MediaTrack tr, integer itemidx)</functioncall>
    <functioncall prog_lang="python">MediaItem RPR_GetTrackMediaItem(MediaTrack tr, Int itemidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="MediaItem">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="itemidx" parmname="itemidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackMIDILyrics</slug>
    <functioncall prog_lang="cpp">bool GetTrackMIDILyrics(MediaTrack* track, int flag, char* bufWantNeedBig, int* bufWantNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackMIDILyrics(MediaTrack track, int flag, #bufWant)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string bufWant = reaper.GetTrackMIDILyrics(MediaTrack track, integer flag, string bufWant)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int flag, String bufWantNeedBig, Int bufWantNeedBig_sz) = RPR_GetTrackMIDILyrics(track, flag, bufWantNeedBig, bufWantNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      Lua=5.3
    </requires>
    <description>
<p>Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&amp;amp;1: double tabs at the end of each measure and triple tabs when skipping measures, flag&amp;amp;2: each lyric is preceded by its beat position in the project (example with flag=2: “1.1.2for measure 1 beat 21.1for measure 2 beat 1”). See <a href="#SetTrackMIDILyrics">SetTrackMIDILyrics</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="bufWantNeedBig_sz" retvalname="bufWantNeedBig_sz">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="flag" parmname="flag">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackMIDINoteName</slug>
    <functioncall prog_lang="cpp">const char* GetTrackMIDINoteName(int track, int pitch, int chan)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackMIDINoteName(#retval, int track, int pitch, int chan)</functioncall>
    <functioncall prog_lang="lua">string = reaper.GetTrackMIDINoteName(integer track, integer pitch, integer chan)</functioncall>
    <functioncall prog_lang="python">String RPR_GetTrackMIDINoteName(Int track, Int pitch, Int chan)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>see <a href="#GetTrackMIDINoteNameEx">GetTrackMIDINoteNameEx</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="pitch" parmname="pitch">

      </parameter>
      <parameter id="3" datatype="chan" parmname="chan">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackMIDINoteNameEx</slug>
    <functioncall prog_lang="cpp">const char* GetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackMIDINoteNameEx(#retval, ReaProject proj, MediaTrack track, int pitch, int chan)</functioncall>
    <functioncall prog_lang="lua">string = reaper.GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan)</functioncall>
    <functioncall prog_lang="python">String RPR_GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan)</functioncall>
    <requires>
      Reaper=5.92
      Lua=5.3
    </requires>
    <description>
<p>Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See <a href="#SetTrackMIDINoteNameEx">SetTrackMIDINoteNameEx</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="track" parmname="track">


      </parameter>
      <parameter id="3" datatype="pitch" parmname="pitch">


      </parameter>
      <parameter id="4" datatype="chan" parmname="chan">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackMIDINoteRange</slug>
    <functioncall prog_lang="cpp">void GetTrackMIDINoteRange(ReaProject* proj, MediaTrack* track, int* note_loOut, int* note_hiOut)</functioncall>
    <functioncall prog_lang="eel">GetTrackMIDINoteRange(ReaProject proj, MediaTrack track, int &amp;amp;note_lo, int &amp;amp;note_hi)</functioncall>
    <functioncall prog_lang="lua">number note_lo retval, number note_hi = reaper.GetTrackMIDINoteRange(ReaProject proj, MediaTrack track)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, MediaTrack track, Int note_loOut, Int note_hiOut) = RPR_GetTrackMIDINoteRange(proj, track, note_loOut, note_hiOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="note_lo" retvalname="retval">

      </retval>
      <retval id="2" datatype="note_hi" retvalname="note_hi">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="track" parmname="track">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackName</slug>
    <functioncall prog_lang="cpp">bool GetTrackName(MediaTrack* track, char* bufOut, int bufOut_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackName(MediaTrack track, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetTrackName(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String bufOut, Int bufOut_sz) = RPR_GetTrackName(track, bufOut, bufOut_sz)</functioncall>
    <requires>
      Reaper=5.974
      Lua=5.3
    </requires>
    <description>
Returns &quot;MASTER&quot; for master track, &quot;Track N&quot; if track has no name.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">
true, if successful
      </retval>
      <retval id="2" datatype="buf" retvalname="buf">
the name of the track; &quot;MASTER&quot; for master-track; &quot;Track N&quot; if the track has no given name yet(N=tracknumber)
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack, whose name you want to know
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     name
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackNumMediaItems</slug>
    <functioncall prog_lang="cpp">int GetTrackNumMediaItems(MediaTrack* tr)</functioncall>
    <functioncall prog_lang="eel">int GetTrackNumMediaItems(MediaTrack tr)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetTrackNumMediaItems(MediaTrack tr)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetTrackNumMediaItems(MediaTrack tr)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the number of MediaItems of a MediaTrack
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of MediaItems in the MediaTrack
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">
the MediaTrack, whose number of MediaItems you want to count
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     count
     item
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackNumSends</slug>
    <functioncall prog_lang="cpp">int GetTrackNumSends(MediaTrack* tr, int category)</functioncall>
    <functioncall prog_lang="eel">int GetTrackNumSends(MediaTrack tr, int category)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GetTrackNumSends(MediaTrack tr, integer category)</functioncall>
    <functioncall prog_lang="python">Int RPR_GetTrackNumSends(MediaTrack tr, Int category)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns number of sends/receives/hardware outputs
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of sends/receives/hardware outputs
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">
the MediaTrack, whose number of sends/receives/hardware outputs you want to know
      </parameter>
      <parameter id="2" datatype="category" parmname="category">
&amp;lt;0 for receives; 0=sends; &amp;gt;0 for hardware outputs
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     count
     send
     receive
     hardware output
     hwout
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackReceiveName</slug>
    <functioncall prog_lang="cpp">bool GetTrackReceiveName(MediaTrack* track, int recv_index, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackReceiveName(MediaTrack track, int recv_index, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetTrackReceiveName(MediaTrack track, integer recv_index, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int recv_index, String buf, Int buf_sz) = RPR_GetTrackReceiveName(track, recv_index, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#GetTrackSendName">GetTrackSendName</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="recv_index" parmname="recv_index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackReceiveUIMute</slug>
    <functioncall prog_lang="cpp">bool GetTrackReceiveUIMute(MediaTrack* track, int recv_index, bool* muteOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackReceiveUIMute(MediaTrack track, int recv_index, bool &amp;amp;mute)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean mute = reaper.GetTrackReceiveUIMute(MediaTrack track, integer recv_index)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int recv_index, Boolean muteOut) = RPR_GetTrackReceiveUIMute(track, recv_index, muteOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#GetTrackSendUIMute">GetTrackSendUIMute</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="mute" retvalname="mute">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="recv_index" parmname="recv_index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackReceiveUIVolPan</slug>
    <functioncall prog_lang="cpp">bool GetTrackReceiveUIVolPan(MediaTrack* track, int recv_index, double* volumeOut, double* panOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackReceiveUIVolPan(MediaTrack track, int recv_index, &amp;amp;volume, &amp;amp;pan)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number volume, number pan = reaper.GetTrackReceiveUIVolPan(MediaTrack track, integer recv_index)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int recv_index, Float volumeOut, Float panOut) = RPR_GetTrackReceiveUIVolPan(track, recv_index, volumeOut, panOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#GetTrackSendUIVolPan">GetTrackSendUIVolPan</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="volume" retvalname="volume">

      </retval>
      <retval id="3" datatype="pan" retvalname="pan">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="recv_index" parmname="recv_index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackSendInfo_Value</slug>
    <functioncall prog_lang="cpp">double GetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname)</functioncall>
    <functioncall prog_lang="eel">double GetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, &quot;parmname&quot;)</functioncall>
    <functioncall prog_lang="lua">number = reaper.GetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname)</functioncall>
    <functioncall prog_lang="python">Float RPR_GetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname)</functioncall>
    <requires>
      Reaper=5.974
      Lua=5.3
    </requires>
    <description>
<p>Get send/receive/hardware output numerical-value attributes. category is &amp;lt;0 for receives, 0=sends, &amp;gt;0 for hardware outputs parameter names:</p>
<pre><code>B\_MUTE : bool \*
B\_PHASE : bool \*, true to flip phase
B\_MONO : bool \*
D\_VOL : double \*, 1.0 = +0dB etc
D\_PAN : double \*, -1..+1
D\_PANLAW : double \*,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I\_SENDMODE : int \*, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I\_AUTOMODE : int \* : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I\_SRCCHAN : int \*, index,&amp;amp;amp;1024=mono, -1 for none
I\_DSTCHAN : int \*, index, &amp;amp;amp;1024=mono, otherwise stereo pair, hwout:&amp;amp;amp;512=rearoute
I\_MIDIFLAGS : int \*, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs
P\_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs
P\_ENV:&amp;amp;lt;envchunkname : read only, returns TrackEnvelope *. To get a specific TrackEnvelope, call with :&amp;amp;lt;VOLENV, :&amp;amp;lt;PANENV, etc appended.</code></pre>
<p>See <a href="#CreateTrackSend">CreateTrackSend</a>, <a href="#RemoveTrackSend">RemoveTrackSend</a>, <a href="#GetTrackNumSends">GetTrackNumSends</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="category" parmname="category">

      </parameter>
      <parameter id="3" datatype="sendidx" parmname="sendidx">

      </parameter>
      <parameter id="4" datatype="parmname" parmname="parmname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackSendName</slug>
    <functioncall prog_lang="cpp">bool GetTrackSendName(MediaTrack* track, int send_index, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackSendName(MediaTrack track, int send_index, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.GetTrackSendName(MediaTrack track, integer send_index, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int send_index, String buf, Int buf_sz) = RPR_GetTrackSendName(track, send_index, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>send_idx&amp;gt;=0 for hw outputs, &amp;gt;=nb_of_hw_outputs for sends. See <a href="#GetTrackReceiveName">GetTrackReceiveName</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="send_index" parmname="send_index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>GetTrackSendUIMute</slug>
    <functioncall prog_lang="cpp">bool GetTrackSendUIMute(MediaTrack* track, int send_index, bool* muteOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackSendUIMute(MediaTrack track, int send_index, bool &amp;amp;mute)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean mute = reaper.GetTrackSendUIMute(MediaTrack track, integer send_index)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int send_index, Boolean muteOut) = RPR_GetTrackSendUIMute(track, send_index, muteOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>send_idx&amp;gt;=0 for hw outputs, &amp;gt;=nb_of_hw_outputs for sends. See <a href="#GetTrackReceiveUIMute">GetTrackReceiveUIMute</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="mute" retvalname="mute">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="send_index" parmname="send_index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackSendUIVolPan</slug>
    <functioncall prog_lang="cpp">bool GetTrackSendUIVolPan(MediaTrack* track, int send_index, double* volumeOut, double* panOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackSendUIVolPan(MediaTrack track, int send_index, &amp;amp;volume, &amp;amp;pan)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number volume, number pan = reaper.GetTrackSendUIVolPan(MediaTrack track, integer send_index)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int send_index, Float volumeOut, Float panOut) = RPR_GetTrackSendUIVolPan(track, send_index, volumeOut, panOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>send_idx&amp;gt;=0 for hw outputs, &amp;gt;=nb_of_hw_outputs for sends. See <a href="#GetTrackReceiveUIVolPan">GetTrackReceiveUIVolPan</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="volume" retvalname="volume">

      </retval>
      <retval id="3" datatype="pan" retvalname="pan">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="send_index" parmname="send_index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackState</slug>
    <functioncall prog_lang="cpp">const char* GetTrackState(MediaTrack* track, int* flagsOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackState(#retval, MediaTrack track, int &amp;amp;flags)</functioncall>
    <functioncall prog_lang="lua">string retval, number flags = reaper.GetTrackState(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">(String retval, MediaTrack track, Int flagsOut) = RPR_GetTrackState(track, flagsOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets track state, returns track name.<br/>
flags will be set to:<br/>
&amp;amp;1=folder<br/>
&amp;amp;2=selected<br/>
&amp;amp;4=has fx enabled<br/>
&amp;amp;8=muted<br/>
&amp;amp;16=soloed<br/>
&amp;amp;32=SIP'd (with &amp;amp;16)<br/>
&amp;amp;64=rec armed<br/>
&amp;amp;128=rec monitoring on<br/>
&amp;amp;256=rec monitoring auto<br/>
&amp;amp;512=hide from TCP<br/>
&amp;amp;1024=hide from MCP
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="flags" retvalname="flags">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackStateChunk</slug>
    <functioncall prog_lang="cpp">bool GetTrackStateChunk(MediaTrack* track, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackStateChunk(MediaTrack track, #str, bool isundo)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string str = reaper.GetTrackStateChunk(MediaTrack track, string str, boolean isundo)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetTrackStateChunk(track, strNeedBig, strNeedBig_sz, isundoOptional)</functioncall>
    <requires>
      Reaper=5.982
      Lua=5.3
    </requires>
    <description>
<p>Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="str" retvalname="str">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="isundo" parmname="isundo">

      </parameter>
      <parameter id="3" datatype="isundo" parmname="isundo">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackUIMute</slug>
    <functioncall prog_lang="cpp">bool GetTrackUIMute(MediaTrack* track, bool* muteOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackUIMute(MediaTrack track, bool &amp;amp;mute)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean mute = reaper.GetTrackUIMute(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Boolean muteOut) = RPR_GetTrackUIMute(track, muteOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="mute" retvalname="mute">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackUIPan</slug>
    <functioncall prog_lang="cpp">bool GetTrackUIPan(MediaTrack* track, double* pan1Out, double* pan2Out, int* panmodeOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackUIPan(MediaTrack track, &amp;amp;pan1, &amp;amp;pan2, int &amp;amp;panmode)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number pan1, number pan2, number panmode = reaper.GetTrackUIPan(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Float pan1Out, Float pan2Out, Int panmodeOut) = RPR_GetTrackUIPan(track, pan1Out, pan2Out, panmodeOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="pan1" retvalname="pan1">

      </retval>
      <retval id="3" datatype="pan2" retvalname="pan2">

      </retval>
      <retval id="4" datatype="panmode" retvalname="panmode">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackUIVolPan</slug>
    <functioncall prog_lang="cpp">bool GetTrackUIVolPan(MediaTrack* track, double* volumeOut, double* panOut)</functioncall>
    <functioncall prog_lang="eel">bool GetTrackUIVolPan(MediaTrack track, &amp;amp;volume, &amp;amp;pan)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number volume, number pan = reaper.GetTrackUIVolPan(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Float volumeOut, Float panOut) = RPR_GetTrackUIVolPan(track, volumeOut, panOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="volume" retvalname="volume">

      </retval>
      <retval id="3" datatype="pan" retvalname="pan">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetUnderrunTime</slug>
    <functioncall prog_lang="cpp">void GetUnderrunTime(unsigned int* audio_xrunOutOptional, unsigned int* media_xrunOutOptional, unsigned int* curtimeOutOptional)</functioncall>
    <functioncall prog_lang="eel">GetUnderrunTime(optional unsigned int &amp;amp;audio_xrun, optional unsigned int &amp;amp;media_xrun, optional unsigned int &amp;amp;curtime)</functioncall>
    <functioncall prog_lang="lua">optional number audio_xrun retval, optional number media_xrun, optional number curtime = reaper.GetUnderrunTime()</functioncall>
    <functioncall prog_lang="python">RPR_GetUnderrunTime(unsigned int audio_xrunOutOptional, unsigned int media_xrunOutOptional, unsigned int curtimeOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <retvals>
      <retval id="1" datatype="audio_xrun" retvalname="retval">

      </retval>
      <retval id="2" datatype="media_xrun" retvalname="media_xrun">

      </retval>
      <retval id="3" datatype="curtime" retvalname="curtime">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetUserFileNameForRead</slug>
    <functioncall prog_lang="cpp">bool GetUserFileNameForRead(char* filenameNeed4096, const char* title, const char* defext)</functioncall>
    <functioncall prog_lang="eel">bool GetUserFileNameForRead(#filenameNeed4096, &quot;title&quot;, &quot;defext&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string filenameNeed4096 = reaper.GetUserFileNameForRead(string filenameNeed4096, string title, string defext)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, String filenameNeed4096, String title, String defext) = RPR_GetUserFileNameForRead(filenameNeed4096, title, defext)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Opens a filerequester, where a user can select a file.<br/>
The requester only returns the file, but doesn't open or write to it. That said, this function can be used for both use-cases, BUT: keep in mind, that it shows an &quot;open&quot;-button, even if you want to use it in code for saving a file. You also can't use it for &quot;create new file&quot;-usecases, as you can't choose nonexisting files.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">
true, if the user selected a file; false if the user canceled the dialog
      </retval>
      <retval id="2" datatype="filenameNeed4096" retvalname="filenameNeed4096">
the filename including the full absolute path of the file the user selected
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="filenameNeed4096" parmname="filenameNeed4096">
default-filename the requester uses, until the user selects another file.
      </parameter>
      <parameter id="2" datatype="title" parmname="title">
title of the file-requester-window
      </parameter>
      <parameter id="3" datatype="defext" parmname="defext">
the filter for the fileextensions. Only files with an extension defined in defext are shown.<br/>
examples:<br/>
&quot;&quot;, all files<br/>
&quot;*&quot;, all files<br/>
&quot;ini&quot;, only .ini-files<br/>
&quot;*.ini&quot;, only .ini-files<br/>
&quot;*.txt; *.ini; *.exe&quot;, shows .txt; .ini; .exe-files
      </parameter>
    </parameters>
    <tags>
     user
     interface
     file
     requester
     dialog
     open
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetUserInputs</slug>
    <functioncall prog_lang="cpp">bool GetUserInputs(const char* title, int num_inputs, const char* captions_csv, char* retvals_csv, int retvals_csv_sz)</functioncall>
    <functioncall prog_lang="eel">bool GetUserInputs(&quot;title&quot;, int num_inputs, &quot;captions_csv&quot;, #retvals_csv)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string retvals_csv = reaper.GetUserInputs(string title, integer num_inputs, string captions_csv, string retvals_csv)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, String title, Int num_inputs, String captions_csv, String retvals_csv, Int retvals_csv_sz) = RPR_GetUserInputs(title, num_inputs, captions_csv, retvals_csv, retvals_csv_sz)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Opens a window with input-fields to get values from the user. If a caption begins with *, for example “*password”, the edit field will not display the input text. Maximum fields is 16. Values are returned as a comma/custom separator-separated string. Returns false if the user canceled the dialog.</p>
<p>You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields(separator=is recommended).</p>
<p>Example:</p>
<p>retval, retvals_csv = reaper.GetUserInputs(“Title”, 2, “Hello,World, separator=”, “defaultvalue12”)</p>
<p>will return the values input by the user, separated by a newline.</p>
<p>is recommended, as this allows the user entering everything, a one-lined-inputbox can handle.</p>
<p>Important: the separator-field in the captions has no effect on how captions are separated from each other. They still need to be separated by commas!</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">
did the user click OK in the dialog(true) or close/cancel the dialog(false)
      </retval>
      <retval id="2" datatype="retvals_csv" retvalname="retvals_csv">
the data from each of the input-fields, separated by a comma , or a separator you chose.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="title" parmname="title">
title of the window
      </parameter>
      <parameter id="2" datatype="num_inputs" parmname="num_inputs">
number of input-fields, 1-16.
      </parameter>
      <parameter id="3" datatype="captions_csv" parmname="captions_csv">
a string with the captions for each input-field, each separated by a comma. Can be fewer than num_inputs. If a caption begins with *, the inputfield will display * instead of characters(for i.e. passwords).
      </parameter>
      <parameter id="4" datatype="retvals_csv" parmname="retvals_csv">
default-values for each input-field, separated by a comma or a separator you chose.
      </parameter>
    </parameters>
    <tags>
     user
     interface
     input
     values
     csv
     dialog
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GoToMarker</slug>
    <functioncall prog_lang="cpp">void GoToMarker(ReaProject* proj, int marker_index, bool use_timeline_order)</functioncall>
    <functioncall prog_lang="eel">GoToMarker(ReaProject proj, int marker_index, bool use_timeline_order)</functioncall>
    <functioncall prog_lang="lua">reaper.GoToMarker(ReaProject proj, integer marker_index, boolean use_timeline_order)</functioncall>
    <functioncall prog_lang="python">RPR_GoToMarker(ReaProject proj, Int marker_index, Boolean use_timeline_order)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Go to marker. Move Editcursor to a given marker. When playing, the playcursor moves to the marker as well.</p>
<p>For Regions, use <a href="#GoToRegion">GoToRegion</a>.</p>

    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="marker_index" parmname="marker_index">
<p>the markerindex, where you want to go to.</p>

      </parameter>
      <parameter id="3" datatype="use_timeline_order" parmname="use_timeline_order">
<p>false, use the shown-markernumber as marker_index; true, use markers in timelineorder, ignoring the shown-markernumber</p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     goto
     marker
     play
     cursor
     editcursor
     playcursor
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GoToRegion</slug>
    <functioncall prog_lang="cpp">void GoToRegion(ReaProject* proj, int region_index, bool use_timeline_order)</functioncall>
    <functioncall prog_lang="eel">GoToRegion(ReaProject proj, int region_index, bool use_timeline_order)</functioncall>
    <functioncall prog_lang="lua">reaper.GoToRegion(ReaProject proj, integer region_index, boolean use_timeline_order)</functioncall>
    <functioncall prog_lang="python">RPR_GoToRegion(ReaProject proj, Int region_index, Boolean use_timeline_order)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Go to beginning of a region.<br/>
Seek to region after current region finishes playing (smooth seek). 
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="region_index" parmname="region_index">
<p>the regionindex, where you want to got to.</p>

      </parameter>
      <parameter id="3" datatype="use_timeline_order" parmname="use_timeline_order">
<p>false, use the shown-regionnumber as region_index; true, use regions in timelineorder, ignoring the shown-regionnumber</p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     goto
     region
     play
     cursor
     editcursor
     playcursor
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GR_SelectColor</slug>
    <functioncall prog_lang="cpp">int GR_SelectColor(HWND hwnd, int* colorOut)</functioncall>
    <functioncall prog_lang="eel">int GR_SelectColor(HWND hwnd, int &amp;amp;color)</functioncall>
    <functioncall prog_lang="lua">integer retval, number color = reaper.GR_SelectColor(HWND hwnd)</functioncall>
    <functioncall prog_lang="python">(Int retval, HWND hwnd, Int colorOut) = RPR_GR_SelectColor(hwnd, colorOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">
1, user chose a color; 0, user canceled dialog
      </retval>
      <retval id="2" datatype="color" retvalname="color">
the returned color as a native-color-value.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="hwnd" parmname="hwnd">
the window, in which to open the dialog. Nil is allowed in Lua.
      </parameter>
    </parameters>
    <tags>
     userinterface
     color
     dialog
     chooser
     native
     hwnd
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GSC_mainwnd</slug>
    <functioncall prog_lang="cpp">int GSC_mainwnd(int t)</functioncall>
    <functioncall prog_lang="eel">int GSC_mainwnd(int t)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.GSC_mainwnd(integer t)</functioncall>
    <functioncall prog_lang="python">Int RPR_GSC_mainwnd(Int t)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
this is just like win32 GetSysColor() but can have overrides.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="t" parmname="t">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>guidToString</slug>
    <functioncall prog_lang="cpp">void guidToString(const GUID* g, char* destNeed64)</functioncall>
    <functioncall prog_lang="eel">guidToString(&quot;gGUID&quot;, #destNeed64)</functioncall>
    <functioncall prog_lang="lua">string destNeed64 = reaper.guidToString(string gGUID, string destNeed64)</functioncall>
    <functioncall prog_lang="python">(const GUID g, String destNeed64) = RPR_guidToString(g, destNeed64)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
dest should be at least 64 chars long to be safe
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="destNeed64" retvalname="destNeed64">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="gGUID" parmname="gGUID">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>HasExtState</slug>
    <functioncall prog_lang="cpp">bool HasExtState(const char* section, const char* key)</functioncall>
    <functioncall prog_lang="eel">bool HasExtState(&quot;section&quot;, &quot;key&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.HasExtState(string section, string key)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_HasExtState(String section, String key)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns true if there exists an extended state value for a specific section and key. See <a href="#SetExtState">SetExtState</a>, <a href="#GetExtState">GetExtState</a>, <a href="#DeleteExtState">DeleteExtState</a>.</p>

    </description>
    <chapter_context>
      Extended States
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">

      </parameter>
      <parameter id="2" datatype="key" parmname="key">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>HasTrackMIDIPrograms</slug>
    <functioncall prog_lang="cpp">const char* HasTrackMIDIPrograms(int track)</functioncall>
    <functioncall prog_lang="eel">bool HasTrackMIDIPrograms(#retval, int track)</functioncall>
    <functioncall prog_lang="lua">string = reaper.HasTrackMIDIPrograms(integer track)</functioncall>
    <functioncall prog_lang="python">String RPR_HasTrackMIDIPrograms(Int track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>HasTrackMIDIProgramsEx</slug>
    <functioncall prog_lang="cpp">const char* HasTrackMIDIProgramsEx(ReaProject* proj, MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">bool HasTrackMIDIProgramsEx(#retval, ReaProject proj, MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">string = reaper.HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)</functioncall>
    <functioncall prog_lang="python">String RPR_HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="track" parmname="track">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Help_Set</slug>
    <functioncall prog_lang="cpp">void Help_Set(const char* helpstring, bool is_temporary_help)</functioncall>
    <functioncall prog_lang="eel">Help_Set(&quot;helpstring&quot;, bool is_temporary_help)</functioncall>
    <functioncall prog_lang="lua">reaper.Help_Set(string helpstring, boolean is_temporary_help)</functioncall>
    <functioncall prog_lang="python">RPR_Help_Set(String helpstring, Boolean is_temporary_help)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Displays an information in the help and information-display, underneath the TCP(might be missing, in certain themes).
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="helpstring" parmname="helpstring">
the string to display
      </parameter>
      <parameter id="2" datatype="is_temporary_help" parmname="is_temporary_help">
true, show until another message is displayed; false, show permanently, every time no other message is displayed.
      </parameter>
    </parameters>
    <tags>
     reaper
     api
     helper
     display
     help
     information
     message
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>image_resolve_fn</slug>
    <functioncall prog_lang="cpp">void image_resolve_fn(const char* in, char* out, int out_sz)</functioncall>
    <functioncall prog_lang="eel">image_resolve_fn(&quot;in&quot;, #out)</functioncall>
    <functioncall prog_lang="lua">string out = reaper.image_resolve_fn(string in, string out)</functioncall>
    <functioncall prog_lang="python">(String in, String out, Int out_sz) = RPR_image_resolve_fn(in, out, out_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="out" retvalname="out">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="in" parmname="in">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>InsertAutomationItem</slug>
    <functioncall prog_lang="cpp">int InsertAutomationItem(TrackEnvelope* env, int pool_id, double position, double length)</functioncall>
    <functioncall prog_lang="eel">int InsertAutomationItem(TrackEnvelope env, int pool_id, position, length)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.InsertAutomationItem(TrackEnvelope env, integer pool_id, number position, number length)</functioncall>
    <functioncall prog_lang="python">Int RPR_InsertAutomationItem(TrackEnvelope env, Int pool_id, Float position, Float length)</functioncall>
    <requires>
      Reaper=5.96
      Lua=5.3
    </requires>
    <description>
<p>Insert a new automation item. pool_id &amp;lt; 0 collects existing envelope points into the automation item; if pool_id is &amp;gt;= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See <a href="#GetSetAutomationItemInfo">GetSetAutomationItemInfo</a>.</p>

    </description>
    <chapter_context>
      Automation Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="env" parmname="env">

      </parameter>
      <parameter id="2" datatype="pool_id" parmname="pool_id">

      </parameter>
      <parameter id="3" datatype="position" parmname="position">

      </parameter>
      <parameter id="4" datatype="length" parmname="length">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>InsertEnvelopePoint</slug>
    <functioncall prog_lang="cpp">bool InsertEnvelopePoint(TrackEnvelope* envelope, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</functioncall>
    <functioncall prog_lang="eel">bool InsertEnvelopePoint(TrackEnvelope envelope, time, value, int shape, tension, bool selected, optional bool noSortIn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.InsertEnvelopePoint(TrackEnvelope envelope, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePoint(envelope, time, value, shape, tension, selected, noSortInOptional)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="time" parmname="time">

      </parameter>
      <parameter id="3" datatype="value" parmname="value">

      </parameter>
      <parameter id="4" datatype="shape" parmname="shape">

      </parameter>
      <parameter id="5" datatype="tension" parmname="tension">

      </parameter>
      <parameter id="6" datatype="selected" parmname="selected">

      </parameter>
      <parameter id="7" datatype="noSortIn" parmname="noSortIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>InsertEnvelopePointEx</slug>
    <functioncall prog_lang="cpp">bool InsertEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</functioncall>
    <functioncall prog_lang="eel">bool InsertEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, time, value, int shape, tension, bool selected, optional bool noSortIn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.InsertEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePointEx(envelope, autoitem_idx, time, value, shape, tension, selected, noSortInOptional)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration, even if the automation item is trimmed so that not all points are visible. Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.</p>
<p>See <a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a>, <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="autoitem_idx" parmname="autoitem_idx">

      </parameter>
      <parameter id="3" datatype="time" parmname="time">

      </parameter>
      <parameter id="4" datatype="value" parmname="value">

      </parameter>
      <parameter id="5" datatype="shape" parmname="shape">

      </parameter>
      <parameter id="6" datatype="tension" parmname="tension">

      </parameter>
      <parameter id="7" datatype="selected" parmname="selected">

      </parameter>
      <parameter id="8" datatype="noSortIn" parmname="noSortIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>InsertMedia</slug>
    <functioncall prog_lang="cpp">int InsertMedia(const char* file, int mode)</functioncall>
    <functioncall prog_lang="eel">int InsertMedia(&quot;file&quot;, int mode)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.InsertMedia(string file, integer mode)</functioncall>
    <functioncall prog_lang="python">Int RPR_InsertMedia(String file, Int mode)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
mode: <br/>
0=add to current track, <br/>
1=add new track, <br/>
3=add to selected items as takes, <br/>
&amp;amp;4=stretch/loop to fit time sel, <br/>
&amp;amp;8=try to match tempo 1x, <br/>
&amp;amp;16=try to match tempo 0.5x, <br/>
&amp;amp;32=try to match tempo 2x, <br/>
&amp;amp;64=don't preserve pitch when matching tempo, <br/>
&amp;amp;128=no loop/section if startpct/endpct set, <br/>
&amp;amp;256=force loop regardless of global preference for looping imported items. <br/>
&amp;amp;512=use high word as absolute track index if mode&amp;amp;3==0.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="file" parmname="file">

      </parameter>
      <parameter id="2" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>InsertMediaSection</slug>
    <functioncall prog_lang="cpp">int InsertMediaSection(const char* file, int mode, double startpct, double endpct, double pitchshift)</functioncall>
    <functioncall prog_lang="eel">int InsertMediaSection(&quot;file&quot;, int mode, startpct, endpct, pitchshift)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.InsertMediaSection(string file, integer mode, number startpct, number endpct, number pitchshift)</functioncall>
    <functioncall prog_lang="python">Int RPR_InsertMediaSection(String file, Int mode, Float startpct, Float endpct, Float pitchshift)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="file" parmname="file">

      </parameter>
      <parameter id="2" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="3" datatype="startpct" parmname="startpct">

      </parameter>
      <parameter id="4" datatype="endpct" parmname="endpct">

      </parameter>
      <parameter id="5" datatype="pitchshift" parmname="pitchshift">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>InsertTrackAtIndex</slug>
    <functioncall prog_lang="cpp">void InsertTrackAtIndex(int idx, bool wantDefaults)</functioncall>
    <functioncall prog_lang="eel">InsertTrackAtIndex(int idx, bool wantDefaults)</functioncall>
    <functioncall prog_lang="lua">reaper.InsertTrackAtIndex(integer idx, boolean wantDefaults)</functioncall>
    <functioncall prog_lang="python">RPR_InsertTrackAtIndex(Int idx, Boolean wantDefaults)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>inserts a track at idx,of course this will be clamped to 0..<a href="#GetNumTracks">GetNumTracks</a>().</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="idx" parmname="idx">
the index, in which to insert the track; 0, insert before the first track.
      </parameter>
      <parameter id="2" datatype="wantDefaults" parmname="wantDefaults">
true, default envelopes/FX; false, no enabled FX/envelopes
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     insert
     track
     index
     default
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>IsMediaExtension</slug>
    <functioncall prog_lang="cpp">bool IsMediaExtension(const char* ext, bool wantOthers)</functioncall>
    <functioncall prog_lang="eel">bool IsMediaExtension(&quot;ext&quot;, bool wantOthers)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.IsMediaExtension(string ext, boolean wantOthers)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_IsMediaExtension(String ext, Boolean wantOthers)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Tests a file extension (i.e. &quot;wav&quot; or &quot;mid&quot;) to see if it's a media extension.<br/>
If wantOthers is set, then &quot;RPP&quot;, &quot;TXT&quot; and other project-type formats will also pass.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ext" parmname="ext">

      </parameter>
      <parameter id="2" datatype="wantOthers" parmname="wantOthers">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>IsMediaItemSelected</slug>
    <functioncall prog_lang="cpp">bool IsMediaItemSelected(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">bool IsMediaItemSelected(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.IsMediaItemSelected(MediaItem item)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_IsMediaItemSelected(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get, if a MediaItem is selected or not.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, MediaItem is selected; false, MediaItem is not selected
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">
the MediaItem, whose selected-state you want to know
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     selected
     state
     unselected
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>IsProjectDirty</slug>
    <functioncall prog_lang="cpp">int IsProjectDirty(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int IsProjectDirty(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.IsProjectDirty(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_IsProjectDirty(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.<br/>
<br/>
A project becomes dirty, as soon as it was changed since creation/last saving.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the state, if a project needs saving or not; 0, needs no saving; 1, needs saving
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     get
     dirty
     state
     saved
     unsaved
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>IsTrackSelected</slug>
    <functioncall prog_lang="cpp">bool IsTrackSelected(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">bool IsTrackSelected(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.IsTrackSelected(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_IsTrackSelected(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get, if a MediaTrack is selected or not.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, MediaTrack is selected; false, MediaTrack is not selected
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack, whose selection-state you want to know
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     state
     selection
     deselection
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>IsTrackVisible</slug>
    <functioncall prog_lang="cpp">bool IsTrackVisible(MediaTrack* track, bool mixer)</functioncall>
    <functioncall prog_lang="eel">bool IsTrackVisible(MediaTrack track, bool mixer)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.IsTrackVisible(MediaTrack track, boolean mixer)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_IsTrackVisible(MediaTrack track, Boolean mixer)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets visibility-state of a MediaTrack.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, MediaTrack is visible; false, MediaTrack is invisible
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack, whose visibility-state you want to know
      </parameter>
      <parameter id="2" datatype="mixer" parmname="mixer">
true, visibility-state of the MediaTrack in the mixer; false, visibility-state of the MediaTrack in the TrackControlPanel
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     visible
     get
     invisible
     mixer
     track control panel
     tcp
     mcp
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>joystick_create</slug>
    <functioncall prog_lang="cpp">joystick_device* joystick_create(const GUID* guid)</functioncall>
    <functioncall prog_lang="eel">joystick_device joystick_create(&quot;guidGUID&quot;)</functioncall>
    <functioncall prog_lang="lua">joystick_device = reaper.joystick_create(string guidGUID)</functioncall>
    <functioncall prog_lang="python">joystick_device RPR_joystick_create(const GUID guid)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
creates a joystick device
    </description>
    <chapter_context>
      Joystick Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="joystick_device" retvalname="joystick_device">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="guidGUID" parmname="guidGUID">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>joystick_destroy</slug>
    <functioncall prog_lang="cpp">void joystick_destroy(joystick_device* device)</functioncall>
    <functioncall prog_lang="eel">joystick_destroy(joystick_device device)</functioncall>
    <functioncall prog_lang="lua">reaper.joystick_destroy(joystick_device device)</functioncall>
    <functioncall prog_lang="python">RPR_joystick_destroy(joystick_device device)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
destroys a joystick device
    </description>
    <chapter_context>
      Joystick Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="device" parmname="device">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>joystick_enum</slug>
    <functioncall prog_lang="cpp">const char* joystick_enum(int index, const char** namestrOutOptional)</functioncall>
    <functioncall prog_lang="eel">bool joystick_enum(#retval, int index, optional #namestr)</functioncall>
    <functioncall prog_lang="lua">string retval, optional string namestr = reaper.joystick_enum(integer index)</functioncall>
    <functioncall prog_lang="python">String RPR_joystick_enum(Int index, String namestrOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
enumerates installed devices, returns GUID as a string
    </description>
    <chapter_context>
      Joystick Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="namestr">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="index" parmname="index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>joystick_getaxis</slug>
    <functioncall prog_lang="cpp">double joystick_getaxis(joystick_device* dev, int axis)</functioncall>
    <functioncall prog_lang="eel">double joystick_getaxis(joystick_device dev, int axis)</functioncall>
    <functioncall prog_lang="lua">number = reaper.joystick_getaxis(joystick_device dev, integer axis)</functioncall>
    <functioncall prog_lang="python">Float RPR_joystick_getaxis(joystick_device dev, Int axis)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns axis value (-1..1)
    </description>
    <chapter_context>
      Joystick Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dev" parmname="dev">

      </parameter>
      <parameter id="2" datatype="axis" parmname="axis">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>joystick_getbuttonmask</slug>
    <functioncall prog_lang="cpp">unsigned int joystick_getbuttonmask(joystick_device* dev)</functioncall>
    <functioncall prog_lang="eel">uint joystick_getbuttonmask(joystick_device dev)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.joystick_getbuttonmask(joystick_device dev)</functioncall>
    <functioncall prog_lang="python">Unknown RPR_joystick_getbuttonmask(joystick_device dev)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns button pressed mask, 1=first button, 2=second...
    </description>
    <chapter_context>
      Joystick Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dev" parmname="dev">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>joystick_getinfo</slug>
    <functioncall prog_lang="cpp">int joystick_getinfo(joystick_device* dev, int* axesOutOptional, int* povsOutOptional)</functioncall>
    <functioncall prog_lang="eel">int joystick_getinfo(joystick_device dev, optional int &amp;amp;axes, optional int &amp;amp;povs)</functioncall>
    <functioncall prog_lang="lua">integer retval, optional number axes, optional number povs = reaper.joystick_getinfo(joystick_device dev)</functioncall>
    <functioncall prog_lang="python">(Int retval, joystick_device dev, Int axesOutOptional, Int povsOutOptional) = RPR_joystick_getinfo(dev, axesOutOptional, povsOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns button count
    </description>
    <chapter_context>
      Joystick Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="axes" retvalname="axes">

      </retval>
      <retval id="3" datatype="povs" retvalname="povs">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dev" parmname="dev">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>joystick_getpov</slug>
    <functioncall prog_lang="cpp">double joystick_getpov(joystick_device* dev, int pov)</functioncall>
    <functioncall prog_lang="eel">double joystick_getpov(joystick_device dev, int pov)</functioncall>
    <functioncall prog_lang="lua">number = reaper.joystick_getpov(joystick_device dev, integer pov)</functioncall>
    <functioncall prog_lang="python">Float RPR_joystick_getpov(joystick_device dev, Int pov)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns POV value (usually 0..655.35, or 655.35 on error)
    </description>
    <chapter_context>
      Joystick Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dev" parmname="dev">

      </parameter>
      <parameter id="2" datatype="pov" parmname="pov">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>joystick_update</slug>
    <functioncall prog_lang="cpp">bool joystick_update(joystick_device* dev)</functioncall>
    <functioncall prog_lang="eel">bool joystick_update(joystick_device dev)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.joystick_update(joystick_device dev)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_joystick_update(joystick_device dev)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)
    </description>
    <chapter_context>
      Joystick Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dev" parmname="dev">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_ClipLine</slug>
    <functioncall prog_lang="cpp">bool LICE_ClipLine(int* pX1Out, int* pY1Out, int* pX2Out, int* pY2Out, int xLo, int yLo, int xHi, int yHi)</functioncall>
    <functioncall prog_lang="eel">bool LICE_ClipLine(int &amp;amp;pX1, int &amp;amp;pY1, int &amp;amp;pX2, int &amp;amp;pY2, int xLo, int yLo, int xHi, int yHi)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number pX1, number pY1, number pX2, number pY2 = reaper.LICE_ClipLine(number pX1, number pY1, number pX2, number pY2, integer xLo, integer yLo, integer xHi, integer yHi)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, Int pX1Out, Int pY1Out, Int pX2Out, Int pY2Out, Int xLo, Int yLo, Int xHi, Int yHi) = RPR_LICE_ClipLine(pX1Out, pY1Out, pX2Out, pY2Out, xLo, yLo, xHi, yHi)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns false if the line is entirely offscreen.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="pX1" retvalname="pX1">

      </retval>
      <retval id="3" datatype="pY1" retvalname="pY1">

      </retval>
      <retval id="4" datatype="pX2" retvalname="pX2">

      </retval>
      <retval id="5" datatype="pY2" retvalname="pY2">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="xLo" parmname="xLo">

      </parameter>
      <parameter id="2" datatype="xLo" parmname="xLo">

      </parameter>
      <parameter id="3" datatype="xLo" parmname="xLo">

      </parameter>
      <parameter id="4" datatype="xLo" parmname="xLo">

      </parameter>
      <parameter id="5" datatype="xLo" parmname="xLo">

      </parameter>
      <parameter id="6" datatype="yLo" parmname="yLo">

      </parameter>
      <parameter id="7" datatype="xHi" parmname="xHi">

      </parameter>
      <parameter id="8" datatype="yHi" parmname="yHi">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Loop_OnArrow</slug>
    <functioncall prog_lang="cpp">bool Loop_OnArrow(ReaProject* project, int direction)</functioncall>
    <functioncall prog_lang="eel">bool Loop_OnArrow(ReaProject project, int direction)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.Loop_OnArrow(ReaProject project, integer direction)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_Loop_OnArrow(ReaProject project, Int direction)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Move the loop selection left or right in steps according to snap-settings(when snap is enabled).
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, snap is enabled; false, snap is disabled
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="project" parmname="project">
<p>the project to be checked for. 0 for current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="direction" parmname="direction">
<p>the direction to move; negative values, move towards start of project; positive values, move towards end of project; 0, keep position</p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     loop
     on arrow
     move
     selection
     snap
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Main_OnCommand</slug>
    <functioncall prog_lang="cpp">void Main_OnCommand(int command, int flag)</functioncall>
    <functioncall prog_lang="eel">Main_OnCommand(int command, int flag)</functioncall>
    <functioncall prog_lang="lua">reaper.Main_OnCommand(integer command, integer flag)</functioncall>
    <functioncall prog_lang="python">RPR_Main_OnCommand(Int command, Int flag)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins’ actions) safely, see <a href="#NamedCommandLookup">NamedCommandLookup</a>(). See <a href="#Main_OnCommandEx">Main_OnCommandEx</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="command" parmname="command">
the command-id of the action, you want to run
      </parameter>
      <parameter id="2" datatype="flag" parmname="flag">
set to 0
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     run
     command
     action
     script
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Main_OnCommandEx</slug>
    <functioncall prog_lang="cpp">void Main_OnCommandEx(int command, int flag, ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">Main_OnCommandEx(int command, int flag, ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">reaper.Main_OnCommandEx(integer command, integer flag, ReaProject proj)</functioncall>
    <functioncall prog_lang="python">RPR_Main_OnCommandEx(Int command, Int flag, ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins’ actions) safely, see <a href="#NamedCommandLookup">NamedCommandLookup</a>().</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="command" parmname="command">
<p>the command-id of the action, you want to run</p>

      </parameter>
      <parameter id="2" datatype="flag" parmname="flag">
<p>0</p>

      </parameter>
      <parameter id="3" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     helperfunctions
     run
     command
     action
     script
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Main_openProject</slug>
    <functioncall prog_lang="cpp">void Main_openProject(const char* name)</functioncall>
    <functioncall prog_lang="eel">Main_openProject(&quot;name&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.Main_openProject(string name)</functioncall>
    <functioncall prog_lang="python">RPR_Main_openProject(String name)</functioncall>
    <requires>
      Reaper=5.983
      Lua=5.3
    </requires>
    <description>
opens a project. <br/>
<br/>
will prompt the user to save unless name is prefixed with 'noprompt:'. <br/>
    example: &quot;noprompt:projectfile.rpp&quot;<br/>
     <br/>
If name is prefixed with 'template:', project file will be loaded as a template.<br/>
    example: &quot;template:projectfile.rpp&quot;<br/>
<br/>
You can combine both: &quot;template:noprompt:projectfile.rpp&quot;<br/>
<br/>
If passed a .RTrackTemplate file, adds the template to the existing project.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="string" parmname="name">
the path and filename of the project/template you want to open
      </parameter>
    </parameters>
    <tags>
     projectmanagement
     open
     project
     template
     filename
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Main_SaveProject</slug>
    <functioncall prog_lang="cpp">void Main_SaveProject(ReaProject* proj, bool forceSaveAsInOptional)</functioncall>
    <functioncall prog_lang="eel">Main_SaveProject(ReaProject proj, bool forceSaveAsIn)</functioncall>
    <functioncall prog_lang="lua">reaper.Main_SaveProject(ReaProject proj, boolean forceSaveAsIn)</functioncall>
    <functioncall prog_lang="python">RPR_Main_SaveProject(ReaProject proj, Boolean forceSaveAsInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Save the project.<br/>
Optional with a save-dialog.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="forceSaveAsIn" parmname="forceSaveAsIn">
<p>false, save the project; true, open save-file-dialog first</p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     save
     project
     save dialog
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Main_UpdateLoopInfo</slug>
    <functioncall prog_lang="cpp">void Main_UpdateLoopInfo(int ignoremask)</functioncall>
    <functioncall prog_lang="eel">Main_UpdateLoopInfo(int ignoremask)</functioncall>
    <functioncall prog_lang="lua">reaper.Main_UpdateLoopInfo(integer ignoremask)</functioncall>
    <functioncall prog_lang="python">RPR_Main_UpdateLoopInfo(Int ignoremask)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="ignoremask" parmname="ignoremask">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MarkProjectDirty</slug>
    <functioncall prog_lang="cpp">void MarkProjectDirty(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">MarkProjectDirty(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">reaper.MarkProjectDirty(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">RPR_MarkProjectDirty(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     need save
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MarkTrackItemsDirty</slug>
    <functioncall prog_lang="cpp">void MarkTrackItemsDirty(MediaTrack* track, MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">MarkTrackItemsDirty(MediaTrack track, MediaItem item)</functioncall>
    <functioncall prog_lang="lua">reaper.MarkTrackItemsDirty(MediaTrack track, MediaItem item)</functioncall>
    <functioncall prog_lang="python">RPR_MarkTrackItemsDirty(MediaTrack track, MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
If track is supplied, item is ignored
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack that you want to mark as dirty
      </parameter>
      <parameter id="2" datatype="item" parmname="item">
if no MediaTrack is given, use this MediaItem to mark as dirty
      </parameter>
    </parameters>
    <tags>
     miscellaneous
     track
     item
     dirty
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Master_GetPlayRate</slug>
    <functioncall prog_lang="cpp">double Master_GetPlayRate(ReaProject* project)</functioncall>
    <functioncall prog_lang="eel">double Master_GetPlayRate(ReaProject project)</functioncall>
    <functioncall prog_lang="lua">number = reaper.Master_GetPlayRate(ReaProject project)</functioncall>
    <functioncall prog_lang="python">Float RPR_Master_GetPlayRate(ReaProject project)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the playrate of the project.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the playrate of the project, between 0.25 and 10.0
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="project" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     get
     playrate
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Master_GetPlayRateAtTime</slug>
    <functioncall prog_lang="cpp">double Master_GetPlayRateAtTime(double time_s, ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">double Master_GetPlayRateAtTime(time_s, ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">number = reaper.Master_GetPlayRateAtTime(number time_s, ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Float RPR_Master_GetPlayRateAtTime(Float time_s, ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="time_s" parmname="time_s">


      </parameter>
      <parameter id="2" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Master_GetTempo</slug>
    <functioncall prog_lang="cpp">double Master_GetTempo()</functioncall>
    <functioncall prog_lang="eel">double Master_GetTempo()</functioncall>
    <functioncall prog_lang="lua">number = reaper.Master_GetTempo()</functioncall>
    <functioncall prog_lang="python">Float RPR_Master_GetTempo()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Master_NormalizePlayRate</slug>
    <functioncall prog_lang="cpp">double Master_NormalizePlayRate(double playrate, bool isnormalized)</functioncall>
    <functioncall prog_lang="eel">double Master_NormalizePlayRate(playrate, bool isnormalized)</functioncall>
    <functioncall prog_lang="lua">number = reaper.Master_NormalizePlayRate(number playrate, boolean isnormalized)</functioncall>
    <functioncall prog_lang="python">Float RPR_Master_NormalizePlayRate(Float playrate, Boolean isnormalized)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="playrate" parmname="playrate">

      </parameter>
      <parameter id="2" datatype="isnormalized" parmname="isnormalized">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Master_NormalizeTempo</slug>
    <functioncall prog_lang="cpp">double Master_NormalizeTempo(double bpm, bool isnormalized)</functioncall>
    <functioncall prog_lang="eel">double Master_NormalizeTempo(bpm, bool isnormalized)</functioncall>
    <functioncall prog_lang="lua">number = reaper.Master_NormalizeTempo(number bpm, boolean isnormalized)</functioncall>
    <functioncall prog_lang="python">Float RPR_Master_NormalizeTempo(Float bpm, Boolean isnormalized)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bpm" parmname="bpm">

      </parameter>
      <parameter id="2" datatype="isnormalized" parmname="isnormalized">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MB</slug>
    <functioncall prog_lang="cpp">int MB(const char* msg, const char* title, int type)</functioncall>
    <functioncall prog_lang="eel">int MB(&quot;msg&quot;, &quot;title&quot;, int type)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.MB(string msg, string title, integer type)</functioncall>
    <functioncall prog_lang="python">Int RPR_MB(String msg, String title, Int type)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Shows Messagebox with user-clickable buttons.           
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the button pressed by the user<br/>
1, OK<br/>
2, CANCEL<br/>
3, ABORT<br/>
4, RETRY<br/>
5, IGNORE<br/>
6, YES<br/>
7, NO
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="msg" parmname="msg">
the message, that shall be shown in messagebox
      </parameter>
      <parameter id="2" datatype="title" parmname="title">
the title of the messagebox
      </parameter>
      <parameter id="3" datatype="type" parmname="type">
which buttons shall be shown in the messagebox<br/>
0, OK<br/>
1, OK CANCEL<br/>
2, ABORT RETRY IGNORE<br/>
3, YES NO CANCEL<br/>
4, YES NO<br/>
5, RETRY CANCEL
      </parameter>
    </parameters>
    <tags>
     user
     interface
     input
     dialog
     messagebox
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MediaItemDescendsFromTrack</slug>
    <functioncall prog_lang="cpp">int MediaItemDescendsFromTrack(MediaItem* item, MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_CountEvts</slug>
    <functioncall prog_lang="cpp">int MIDI_CountEvts(MediaItem_Take* take, int* notecntOut, int* ccevtcntOut, int* textsyxevtcntOut)</functioncall>
    <functioncall prog_lang="eel">int MIDI_CountEvts(MediaItem_Take take, int &amp;amp;notecnt, int &amp;amp;ccevtcnt, int &amp;amp;textsyxevtcnt)</functioncall>
    <functioncall prog_lang="lua">integer retval, number notecnt, number ccevtcnt, number textsyxevtcnt = reaper.MIDI_CountEvts(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int notecntOut, Int ccevtcntOut, Int textsyxevtcntOut) = RPR_MIDI_CountEvts(take, notecntOut, ccevtcntOut, textsyxevtcntOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Count the number of notes, CC events, and text/sysex events in a given MIDI item.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="notecnt" retvalname="notecnt">

      </retval>
      <retval id="3" datatype="ccevtcnt" retvalname="ccevtcnt">

      </retval>
      <retval id="4" datatype="textsyxevtcnt" retvalname="textsyxevtcnt">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_DeleteCC</slug>
    <functioncall prog_lang="cpp">bool MIDI_DeleteCC(MediaItem_Take* take, int ccidx)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_DeleteCC(MediaItem_Take take, int ccidx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_DeleteCC(MediaItem_Take take, integer ccidx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_DeleteCC(MediaItem_Take take, Int ccidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Delete a MIDI CC event.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="ccidx" parmname="ccidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_DeleteEvt</slug>
    <functioncall prog_lang="cpp">bool MIDI_DeleteEvt(MediaItem_Take* take, int evtidx)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_DeleteEvt(MediaItem_Take take, int evtidx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_DeleteEvt(MediaItem_Take take, integer evtidx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_DeleteEvt(MediaItem_Take take, Int evtidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Delete a MIDI event.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="evtidx" parmname="evtidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_DeleteNote</slug>
    <functioncall prog_lang="cpp">bool MIDI_DeleteNote(MediaItem_Take* take, int noteidx)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_DeleteNote(MediaItem_Take take, int noteidx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_DeleteNote(MediaItem_Take take, integer noteidx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_DeleteNote(MediaItem_Take take, Int noteidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Delete a MIDI note.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="noteidx" parmname="noteidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_DeleteTextSysexEvt</slug>
    <functioncall prog_lang="cpp">bool MIDI_DeleteTextSysexEvt(MediaItem_Take* take, int textsyxevtidx)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_DeleteTextSysexEvt(MediaItem_Take take, int textsyxevtidx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_DeleteTextSysexEvt(MediaItem_Take take, integer textsyxevtidx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_DeleteTextSysexEvt(MediaItem_Take take, Int textsyxevtidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Delete a MIDI text or sysex event.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="textsyxevtidx" parmname="textsyxevtidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_DisableSort</slug>
    <functioncall prog_lang="cpp">void MIDI_DisableSort(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">MIDI_DisableSort(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">reaper.MIDI_DisableSort(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">RPR_MIDI_DisableSort(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.974
      Lua=5.3
    </requires>
    <description>
Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_EnumSelCC</slug>
    <functioncall prog_lang="cpp">int MIDI_EnumSelCC(MediaItem_Take* take, int ccidx)</functioncall>
    <functioncall prog_lang="eel">int MIDI_EnumSelCC(MediaItem_Take take, int ccidx)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.MIDI_EnumSelCC(MediaItem_Take take, integer ccidx)</functioncall>
    <functioncall prog_lang="python">Int RPR_MIDI_EnumSelCC(MediaItem_Take take, Int ccidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="ccidx" parmname="ccidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_EnumSelEvts</slug>
    <functioncall prog_lang="cpp">int MIDI_EnumSelEvts(MediaItem_Take* take, int evtidx)</functioncall>
    <functioncall prog_lang="eel">int MIDI_EnumSelEvts(MediaItem_Take take, int evtidx)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.MIDI_EnumSelEvts(MediaItem_Take take, integer evtidx)</functioncall>
    <functioncall prog_lang="python">Int RPR_MIDI_EnumSelEvts(MediaItem_Take take, Int evtidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="evtidx" parmname="evtidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_EnumSelNotes</slug>
    <functioncall prog_lang="cpp">int MIDI_EnumSelNotes(MediaItem_Take* take, int noteidx)</functioncall>
    <functioncall prog_lang="eel">int MIDI_EnumSelNotes(MediaItem_Take take, int noteidx)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.MIDI_EnumSelNotes(MediaItem_Take take, integer noteidx)</functioncall>
    <functioncall prog_lang="python">Int RPR_MIDI_EnumSelNotes(MediaItem_Take take, Int noteidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="noteidx" parmname="noteidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_EnumSelTextSysexEvts</slug>
    <functioncall prog_lang="cpp">int MIDI_EnumSelTextSysexEvts(MediaItem_Take* take, int textsyxidx)</functioncall>
    <functioncall prog_lang="eel">int MIDI_EnumSelTextSysexEvts(MediaItem_Take take, int textsyxidx)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.MIDI_EnumSelTextSysexEvts(MediaItem_Take take, integer textsyxidx)</functioncall>
    <functioncall prog_lang="python">Int RPR_MIDI_EnumSelTextSysexEvts(MediaItem_Take take, Int textsyxidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="textsyxidx" parmname="textsyxidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetAllEvts</slug>
    <functioncall prog_lang="cpp">bool MIDI_GetAllEvts(MediaItem_Take* take, char* bufNeedBig, int* bufNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_GetAllEvts(MediaItem_Take take, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.MIDI_GetAllEvts(MediaItem_Take take, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, String bufNeedBig, Int bufNeedBig_sz) = RPR_MIDI_GetAllEvts(take, bufNeedBig, bufNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &amp;amp;1=selected &amp;amp;2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See <a href="#MIDI_SetAllEvts">MIDI_SetAllEvts</a>.</p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetCC</slug>
    <functioncall prog_lang="cpp">bool MIDI_GetCC(MediaItem_Take* take, int ccidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, int* chanmsgOut, int* chanOut, int* msg2Out, int* msg3Out)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_GetCC(MediaItem_Take take, int ccidx, bool &amp;amp;selected, bool &amp;amp;muted, &amp;amp;ppqpos, int &amp;amp;chanmsg, int &amp;amp;chan, int &amp;amp;msg2, int &amp;amp;msg3)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean selected, boolean muted, number ppqpos, number chanmsg, number chan, number msg2, number msg3 = reaper.MIDI_GetCC(MediaItem_Take take, integer ccidx)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int ccidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, Int chanmsgOut, Int chanOut, Int msg2Out, Int msg3Out) = RPR_MIDI_GetCC(take, ccidx, selectedOut, mutedOut, ppqposOut, chanmsgOut, chanOut, msg2Out, msg3Out)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get MIDI CC event properties.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="selected" retvalname="selected">

      </retval>
      <retval id="3" datatype="muted" retvalname="muted">

      </retval>
      <retval id="4" datatype="ppqpos" retvalname="ppqpos">

      </retval>
      <retval id="5" datatype="chanmsg" retvalname="chanmsg">

      </retval>
      <retval id="6" datatype="chan" retvalname="chan">

      </retval>
      <retval id="7" datatype="msg2" retvalname="msg2">

      </retval>
      <retval id="8" datatype="msg3" retvalname="msg3">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="ccidx" parmname="ccidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetEvt</slug>
    <functioncall prog_lang="cpp">bool MIDI_GetEvt(MediaItem_Take* take, int evtidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, char* msg, int* msg_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_GetEvt(MediaItem_Take take, int evtidx, bool &amp;amp;selected, bool &amp;amp;muted, &amp;amp;ppqpos, #msg)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean selected, boolean muted, number ppqpos, string msg = reaper.MIDI_GetEvt(MediaItem_Take take, integer evtidx, boolean selected, boolean muted, number ppqpos, string msg)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int evtidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, String msg, Int msg_sz) = RPR_MIDI_GetEvt(take, evtidx, selectedOut, mutedOut, ppqposOut, msg, msg_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get MIDI event properties.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="selected" retvalname="selected">

      </retval>
      <retval id="3" datatype="muted" retvalname="muted">

      </retval>
      <retval id="4" datatype="ppqpos" retvalname="ppqpos">

      </retval>
      <retval id="5" datatype="msg" retvalname="msg">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="evtidx" parmname="evtidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetGrid</slug>
    <functioncall prog_lang="cpp">double MIDI_GetGrid(MediaItem_Take* take, double* swingOutOptional, double* noteLenOutOptional)</functioncall>
    <functioncall prog_lang="eel">double MIDI_GetGrid(MediaItem_Take take, optional &amp;amp;swing, optional &amp;amp;noteLen)</functioncall>
    <functioncall prog_lang="lua">number retval, optional number swing, optional number noteLen = reaper.MIDI_GetGrid(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">(Float retval, MediaItem_Take take, Float swingOutOptional, Float noteLenOutOptional) = RPR_MIDI_GetGrid(take, swingOutOptional, noteLenOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="swing" retvalname="swing">

      </retval>
      <retval id="3" datatype="noteLen" retvalname="noteLen">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetHash</slug>
    <functioncall prog_lang="cpp">bool MIDI_GetHash(MediaItem_Take* take, bool notesonly, char* hash, int hash_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_GetHash(MediaItem_Take take, bool notesonly, #hash)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string hash = reaper.MIDI_GetHash(MediaItem_Take take, boolean notesonly, string hash)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean notesonly, String hash, Int hash_sz) = RPR_MIDI_GetHash(take, notesonly, hash, hash_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See <a href="#MIDI_GetTrackHash">MIDI_GetTrackHash</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="hash" retvalname="hash">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="notesonly" parmname="notesonly">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>MIDI_GetNote</slug>
    <functioncall prog_lang="cpp">bool MIDI_GetNote(MediaItem_Take* take, int noteidx, bool* selectedOut, bool* mutedOut, double* startppqposOut, double* endppqposOut, int* chanOut, int* pitchOut, int* velOut)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_GetNote(MediaItem_Take take, int noteidx, bool &amp;amp;selected, bool &amp;amp;muted, &amp;amp;startppqpos, &amp;amp;endppqpos, int &amp;amp;chan, int &amp;amp;pitch, int &amp;amp;vel)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean selected, boolean muted, number startppqpos, number endppqpos, number chan, number pitch, number vel = reaper.MIDI_GetNote(MediaItem_Take take, integer noteidx)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int noteidx, Boolean selectedOut, Boolean mutedOut, Float startppqposOut, Float endppqposOut, Int chanOut, Int pitchOut, Int velOut) = RPR_MIDI_GetNote(take, noteidx, selectedOut, mutedOut, startppqposOut, endppqposOut, chanOut, pitchOut, velOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get MIDI note properties.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="selected" retvalname="selected">

      </retval>
      <retval id="3" datatype="muted" retvalname="muted">

      </retval>
      <retval id="4" datatype="startppqpos" retvalname="startppqpos">

      </retval>
      <retval id="5" datatype="endppqpos" retvalname="endppqpos">

      </retval>
      <retval id="6" datatype="chan" retvalname="chan">

      </retval>
      <retval id="7" datatype="pitch" retvalname="pitch">

      </retval>
      <retval id="8" datatype="vel" retvalname="vel">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="noteidx" parmname="noteidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetPPQPos_EndOfMeasure</slug>
    <functioncall prog_lang="cpp">double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take* take, double ppqpos)</functioncall>
    <functioncall prog_lang="eel">double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, ppqpos)</functioncall>
    <functioncall prog_lang="lua">number = reaper.MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, number ppqpos)</functioncall>
    <functioncall prog_lang="python">Float RPR_MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, Float ppqpos)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the MIDI tick (ppq) position corresponding to the end of the measure.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="ppqpos" parmname="ppqpos">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetPPQPos_StartOfMeasure</slug>
    <functioncall prog_lang="cpp">double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take* take, double ppqpos)</functioncall>
    <functioncall prog_lang="eel">double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, ppqpos)</functioncall>
    <functioncall prog_lang="lua">number = reaper.MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, number ppqpos)</functioncall>
    <functioncall prog_lang="python">Float RPR_MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, Float ppqpos)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the MIDI tick (ppq) position corresponding to the start of the measure.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="ppqpos" parmname="ppqpos">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetPPQPosFromProjQN</slug>
    <functioncall prog_lang="cpp">double MIDI_GetPPQPosFromProjQN(MediaItem_Take* take, double projqn)</functioncall>
    <functioncall prog_lang="eel">double MIDI_GetPPQPosFromProjQN(MediaItem_Take take, projqn)</functioncall>
    <functioncall prog_lang="lua">number = reaper.MIDI_GetPPQPosFromProjQN(MediaItem_Take take, number projqn)</functioncall>
    <functioncall prog_lang="python">Float RPR_MIDI_GetPPQPosFromProjQN(MediaItem_Take take, Float projqn)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="projqn" parmname="projqn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetPPQPosFromProjTime</slug>
    <functioncall prog_lang="cpp">double MIDI_GetPPQPosFromProjTime(MediaItem_Take* take, double projtime)</functioncall>
    <functioncall prog_lang="eel">double MIDI_GetPPQPosFromProjTime(MediaItem_Take take, projtime)</functioncall>
    <functioncall prog_lang="lua">number = reaper.MIDI_GetPPQPosFromProjTime(MediaItem_Take take, number projtime)</functioncall>
    <functioncall prog_lang="python">Float RPR_MIDI_GetPPQPosFromProjTime(MediaItem_Take take, Float projtime)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="projtime" parmname="projtime">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetProjQNFromPPQPos</slug>
    <functioncall prog_lang="cpp">double MIDI_GetProjQNFromPPQPos(MediaItem_Take* take, double ppqpos)</functioncall>
    <functioncall prog_lang="eel">double MIDI_GetProjQNFromPPQPos(MediaItem_Take take, ppqpos)</functioncall>
    <functioncall prog_lang="lua">number = reaper.MIDI_GetProjQNFromPPQPos(MediaItem_Take take, number ppqpos)</functioncall>
    <functioncall prog_lang="python">Float RPR_MIDI_GetProjQNFromPPQPos(MediaItem_Take take, Float ppqpos)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="ppqpos" parmname="ppqpos">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetProjTimeFromPPQPos</slug>
    <functioncall prog_lang="cpp">double MIDI_GetProjTimeFromPPQPos(MediaItem_Take* take, double ppqpos)</functioncall>
    <functioncall prog_lang="eel">double MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, ppqpos)</functioncall>
    <functioncall prog_lang="lua">number = reaper.MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, number ppqpos)</functioncall>
    <functioncall prog_lang="python">Float RPR_MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, Float ppqpos)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="ppqpos" parmname="ppqpos">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetScale</slug>
    <functioncall prog_lang="cpp">bool MIDI_GetScale(MediaItem_Take* take, int* rootOut, int* scaleOut, char* name, int name_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_GetScale(MediaItem_Take take, int &amp;amp;root, int &amp;amp;scale, #name)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number root, number scale, string name = reaper.MIDI_GetScale(MediaItem_Take take, number root, number scale, string name)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int rootOut, Int scaleOut, String name, Int name_sz) = RPR_MIDI_GetScale(take, rootOut, scaleOut, name, name_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &amp;amp;0x1=root, &amp;amp;0x2=minor 2nd, &amp;amp;0x4=major 2nd, &amp;amp;0x8=minor 3rd, &amp;amp;0xF=fourth, etc.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="root" retvalname="root">

      </retval>
      <retval id="3" datatype="scale" retvalname="scale">

      </retval>
      <retval id="4" datatype="name" retvalname="name">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetTextSysexEvt</slug>
    <functioncall prog_lang="cpp">bool MIDI_GetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, bool* selectedOutOptional, bool* mutedOutOptional, double* ppqposOutOptional, int* typeOutOptional, char* msgOptional, int* msgOptional_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_GetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool &amp;amp;selected, optional bool &amp;amp;muted, optional &amp;amp;ppqpos, optional int &amp;amp;type, optional #msg)</functioncall>
    <functioncall prog_lang="lua">boolean retval, optional boolean selected, optional boolean muted, optional number ppqpos, optional number type, optional string msg = reaper.MIDI_GetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selected, optional boolean muted, optional number ppqpos, optional number type, optional string msg)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int textsyxevtidx, Boolean selectedOutOptional, Boolean mutedOutOptional, Float ppqposOutOptional, Int typeOutOptional, String msgOptional, Int msgOptional_sz) = RPR_MIDI_GetTextSysexEvt(take, textsyxevtidx, selectedOutOptional, mutedOutOptional, ppqposOutOptional, typeOutOptional, msgOptional, msgOptional_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="selected" retvalname="selected">

      </retval>
      <retval id="3" datatype="muted" retvalname="muted">

      </retval>
      <retval id="4" datatype="ppqpos" retvalname="ppqpos">

      </retval>
      <retval id="5" datatype="type" retvalname="type">

      </retval>
      <retval id="6" datatype="string" retvalname="msg">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="textsyxevtidx" parmname="textsyxevtidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_GetTrackHash</slug>
    <functioncall prog_lang="cpp">bool MIDI_GetTrackHash(MediaTrack* track, bool notesonly, char* hash, int hash_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_GetTrackHash(MediaTrack track, bool notesonly, #hash)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string hash = reaper.MIDI_GetTrackHash(MediaTrack track, boolean notesonly, string hash)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Boolean notesonly, String hash, Int hash_sz) = RPR_MIDI_GetTrackHash(track, notesonly, hash, hash_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See <a href="#MIDI_GetHash">MIDI_GetHash</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="hash" retvalname="hash">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="notesonly" parmname="notesonly">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_InsertCC</slug>
    <functioncall prog_lang="cpp">bool MIDI_InsertCC(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int chanmsg, int chan, int msg2, int msg3)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_InsertCC(MediaItem_Take take, bool selected, bool muted, ppqpos, int chanmsg, int chan, int msg2, int msg3)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_InsertCC(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer chanmsg, integer chan, integer msg2, integer msg3)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_InsertCC(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int chanmsg, Int chan, Int msg2, Int msg3)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Insert a new MIDI CC event.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="selected" parmname="selected">

      </parameter>
      <parameter id="3" datatype="muted" parmname="muted">

      </parameter>
      <parameter id="4" datatype="ppqpos" parmname="ppqpos">

      </parameter>
      <parameter id="5" datatype="chanmsg" parmname="chanmsg">

      </parameter>
      <parameter id="6" datatype="chan" parmname="chan">

      </parameter>
      <parameter id="7" datatype="msg2" parmname="msg2">

      </parameter>
      <parameter id="8" datatype="msg3" parmname="msg3">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_InsertEvt</slug>
    <functioncall prog_lang="cpp">bool MIDI_InsertEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, const char* bytestr, int bytestr_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_InsertEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, &quot;bytestr&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_InsertEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, string bytestr)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_InsertEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, String bytestr, Int bytestr_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Insert a new MIDI event.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="selected" parmname="selected">

      </parameter>
      <parameter id="3" datatype="muted" parmname="muted">

      </parameter>
      <parameter id="4" datatype="ppqpos" parmname="ppqpos">

      </parameter>
      <parameter id="5" datatype="bytestr" parmname="bytestr">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_InsertNote</slug>
    <functioncall prog_lang="cpp">bool MIDI_InsertNote(MediaItem_Take* take, bool selected, bool muted, double startppqpos, double endppqpos, int chan, int pitch, int vel, const bool* noSortInOptional)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_InsertNote(MediaItem_Take take, bool selected, bool muted, startppqpos, endppqpos, int chan, int pitch, int vel, optional bool noSortIn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_InsertNote(MediaItem_Take take, boolean selected, boolean muted, number startppqpos, number endppqpos, integer chan, integer pitch, integer vel, optional boolean noSortIn)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_InsertNote(MediaItem_Take take, Boolean selected, Boolean muted, Float startppqpos, Float endppqpos, Int chan, Int pitch, Int vel, const bool noSortInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="selected" parmname="selected">

      </parameter>
      <parameter id="3" datatype="muted" parmname="muted">

      </parameter>
      <parameter id="4" datatype="startppqpos" parmname="startppqpos">

      </parameter>
      <parameter id="5" datatype="endppqpos" parmname="endppqpos">

      </parameter>
      <parameter id="6" datatype="chan" parmname="chan">

      </parameter>
      <parameter id="7" datatype="pitch" parmname="pitch">

      </parameter>
      <parameter id="8" datatype="vel" parmname="vel">

      </parameter>
      <parameter id="9" datatype="noSortIn" parmname="noSortIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_InsertTextSysexEvt</slug>
    <functioncall prog_lang="cpp">bool MIDI_InsertTextSysexEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int type, const char* bytestr, int bytestr_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_InsertTextSysexEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, int type, &quot;bytestr&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_InsertTextSysexEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer type, string bytestr)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_InsertTextSysexEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int type, String bytestr, Int bytestr_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="selected" parmname="selected">

      </parameter>
      <parameter id="3" datatype="muted" parmname="muted">

      </parameter>
      <parameter id="4" datatype="ppqpos" parmname="ppqpos">

      </parameter>
      <parameter id="5" datatype="type" parmname="type">

      </parameter>
      <parameter id="6" datatype="bytestr" parmname="bytestr">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>midi_reinit</slug>
    <functioncall prog_lang="cpp">void midi_reinit()</functioncall>
    <functioncall prog_lang="eel">midi_reinit()</functioncall>
    <functioncall prog_lang="lua">reaper.midi_reinit()</functioncall>
    <functioncall prog_lang="python">RPR_midi_reinit()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Reset all MIDI devices
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_SelectAll</slug>
    <functioncall prog_lang="cpp">void MIDI_SelectAll(MediaItem_Take* take, bool select)</functioncall>
    <functioncall prog_lang="eel">MIDI_SelectAll(MediaItem_Take take, bool select)</functioncall>
    <functioncall prog_lang="lua">reaper.MIDI_SelectAll(MediaItem_Take take, boolean select)</functioncall>
    <functioncall prog_lang="python">RPR_MIDI_SelectAll(MediaItem_Take take, Boolean select)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Select or deselect all MIDI content.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="select" parmname="select">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_SetAllEvts</slug>
    <functioncall prog_lang="cpp">bool MIDI_SetAllEvts(MediaItem_Take* take, const char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_SetAllEvts(MediaItem_Take take, &quot;buf&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_SetAllEvts(MediaItem_Take take, string buf)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_SetAllEvts(MediaItem_Take take, String buf, Int buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &amp;amp;1=selected &amp;amp;2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message. For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events. See <a href="#MIDI_GetAllEvts">MIDI_GetAllEvts</a>.</p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="buf" parmname="buf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_SetCC</slug>
    <functioncall prog_lang="cpp">bool MIDI_SetCC(MediaItem_Take* take, int ccidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* chanmsgInOptional, const int* chanInOptional, const int* msg2InOptional, const int* msg3InOptional, const bool* noSortInOptional)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_SetCC(MediaItem_Take take, int ccidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int chanmsgIn, optional int chanIn, optional int msg2In, optional int msg3In, optional bool noSortIn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_SetCC(MediaItem_Take take, integer ccidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional number chanmsgIn, optional number chanIn, optional number msg2In, optional number msg3In, optional boolean noSortIn)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_SetCC(MediaItem_Take take, Int ccidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int chanmsgInOptional, const int chanInOptional, const int msg2InOptional, const int msg3InOptional, const bool noSortInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="ccidx" parmname="ccidx">

      </parameter>
      <parameter id="3" datatype="selectedIn" parmname="selectedIn">

      </parameter>
      <parameter id="4" datatype="mutedIn" parmname="mutedIn">

      </parameter>
      <parameter id="5" datatype="chanmsgIn" parmname="chanmsgIn">

      </parameter>
      <parameter id="6" datatype="chanmsgIn" parmname="chanmsgIn">

      </parameter>
      <parameter id="7" datatype="chanIn" parmname="chanIn">

      </parameter>
      <parameter id="8" datatype="msg2In" parmname="msg2In">

      </parameter>
      <parameter id="9" datatype="msg3In" parmname="msg3In">

      </parameter>
      <parameter id="10" datatype="noSortIn" parmname="noSortIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_SetEvt</slug>
    <functioncall prog_lang="cpp">bool MIDI_SetEvt(MediaItem_Take* take, int evtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_SetEvt(MediaItem_Take take, int evtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional &quot;msg&quot;, optional bool noSortIn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_SetEvt(MediaItem_Take take, integer evtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional string msg, optional boolean noSortIn)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_SetEvt(MediaItem_Take take, Int evtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="evtidx" parmname="evtidx">

      </parameter>
      <parameter id="3" datatype="selectedIn" parmname="selectedIn">

      </parameter>
      <parameter id="4" datatype="mutedIn" parmname="mutedIn">

      </parameter>
      <parameter id="5" datatype="msg" parmname="msg">

      </parameter>
      <parameter id="6" datatype="ppqposIn" parmname="ppqposIn">

      </parameter>
      <parameter id="7" datatype="noSortIn" parmname="noSortIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_SetItemExtents</slug>
    <functioncall prog_lang="cpp">bool MIDI_SetItemExtents(MediaItem* item, double startQN, double endQN)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_SetItemExtents(MediaItem item, startQN, endQN)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_SetItemExtents(MediaItem item, number startQN, number endQN)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_SetItemExtents(MediaItem item, Float startQN, Float endQN)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set the start/end positions of a media item that contains a MIDI take.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="startQN" parmname="startQN">

      </parameter>
      <parameter id="3" datatype="endQN" parmname="endQN">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_SetNote</slug>
    <functioncall prog_lang="cpp">bool MIDI_SetNote(MediaItem_Take* take, int noteidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* startppqposInOptional, const double* endppqposInOptional, const int* chanInOptional, const int* pitchInOptional, const int* velInOptional, const bool* noSortInOptional)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_SetNote(MediaItem_Take take, int noteidx, optional bool selectedIn, optional bool mutedIn, optional startppqposIn, optional endppqposIn, optional int chanIn, optional int pitchIn, optional int velIn, optional bool noSortIn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_SetNote(MediaItem_Take take, integer noteidx, optional boolean selectedIn, optional boolean mutedIn, optional number startppqposIn, optional number endppqposIn, optional number chanIn, optional number pitchIn, optional number velIn, optional boolean noSortIn)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_SetNote(MediaItem_Take take, Int noteidx, const bool selectedInOptional, const bool mutedInOptional, const double startppqposInOptional, const double endppqposInOptional, const int chanInOptional, const int pitchInOptional, const int velInOptional, const bool noSortInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="noteidx" parmname="noteidx">

      </parameter>
      <parameter id="3" datatype="selectedIn" parmname="selectedIn">

      </parameter>
      <parameter id="4" datatype="mutedIn" parmname="mutedIn">

      </parameter>
      <parameter id="5" datatype="chanIn" parmname="chanIn">

      </parameter>
      <parameter id="6" datatype="chanIn" parmname="chanIn">

      </parameter>
      <parameter id="7" datatype="chanIn" parmname="chanIn">

      </parameter>
      <parameter id="8" datatype="pitchIn" parmname="pitchIn">

      </parameter>
      <parameter id="9" datatype="velIn" parmname="velIn">

      </parameter>
      <parameter id="10" datatype="noSortIn" parmname="noSortIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_SetTextSysexEvt</slug>
    <functioncall prog_lang="cpp">bool MIDI_SetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* typeInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</functioncall>
    <functioncall prog_lang="eel">bool MIDI_SetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int typeIn, optional &quot;msg&quot;, optional bool noSortIn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDI_SetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional number typeIn, optional string msg, optional boolean noSortIn)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDI_SetTextSysexEvt(MediaItem_Take take, Int textsyxevtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int typeInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-7:MIDI text event types. set noSort if setting multiple events, then call MIDI_Sort when done.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="textsyxevtidx" parmname="textsyxevtidx">

      </parameter>
      <parameter id="3" datatype="selectedIn" parmname="selectedIn">

      </parameter>
      <parameter id="4" datatype="mutedIn" parmname="mutedIn">

      </parameter>
      <parameter id="5" datatype="typeIn" parmname="typeIn">

      </parameter>
      <parameter id="6" datatype="typeIn" parmname="typeIn">

      </parameter>
      <parameter id="7" datatype="msg" parmname="msg">

      </parameter>
      <parameter id="8" datatype="noSortIn" parmname="noSortIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_Sort</slug>
    <functioncall prog_lang="cpp">void MIDI_Sort(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">MIDI_Sort(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">reaper.MIDI_Sort(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">RPR_MIDI_Sort(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDIEditor_GetActive</slug>
    <functioncall prog_lang="cpp">HWND MIDIEditor_GetActive()</functioncall>
    <functioncall prog_lang="eel">HWND MIDIEditor_GetActive()</functioncall>
    <functioncall prog_lang="lua">HWND = reaper.MIDIEditor_GetActive()</functioncall>
    <functioncall prog_lang="python">HWND RPR_MIDIEditor_GetActive()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>get a pointer to the focused MIDI editor window see <a href="#MIDIEditor_GetMode">MIDIEditor_GetMode</a>, <a href="#MIDIEditor_OnCommand">MIDIEditor_OnCommand</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HWND" retvalname="HWND">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDIEditor_GetMode</slug>
    <functioncall prog_lang="cpp">int MIDIEditor_GetMode(HWND midieditor)</functioncall>
    <functioncall prog_lang="eel">int MIDIEditor_GetMode(HWND midieditor)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.MIDIEditor_GetMode(HWND midieditor)</functioncall>
    <functioncall prog_lang="python">Int RPR_MIDIEditor_GetMode(HWND midieditor)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor) see <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>, <a href="#MIDIEditor_OnCommand">MIDIEditor_OnCommand</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midieditor" parmname="midieditor">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDIEditor_GetSetting_int</slug>
    <functioncall prog_lang="cpp">int MIDIEditor_GetSetting_int(HWND midieditor, const char* setting_desc)</functioncall>
    <functioncall prog_lang="eel">int MIDIEditor_GetSetting_int(HWND midieditor, &quot;setting_desc&quot;)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.MIDIEditor_GetSetting_int(HWND midieditor, string setting_desc)</functioncall>
    <functioncall prog_lang="python">Int RPR_MIDIEditor_GetSetting_int(HWND midieditor, String setting_desc)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
<p>Get settings from a MIDI editor. setting_desc can be: snap_enabled: returns 0 or 1 active_note_row: returns 0-127 last_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane default_note_vel: returns 0-127 default_note_chan: returns 0-15 default_note_len: returns default length in MIDI ticks scale_enabled: returns 0-1 scale_root: returns 0-12 (0=C) if setting_desc is unsupported, the function returns -1. See <a href="#MIDIEditor_SetSetting_int">MIDIEditor_SetSetting_int</a>, <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>, <a href="#MIDIEditor_GetSetting_str">MIDIEditor_GetSetting_str</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midieditor" parmname="midieditor">

      </parameter>
      <parameter id="2" datatype="setting_desc" parmname="setting_desc">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDIEditor_GetSetting_str</slug>
    <functioncall prog_lang="cpp">bool MIDIEditor_GetSetting_str(HWND midieditor, const char* setting_desc, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool MIDIEditor_GetSetting_str(HWND midieditor, &quot;setting_desc&quot;, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.MIDIEditor_GetSetting_str(HWND midieditor, string setting_desc, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, HWND midieditor, String setting_desc, String buf, Int buf_sz) = RPR_MIDIEditor_GetSetting_str(midieditor, setting_desc, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get settings from a MIDI editor. setting_desc can be: last_clicked_cc_lane: returns text description (“velocity”, “pitch”, etc) scale: returns the scale record, for example “102034050607” for a major scale if setting_desc is unsupported, the function returns false.</p>
<p>See <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>, <a href="#MIDIEditor_GetSetting_int">MIDIEditor_GetSetting_int</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midieditor" parmname="midieditor">

      </parameter>
      <parameter id="2" datatype="setting_desc" parmname="setting_desc">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDIEditor_GetTake</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* MIDIEditor_GetTake(HWND midieditor)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take MIDIEditor_GetTake(HWND midieditor)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take = reaper.MIDIEditor_GetTake(HWND midieditor)</functioncall>
    <functioncall prog_lang="python">MediaItem_Take RPR_MIDIEditor_GetTake(HWND midieditor)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get the take that is currently being edited in this MIDI editor
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="MediaItem_Take">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midieditor" parmname="midieditor">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDIEditor_LastFocused_OnCommand</slug>
    <functioncall prog_lang="cpp">bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)</functioncall>
    <functioncall prog_lang="eel">bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDIEditor_LastFocused_OnCommand(integer command_id, boolean islistviewcommand)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDIEditor_LastFocused_OnCommand(Int command_id, Boolean islistviewcommand)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input. see <a href="#MIDIEditor_OnCommand">MIDIEditor_OnCommand</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="command_id" parmname="command_id">

      </parameter>
      <parameter id="2" datatype="islistviewcommand" parmname="islistviewcommand">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDIEditor_OnCommand</slug>
    <functioncall prog_lang="cpp">bool MIDIEditor_OnCommand(HWND midieditor, int command_id)</functioncall>
    <functioncall prog_lang="eel">bool MIDIEditor_OnCommand(HWND midieditor, int command_id)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MIDIEditor_OnCommand(HWND midieditor, integer command_id)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDIEditor_OnCommand(HWND midieditor, Int command_id)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor). see <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>, <a href="#MIDIEditor_LastFocused_OnCommand">MIDIEditor_LastFocused_OnCommand</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midieditor" parmname="midieditor">

      </parameter>
      <parameter id="2" datatype="command_id" parmname="command_id">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDIEditor_SetSetting_int</slug>
    <functioncall prog_lang="cpp">bool MIDIEditor_SetSetting_int(HWND midieditor, const char* setting_desc, int setting)</functioncall>
    <functioncall prog_lang="eel">bool MIDIEditor_SetSetting_int(HWND midieditor, &quot;setting_desc&quot;, int setting)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.MIDIEditor_SetSetting_int(HWND midieditor, string setting_desc, integer setting)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MIDIEditor_SetSetting_int(HWND midieditor, String setting_desc, Int setting)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
<p>Set settings for a MIDI editor. setting_desc can be: active_note_row: 0-127 See <a href="#MIDIEditor_GetSetting_int">MIDIEditor_GetSetting_int</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="HWND" parmname="midieditor">

      </parameter>
      <parameter id="2" datatype="string" parmname="setting_desc">

      </parameter>
      <parameter id="3" datatype="integer" parmname="setting">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>mkpanstr</slug>
    <functioncall prog_lang="cpp">void mkpanstr(char* strNeed64, double pan)</functioncall>
    <functioncall prog_lang="eel">mkpanstr(#strNeed64, pan)</functioncall>
    <functioncall prog_lang="lua">string strNeed64 = reaper.mkpanstr(string strNeed64, number pan)</functioncall>
    <functioncall prog_lang="python">(String strNeed64, Float pan) = RPR_mkpanstr(strNeed64, pan)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="strNeed64" retvalname="strNeed64">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="strNeed64" parmname="strNeed64">

      </parameter>
      <parameter id="2" datatype="pan" parmname="pan">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>mkvolpanstr</slug>
    <functioncall prog_lang="cpp">void mkvolpanstr(char* strNeed64, double vol, double pan)</functioncall>
    <functioncall prog_lang="eel">mkvolpanstr(#strNeed64, vol, pan)</functioncall>
    <functioncall prog_lang="lua">string strNeed64 = reaper.mkvolpanstr(string strNeed64, number vol, number pan)</functioncall>
    <functioncall prog_lang="python">(String strNeed64, Float vol, Float pan) = RPR_mkvolpanstr(strNeed64, vol, pan)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="strNeed64" retvalname="strNeed64">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="strNeed64" parmname="strNeed64">

      </parameter>
      <parameter id="2" datatype="vol" parmname="vol">

      </parameter>
      <parameter id="3" datatype="pan" parmname="pan">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>mkvolstr</slug>
    <functioncall prog_lang="cpp">void mkvolstr(char* strNeed64, double vol)</functioncall>
    <functioncall prog_lang="eel">mkvolstr(#strNeed64, vol)</functioncall>
    <functioncall prog_lang="lua">string strNeed64 = reaper.mkvolstr(string strNeed64, number vol)</functioncall>
    <functioncall prog_lang="python">(String strNeed64, Float vol) = RPR_mkvolstr(strNeed64, vol)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="strNeed64" retvalname="strNeed64">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="strNeed64" parmname="strNeed64">

      </parameter>
      <parameter id="2" datatype="vol" parmname="vol">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MoveEditCursor</slug>
    <functioncall prog_lang="cpp">void MoveEditCursor(double adjamt, bool dosel)</functioncall>
    <functioncall prog_lang="eel">MoveEditCursor(adjamt, bool dosel)</functioncall>
    <functioncall prog_lang="lua">reaper.MoveEditCursor(number adjamt, boolean dosel)</functioncall>
    <functioncall prog_lang="python">RPR_MoveEditCursor(Float adjamt, Boolean dosel)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Moves the Edit Cursor.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="adjamt" parmname="adjamt">
move of edit cursor by seconds, relative from the current position. positive-values=forward, negative values=backwards
      </parameter>
      <parameter id="2" datatype="dosel" parmname="dosel">
true, create selection from old edit-cursor-position to the new position; false, just move the edit cursor
      </parameter>
    </parameters>
    <tags>
     transportmanagement
     edit
     cursor
     move
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>MoveMediaItemToTrack</slug>
    <functioncall prog_lang="cpp">bool MoveMediaItemToTrack(MediaItem* item, MediaTrack* desttr)</functioncall>
    <functioncall prog_lang="eel">bool MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Moves a MediaItem-object to a specific MediaTrack.</p>
<p>Call <a href="#UpdateArrange">UpdateArrange</a> to update the arrangeview after that.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if move succeeded; false, if not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">
the MediaItem, that shall be moved
      </parameter>
      <parameter id="2" datatype="desttr" parmname="desttr">
the MediaTrack, to which the MediaItem shall be moved to
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     move
     item
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MuteAllTracks</slug>
    <functioncall prog_lang="cpp">void MuteAllTracks(bool mute)</functioncall>
    <functioncall prog_lang="eel">MuteAllTracks(bool mute)</functioncall>
    <functioncall prog_lang="lua">reaper.MuteAllTracks(boolean mute)</functioncall>
    <functioncall prog_lang="python">RPR_MuteAllTracks(Boolean mute)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Mutes all tracks
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="mute" parmname="mute">
true, mutes all tracks; false, unmutes all tracks
      </parameter>
    </parameters>
    <tags>
     transportmanagement
     mute
     tracks
     set
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>my_getViewport</slug>
    <functioncall prog_lang="cpp">void my_getViewport(RECT* r, const RECT* sr, bool wantWorkArea)</functioncall>
    <functioncall prog_lang="eel">my_getViewport(int &amp;amp;r.left, int &amp;amp;r.top, int &amp;amp;r.right, int &amp;amp;r.bot, int sr.left, int sr.top, int sr.right, int sr.bot, bool wantWorkArea)</functioncall>
    <functioncall prog_lang="lua">integer left, integer top, integer right, integer bottom = reaper.my_getViewport(number r.left, number r.top, number r.right, number r.bot, number sr.left, number sr.top, number sr.right, number sr.bot, boolean wantWorkArea)</functioncall>
    <functioncall prog_lang="python">RPR_my_getViewport(RECT r, const RECT sr, Boolean wantWorkArea)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
With r.??? and sr.??? parameters, you can define coordinates of a rectangle. <br/>
The function will return the left/top/right/bottom coordinates of the viewport that that rectangle is on/closest to.            
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="left" retvalname="left">
left coordinate of the returned viewport
      </retval>
      <retval id="2" datatype="top" retvalname="top">
top coordinate of the returned viewport
      </retval>
      <retval id="3" datatype="right" retvalname="right">
right coordinate of the returned viewport
      </retval>
      <retval id="4" datatype="bottom" retvalname="bottom">
bottom coordinate of the returned viewport
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="r.left" parmname="r.left">
left coordinate of the rectangle
      </parameter>
      <parameter id="2" datatype="r.top" parmname="r.top">
top coordinate of the rectangle
      </parameter>
      <parameter id="3" datatype="r.right" parmname="r.right">
right coordinate of the rectangle
      </parameter>
      <parameter id="4" datatype="r.bot" parmname="r.bot">
bottom coordinate of the rectangle
      </parameter>
      <parameter id="5" datatype="sr.left" parmname="sr.left">
left coordinate of the rectangle in multimonitor usecases
      </parameter>
      <parameter id="6" datatype="sr.top" parmname="sr.top">
top coordinate of the rectangle in multimonitor usecases
      </parameter>
      <parameter id="7" datatype="sr.right" parmname="sr.right">
right coordinate of the rectangle in multimonitor usecases
      </parameter>
      <parameter id="8" datatype="sr.bot" parmname="sr.bot">
bottom coordinate of the rectangle in mutlimonitor usecases
      </parameter>
      <parameter id="9" datatype="wantWorkArea" parmname="wantWorkArea">
true, returns workspace only; false, full monitor coordinates of the returned viewport
      </parameter>
    </parameters>
    <tags>
     userinterface
     viewport
     multi monitor
     get
     workarea
     full screen resolution
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NamedCommandLookup</slug>
    <functioncall prog_lang="cpp">int NamedCommandLookup(const char* command_name)</functioncall>
    <functioncall prog_lang="eel">int NamedCommandLookup(&quot;command_name&quot;)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.NamedCommandLookup(string command_name)</functioncall>
    <functioncall prog_lang="python">Int RPR_NamedCommandLookup(String command_name)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the command ID number for named command that was registered by an extension such as “_SWS_ABOUT” or "_113088d11ae641c193a2b7ede3041ad5" for a ReaScript or a custom action.</p>
<p>see <a href="#Main_OnCommand">Main_OnCommand</a> for executing actions with command-ID-numbers.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the command-id-number of the script/action, which can be used to e.g. run the action, toggle actions, refresh toolbars, etc.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="command_name" parmname="command_name">
the ActionCommandID of the script/action, whose command-id number you want. Must start with \_, eg. &quot;SWS\_ABOUT&quot; -&gt; &quot;\_SWS\_ABOUT&quot;
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     command
     id
     actioncommandid
     lookup
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>OnPauseButton</slug>
    <functioncall prog_lang="cpp">void OnPauseButton()</functioncall>
    <functioncall prog_lang="eel">OnPauseButton()</functioncall>
    <functioncall prog_lang="lua">reaper.OnPauseButton()</functioncall>
    <functioncall prog_lang="python">RPR_OnPauseButton()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Toggles pause/play during play or pause/rec during recording in the current project.<br/>
When stopped, it will start paused play.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <tags>
     transportmanagement
     pause
     play
     rec
     toggle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>OnPauseButtonEx</slug>
    <functioncall prog_lang="cpp">void OnPauseButtonEx(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">OnPauseButtonEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">reaper.OnPauseButtonEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">RPR_OnPauseButtonEx(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Toggles pause/play during play or pause/rec during recording in a specific project.<br/>
When stopped, it will start paused play.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     pause
     play
     rec
     toggle
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>OnPlayButton</slug>
    <functioncall prog_lang="cpp">void OnPlayButton()</functioncall>
    <functioncall prog_lang="eel">OnPlayButton()</functioncall>
    <functioncall prog_lang="lua">reaper.OnPlayButton()</functioncall>
    <functioncall prog_lang="python">RPR_OnPlayButton()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Starts playing at edit-cursor. Will stop recording, when executed during recording.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <tags>
     transportmanagement
     play
     editcursor
     start
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>OnPlayButtonEx</slug>
    <functioncall prog_lang="cpp">void OnPlayButtonEx(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">OnPlayButtonEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">reaper.OnPlayButtonEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">RPR_OnPlayButtonEx(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Starts playing at edit-cursor. Will stop recording, when executed during recording.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     play
     editcursor
     start
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>OnStopButton</slug>
    <functioncall prog_lang="cpp">void OnStopButton()</functioncall>
    <functioncall prog_lang="eel">OnStopButton()</functioncall>
    <functioncall prog_lang="lua">reaper.OnStopButton()</functioncall>
    <functioncall prog_lang="python">RPR_OnStopButton()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Stops playing/recording.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <tags>
     transportmanagement
     stop
     play
     recording
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>OnStopButtonEx</slug>
    <functioncall prog_lang="cpp">void OnStopButtonEx(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">OnStopButtonEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">reaper.OnStopButtonEx(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">RPR_OnStopButtonEx(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Stops playing/recording.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     stop
     play
     recording
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>OpenColorThemeFile</slug>
    <functioncall prog_lang="cpp">bool OpenColorThemeFile(const char* fn)</functioncall>
    <functioncall prog_lang="eel">bool OpenColorThemeFile(&quot;fn&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.OpenColorThemeFile(string fn)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_OpenColorThemeFile(String fn)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Open a different installed theme.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, changing theme worked; false, changing theme didn't work
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="fn" parmname="fn">
the path+filename of the color-theme-file, usually with the &quot;.ReaperTheme&quot;-extension
      </parameter>
    </parameters>
    <tags>
     userinterface
     theme
     load
     open
     filename
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>OpenMediaExplorer</slug>
    <functioncall prog_lang="cpp">HWND OpenMediaExplorer(const char* mediafn, bool play)</functioncall>
    <functioncall prog_lang="eel">HWND OpenMediaExplorer(&quot;mediafn&quot;, bool play)</functioncall>
    <functioncall prog_lang="lua">HWND = reaper.OpenMediaExplorer(string mediafn, boolean play)</functioncall>
    <functioncall prog_lang="python">HWND RPR_OpenMediaExplorer(String mediafn, Boolean play)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Opens mediafn in the Media Explorer.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HWND" retvalname="HWND">
the window of the Media Explorer
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="mediafn" parmname="mediafn">
the filename, to be opened with the Media Explorer
      </parameter>
      <parameter id="2" datatype="play" parmname="play">
true, start/toggle playing immediately; false, just select file without playing
      </parameter>
    </parameters>
    <tags>
     userinterface
     media explorer
     open
     filename
     audio
     play
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>OscLocalMessageToHost</slug>
    <functioncall prog_lang="cpp">void OscLocalMessageToHost(const char* message, const double* valueInOptional)</functioncall>
    <functioncall prog_lang="eel">OscLocalMessageToHost(&quot;message&quot;, optional valueIn)</functioncall>
    <functioncall prog_lang="lua">reaper.OscLocalMessageToHost(string message, optional number valueIn)</functioncall>
    <functioncall prog_lang="python">RPR_OscLocalMessageToHost(String message, const double valueInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER.<br/>
<br/>
This is not broadcast outside of Reaper, so you can't control devices, plugins, etc with it!
    </description>
    <chapter_context>
      AudioMidi Devicemanagement
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="string" parmname="message">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>parse_timestr</slug>
    <functioncall prog_lang="cpp">double parse_timestr(const char* buf)</functioncall>
    <functioncall prog_lang="eel">double parse_timestr(&quot;buf&quot;)</functioncall>
    <functioncall prog_lang="lua">number = reaper.parse_timestr(string buf)</functioncall>
    <functioncall prog_lang="python">Float RPR_parse_timestr(String buf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See <a href="#parse_timestr_pos">parse_timestr_pos</a>, <a href="#parse_timestr_len">parse_timestr_len</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the converted time in seconds
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="buf" parmname="buf">
the timestring to convert (hh:mm:ss.sss). Each position of the time can be one digit only, means: &quot;1:2:3.4&quot; is valid. Milliseconds can be more than 3 digits. Hours, seconds, minutes with more than two digits will be converted correctly &quot;1:120&quot; will be converted to 180 seconds.
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     timestring
     hour
     minute
     second
     millisecond
     parse
     convert
     time
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>parse_timestr_len</slug>
    <functioncall prog_lang="cpp">double parse_timestr_len(const char* buf, double offset, int modeoverride)</functioncall>
    <functioncall prog_lang="eel">double parse_timestr_len(&quot;buf&quot;, offset, int modeoverride)</functioncall>
    <functioncall prog_lang="lua">number = reaper.parse_timestr_len(string buf, number offset, integer modeoverride)</functioncall>
    <functioncall prog_lang="python">Float RPR_parse_timestr_len(String buf, Float offset, Int modeoverride)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
time formatting mode overrides: -1=proj default.<br/>
0, time<br/>
1, measures.beats + time<br/>
2, measures.beats<br/>
3, seconds<br/>
4, samples<br/>
5, h:m:s:f
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="buf" parmname="buf">

      </parameter>
      <parameter id="2" datatype="offset" parmname="offset">
??Buggy??
      </parameter>
      <parameter id="3" datatype="modeoverride" parmname="modeoverride">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>parse_timestr_pos</slug>
    <functioncall prog_lang="cpp">double parse_timestr_pos(const char* buf, int modeoverride)</functioncall>
    <functioncall prog_lang="eel">double parse_timestr_pos(&quot;buf&quot;, int modeoverride)</functioncall>
    <functioncall prog_lang="lua">number = reaper.parse_timestr_pos(string buf, integer modeoverride)</functioncall>
    <functioncall prog_lang="python">Float RPR_parse_timestr_pos(String buf, Int modeoverride)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Parse time string and convert it into seconds.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the converted time in seconds
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="buf" parmname="buf">
the timestring to be parsed and converted into seconds
      </parameter>
      <parameter id="2" datatype="modeoverride" parmname="modeoverride">
the format of the timestring to parse and convert<br/>
-1, proj default.<br/>
0, time<br/>
1, measures.beats + time<br/>
2, measures.beats<br/>
3, seconds<br/>
4, samples<br/>
5, h:m:s:f
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     parse
     timestring
     measures
     beats
     samples
     seconds
     hours
     time
     minutes
     seconds
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>parsepanstr</slug>
    <functioncall prog_lang="cpp">double parsepanstr(const char* str)</functioncall>
    <functioncall prog_lang="eel">double parsepanstr(&quot;str&quot;)</functioncall>
    <functioncall prog_lang="lua">number = reaper.parsepanstr(string str)</functioncall>
    <functioncall prog_lang="python">Float RPR_parsepanstr(String str)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Sink_Enum</slug>
    <functioncall prog_lang="cpp">unsigned int PCM_Sink_Enum(int idx, const char** descstrOut)</functioncall>
    <functioncall prog_lang="eel">uint PCM_Sink_Enum(int idx, #descstr)</functioncall>
    <functioncall prog_lang="lua">integer retval, string descstr = reaper.PCM_Sink_Enum(integer idx)</functioncall>
    <functioncall prog_lang="python">Unknown RPR_PCM_Sink_Enum(Int idx, String descstrOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
enumerates the available PCM-sink-formats, which means, the output-formats available in Reaper
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
a number, which represents the PCM-sink-format
      </retval>
      <retval id="2" datatype="string" retvalname="descstr">
the PCM-sink-format<br/>
0 - WAV<br/>
1 - AIFF<br/>
2 - Audio CD Image (CUE/BIN format)<br/>
3 - DDP<br/>
4 - FLAC<br/>
5 - MP3 (encoder by LAME project)<br/>
6 - OGG Vorbis<br/>
7 - OGG Opus<br/>
8 - Video (ffmpeg/libav encoder)<br/>
9 - Video (GIF)<br/>
10 - Video (LCF)<br/>
11 - WavPack lossless compressor<br/>
maybe others as well?
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="idx">
the index of the sink-format, beginning with 0
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Sink_GetExtension</slug>
    <functioncall prog_lang="cpp">const char* PCM_Sink_GetExtension(const char* data, int data_sz)</functioncall>
    <functioncall prog_lang="eel">bool PCM_Sink_GetExtension(#retval, &quot;data&quot;)</functioncall>
    <functioncall prog_lang="lua">string = reaper.PCM_Sink_GetExtension(string data)</functioncall>
    <functioncall prog_lang="python">String RPR_PCM_Sink_GetExtension(String data, Int data_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="data" parmname="data">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Sink_ShowConfig</slug>
    <functioncall prog_lang="cpp">HWND PCM_Sink_ShowConfig(const char* cfg, int cfg_sz, HWND hwndParent)</functioncall>
    <functioncall prog_lang="eel">HWND PCM_Sink_ShowConfig(&quot;cfg&quot;, HWND hwndParent)</functioncall>
    <functioncall prog_lang="lua">HWND = reaper.PCM_Sink_ShowConfig(string cfg, HWND hwndParent)</functioncall>
    <functioncall prog_lang="python">HWND RPR_PCM_Sink_ShowConfig(String cfg, Int cfg_sz, HWND hwndParent)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HWND" retvalname="HWND">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="cfg" parmname="cfg">

      </parameter>
      <parameter id="2" datatype="hwndParent" parmname="hwndParent">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Source_CreateFromFile</slug>
    <functioncall prog_lang="cpp">PCM_source* PCM_Source_CreateFromFile(const char* filename)</functioncall>
    <functioncall prog_lang="eel">PCM_source PCM_Source_CreateFromFile(&quot;filename&quot;)</functioncall>
    <functioncall prog_lang="lua">PCM_source = reaper.PCM_Source_CreateFromFile(string filename)</functioncall>
    <functioncall prog_lang="python">PCM_source RPR_PCM_Source_CreateFromFile(String filename)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#PCM_Source_CreateFromFileEx">PCM_Source_CreateFromFileEx</a>.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_source" retvalname="PCM_source">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="filename" parmname="filename">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Source_CreateFromFileEx</slug>
    <functioncall prog_lang="cpp">PCM_source* PCM_Source_CreateFromFileEx(const char* filename, bool forcenoMidiImp)</functioncall>
    <functioncall prog_lang="eel">PCM_source PCM_Source_CreateFromFileEx(&quot;filename&quot;, bool forcenoMidiImp)</functioncall>
    <functioncall prog_lang="lua">PCM_source = reaper.PCM_Source_CreateFromFileEx(string filename, boolean forcenoMidiImp)</functioncall>
    <functioncall prog_lang="python">PCM_source RPR_PCM_Source_CreateFromFileEx(String filename, Boolean forcenoMidiImp)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_source" retvalname="PCM_source">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="filename" parmname="filename">

      </parameter>
      <parameter id="2" datatype="forcenoMidiImp" parmname="forcenoMidiImp">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Source_CreateFromType</slug>
    <functioncall prog_lang="cpp">PCM_source* PCM_Source_CreateFromType(const char* sourcetype)</functioncall>
    <functioncall prog_lang="eel">PCM_source PCM_Source_CreateFromType(&quot;sourcetype&quot;)</functioncall>
    <functioncall prog_lang="lua">PCM_source = reaper.PCM_Source_CreateFromType(string sourcetype)</functioncall>
    <functioncall prog_lang="python">PCM_source RPR_PCM_Source_CreateFromType(String sourcetype)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Create a PCM_source from a &quot;type&quot; (use this if you're going to load its state via LoadState/ProjectStateContext).<br/>
Valid types include &quot;WAVE&quot;, &quot;MIDI&quot;, or whatever plug-ins define as well.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_source" retvalname="PCM_source">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="sourcetype" parmname="sourcetype">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Source_Destroy</slug>
    <functioncall prog_lang="cpp">void PCM_Source_Destroy(PCM_source* src)</functioncall>
    <functioncall prog_lang="eel">PCM_Source_Destroy(PCM_source src)</functioncall>
    <functioncall prog_lang="lua">reaper.PCM_Source_Destroy(PCM_source src)</functioncall>
    <functioncall prog_lang="python">RPR_PCM_Source_Destroy(PCM_source src)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Deletes a PCM_source -- be sure that you remove any project reference before deleting a source
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Source_GetPeaks</slug>
    <functioncall prog_lang="cpp">int PCM_Source_GetPeaks(PCM_source* src, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</functioncall>
    <functioncall prog_lang="eel">int PCM_Source_GetPeaks(PCM_source src, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.PCM_Source_GetPeaks(PCM_source src, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)</functioncall>
    <functioncall prog_lang="python">(Int retval, PCM_source src, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_PCM_Source_GetPeaks(src, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). <br/>
Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). <br/>
extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
      <parameter id="2" datatype="peakrate" parmname="peakrate">

      </parameter>
      <parameter id="3" datatype="starttime" parmname="starttime">

      </parameter>
      <parameter id="4" datatype="numchannels" parmname="numchannels">

      </parameter>
      <parameter id="5" datatype="numsamplesperchannel" parmname="numsamplesperchannel">

      </parameter>
      <parameter id="6" datatype="want_extra_type" parmname="want_extra_type">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Source_GetSectionInfo</slug>
    <functioncall prog_lang="cpp">bool PCM_Source_GetSectionInfo(PCM_source* src, double* offsOut, double* lenOut, bool* revOut)</functioncall>
    <functioncall prog_lang="eel">bool PCM_Source_GetSectionInfo(PCM_source src, &amp;amp;offs, &amp;amp;len, bool &amp;amp;rev)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number offs, number len, boolean rev = reaper.PCM_Source_GetSectionInfo(PCM_source src)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, PCM_source src, Float offsOut, Float lenOut, Boolean revOut) = RPR_PCM_Source_GetSectionInfo(src, offsOut, lenOut, revOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
If a section/reverse block, retrieves offset/len/reverse. return true if success
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="offs" retvalname="offs">

      </retval>
      <retval id="3" datatype="len" retvalname="len">

      </retval>
      <retval id="4" datatype="rev" retvalname="rev">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PluginWantsAlwaysRunFx</slug>
    <functioncall prog_lang="cpp">void PluginWantsAlwaysRunFx(int amt)</functioncall>
    <functioncall prog_lang="eel">PluginWantsAlwaysRunFx(int amt)</functioncall>
    <functioncall prog_lang="lua">reaper.PluginWantsAlwaysRunFx(integer amt)</functioncall>
    <functioncall prog_lang="python">RPR_PluginWantsAlwaysRunFx(Int amt)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="amt" parmname="amt">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PreventUIRefresh</slug>
    <functioncall prog_lang="cpp">void PreventUIRefresh(int prevent_count)</functioncall>
    <functioncall prog_lang="eel">PreventUIRefresh(int prevent_count)</functioncall>
    <functioncall prog_lang="lua">reaper.PreventUIRefresh(integer prevent_count)</functioncall>
    <functioncall prog_lang="python">RPR_PreventUIRefresh(Int prevent_count)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="prevent_count" parmname="prevent_count">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ReaScriptError</slug>
    <functioncall prog_lang="cpp">void ReaScriptError(const char* errmsg)</functioncall>
    <functioncall prog_lang="eel">ReaScriptError(&quot;errmsg&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.ReaScriptError(string errmsg)</functioncall>
    <functioncall prog_lang="python">RPR_ReaScriptError(String errmsg)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Causes REAPER to display the error message after the current ReaScript finishes. When Reaper's IDE is open, it will display it at the bottom of the IDE.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="errmsg" parmname="errmsg">
the message to show
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>RecursiveCreateDirectory</slug>
    <functioncall prog_lang="cpp">int RecursiveCreateDirectory(const char* path, size_t ignored)</functioncall>
    <functioncall prog_lang="eel">int RecursiveCreateDirectory(&quot;path&quot;, size_t ignored)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.RecursiveCreateDirectory(string path, integer ignored)</functioncall>
    <functioncall prog_lang="python">Int RPR_RecursiveCreateDirectory(String path, Unknown ignored)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Creates a new directory. You can recursivly create directories, means: if the higher directories don't exist, the will also be automatically created.<br/>
returns positive value on success, 0 on failure.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="path" parmname="path">
the directory-path to be created
      </parameter>
      <parameter id="2" datatype="ignored" parmname="ignored">
unknown
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     create
     recursive
     directory
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>RefreshToolbar</slug>
    <functioncall prog_lang="cpp">void RefreshToolbar(int command_id)</functioncall>
    <functioncall prog_lang="eel">RefreshToolbar(int command_id)</functioncall>
    <functioncall prog_lang="lua">reaper.RefreshToolbar(integer command_id)</functioncall>
    <functioncall prog_lang="python">RPR_RefreshToolbar(Int command_id)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Refreshes the toolbar-buttons, associated with a specific command_id/action See <a href="#RefreshToolbar2">RefreshToolbar2</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="command_id" parmname="command_id">
the command_id-number of the action, whose toolbar button you want to toggle. see [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions
      </parameter>
    </parameters>
    <tags>
     userinterfacer
     toolbar
     toggle
     command
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>RefreshToolbar2</slug>
    <functioncall prog_lang="cpp">void RefreshToolbar2(int section_id, int command_id)</functioncall>
    <functioncall prog_lang="eel">RefreshToolbar2(int section_id, int command_id)</functioncall>
    <functioncall prog_lang="lua">reaper.RefreshToolbar2(integer section_id, integer command_id)</functioncall>
    <functioncall prog_lang="python">RPR_RefreshToolbar2(Int section_id, Int command_id)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Refreshes the toolbar-buttons, associated with a specific command_id/action within a certain section
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="section_id" parmname="section_id">
the section, in which the action lies
      </parameter>
      <parameter id="2" datatype="command_id" parmname="command_id">
the command_id-number of the action, whose toolbar button you want to toggle. see [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions
      </parameter>
    </parameters>
    <tags>
     userinterfacer
     toolbar
     toggle
     command
     section
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>relative_fn</slug>
    <functioncall prog_lang="cpp">void relative_fn(const char* in, char* out, int out_sz)</functioncall>
    <functioncall prog_lang="eel">relative_fn(&quot;in&quot;, #out)</functioncall>
    <functioncall prog_lang="lua">string out = reaper.relative_fn(string in, string out)</functioncall>
    <functioncall prog_lang="python">(String in, String out, Int out_sz) = RPR_relative_fn(in, out, out_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Makes a filename &quot;in&quot; relative to the current project, if any.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="out" retvalname="out">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="in" parmname="in">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>RemoveTrackSend</slug>
    <functioncall prog_lang="cpp">bool RemoveTrackSend(MediaTrack* tr, int category, int sendidx)</functioncall>
    <functioncall prog_lang="eel">bool RemoveTrackSend(MediaTrack tr, int category, int sendidx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.RemoveTrackSend(MediaTrack tr, integer category, integer sendidx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_RemoveTrackSend(MediaTrack tr, Int category, Int sendidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Remove a send/receive/hardware output. See <a href="#CreateTrackSend">CreateTrackSend</a>, <a href="#GetSetTrackSendInfo">GetSetTrackSendInfo</a>, <a href="#GetTrackSendInfo_Value">GetTrackSendInfo_Value</a>, <a href="#SetTrackSendInfo_Value">SetTrackSendInfo_Value</a>, <a href="#GetTrackNumSends">GetTrackNumSends</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, removing worked; false, removing didn't work(e.g. does not exist)
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">
the MediaTrack-object, in which you want to remove send/receive/hwouts
      </parameter>
      <parameter id="2" datatype="category" parmname="category">
less than 0, receives; 0, sends; greater than 0, hardware outputs
      </parameter>
      <parameter id="3" datatype="sendidx" parmname="sendidx">
the idx of the send/receive/hwoutput to remove. 0, the first; 1 for the second, etc
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>RenderFileSection</slug>
    <functioncall prog_lang="cpp">bool RenderFileSection(const char* source_filename, const char* target_filename, double start_percent, double end_percent, double playrate)</functioncall>
    <functioncall prog_lang="eel">bool RenderFileSection(&quot;source_filename&quot;, &quot;target_filename&quot;, start_percent, end_percent, playrate)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.RenderFileSection(string source_filename, string target_filename, number start_percent, number end_percent, number playrate)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_RenderFileSection(String source_filename, String target_filename, Float start_percent, Float end_percent, Float playrate)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Not available while playing back.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="source_filename" parmname="source_filename">

      </parameter>
      <parameter id="2" datatype="target_filename" parmname="target_filename">

      </parameter>
      <parameter id="3" datatype="start_percent" parmname="start_percent">

      </parameter>
      <parameter id="4" datatype="end_percent" parmname="end_percent">

      </parameter>
      <parameter id="5" datatype="playrate" parmname="playrate">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>ReorderSelectedTracks</slug>
    <functioncall prog_lang="cpp">bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)</functioncall>
    <functioncall prog_lang="eel">bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.ReorderSelectedTracks(integer beforeTrackIdx, integer makePrevFolder)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_ReorderSelectedTracks(Int beforeTrackIdx, Int makePrevFolder)</functioncall>
    <requires>
      Reaper=5.90
      Lua=5.3
    </requires>
    <description>
Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. <br/>
makePrevFolder=0 for normal, <br/>
   1 = as child of track preceding track specified by beforeTrackIdx, <br/>
   2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, if it was successful; false, if not(e.g. no tracks were selected)
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="beforeTrackIdx">
the number of track, before which you want to move the selected tracks; zero-based(0 for track 1, 1 for track 2, etc)
      </parameter>
      <parameter id="2" datatype="integer" parmname="makePrevFolder">
decides, whether the track before the moved tracks(beforeTrackIdx-1) shall be a folder-track. Does only    <br/>
apply, when beforeTrackIdx&gt;0(a track above the moved tracks exists).<br/>
0, don't make track beforeTrackIdx-1 a folder track; <br/>
1, make track beforeTrackIdx-1 a folder track<br/>
2, if track beforeTrackIdx-1 is the last track in folder, extend the folder(make the last moved track the last track in folder.
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     move
     selected
     tracks
     folder
     last folder
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Resample_EnumModes</slug>
    <functioncall prog_lang="cpp">const char* Resample_EnumModes(int mode)</functioncall>
    <functioncall prog_lang="eel">bool Resample_EnumModes(#retval, int mode)</functioncall>
    <functioncall prog_lang="lua">string = reaper.Resample_EnumModes(integer mode)</functioncall>
    <functioncall prog_lang="python">String RPR_Resample_EnumModes(Int mode)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>resolve_fn</slug>
    <functioncall prog_lang="cpp">void resolve_fn(const char* in, char* out, int out_sz)</functioncall>
    <functioncall prog_lang="eel">resolve_fn(&quot;in&quot;, #out)</functioncall>
    <functioncall prog_lang="lua">string out = reaper.resolve_fn(string in, string out)</functioncall>
    <functioncall prog_lang="python">(String in, String out, Int out_sz) = RPR_resolve_fn(in, out, out_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#resolve_fn2">resolve_fn2</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="out" retvalname="out">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="in" parmname="in">

      </parameter>
      <parameter id="2" datatype="out" parmname="out">

      </parameter>
      <parameter id="3" datatype="out_sz" parmname="out_sz">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>resolve_fn2</slug>
    <functioncall prog_lang="cpp">void resolve_fn2(const char* in, char* out, int out_sz, const char* checkSubDirOptional)</functioncall>
    <functioncall prog_lang="eel">resolve_fn2(&quot;in&quot;, #out, optional &quot;checkSubDir&quot;)</functioncall>
    <functioncall prog_lang="lua">string out = reaper.resolve_fn2(string in, string out, optional string checkSubDir)</functioncall>
    <functioncall prog_lang="python">(String in, String out, Int out_sz, String checkSubDirOptional) = RPR_resolve_fn2(in, out, out_sz, checkSubDirOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Resolves a filename &quot;in&quot; by using project settings etc. If no file found, out will be a copy of in.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="out" retvalname="out">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="in" parmname="in">

      </parameter>
      <parameter id="2" datatype="out" parmname="out">

      </parameter>
      <parameter id="3" datatype="out_sz" parmname="out_sz">

      </parameter>
      <parameter id="4" datatype="checkSubDir" parmname="checkSubDir">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ReverseNamedCommandLookup</slug>
    <functioncall prog_lang="cpp">const char* ReverseNamedCommandLookup(int command_id)</functioncall>
    <functioncall prog_lang="eel">bool ReverseNamedCommandLookup(#retval, int command_id)</functioncall>
    <functioncall prog_lang="lua">string = reaper.ReverseNamedCommandLookup(integer command_id)</functioncall>
    <functioncall prog_lang="python">String RPR_ReverseNamedCommandLookup(Int command_id)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return &quot;SWS_ABOUT&quot;), it will be NULL if command_id is a native action.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the ActionCommandID of the command/script/action
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="command_id" parmname="command_id">
the command/script/action, whose ActionCommandID you want to have
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     command
     id
     actioncommand
     id
     lookup
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ScaleFromEnvelopeMode</slug>
    <functioncall prog_lang="cpp">double ScaleFromEnvelopeMode(int scaling_mode, double val)</functioncall>
    <functioncall prog_lang="eel">double ScaleFromEnvelopeMode(int scaling_mode, val)</functioncall>
    <functioncall prog_lang="lua">number = reaper.ScaleFromEnvelopeMode(integer scaling_mode, number val)</functioncall>
    <functioncall prog_lang="python">Float RPR_ScaleFromEnvelopeMode(Int scaling_mode, Float val)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#GetEnvelopeScalingMode">GetEnvelopeScalingMode</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="scaling_mode" parmname="scaling_mode">

      </parameter>
      <parameter id="2" datatype="val" parmname="val">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ScaleToEnvelopeMode</slug>
    <functioncall prog_lang="cpp">double ScaleToEnvelopeMode(int scaling_mode, double val)</functioncall>
    <functioncall prog_lang="eel">double ScaleToEnvelopeMode(int scaling_mode, val)</functioncall>
    <functioncall prog_lang="lua">number = reaper.ScaleToEnvelopeMode(integer scaling_mode, number val)</functioncall>
    <functioncall prog_lang="python">Float RPR_ScaleToEnvelopeMode(Int scaling_mode, Float val)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#GetEnvelopeScalingMode">GetEnvelopeScalingMode</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="scaling_mode" parmname="scaling_mode">

      </parameter>
      <parameter id="2" datatype="val" parmname="val">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SelectAllMediaItems</slug>
    <functioncall prog_lang="cpp">void SelectAllMediaItems(ReaProject* proj, bool selected)</functioncall>
    <functioncall prog_lang="eel">SelectAllMediaItems(ReaProject proj, bool selected)</functioncall>
    <functioncall prog_lang="lua">reaper.SelectAllMediaItems(ReaProject proj, boolean selected)</functioncall>
    <functioncall prog_lang="python">RPR_SelectAllMediaItems(ReaProject proj, Boolean selected)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Selects or deselects all MediaItems in a project.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="selected" parmname="selected">
<p>true, select; false, deselect</p>

      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     mediaitem
     select
     deselect
     all
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SelectProjectInstance</slug>
    <functioncall prog_lang="cpp">void SelectProjectInstance(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">SelectProjectInstance(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">reaper.SelectProjectInstance(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">RPR_SelectProjectInstance(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Switch to another opened project/projecttab.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     switch
     select
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetActiveTake</slug>
    <functioncall prog_lang="cpp">void SetActiveTake(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">SetActiveTake(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">reaper.SetActiveTake(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">RPR_SetActiveTake(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
set this take active in this media item
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">
the MediaItem_Take, you want to set as active-take in the MediaItem it is associated with
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetAutomationMode</slug>
    <functioncall prog_lang="cpp">void SetAutomationMode(int mode, bool onlySel)</functioncall>
    <functioncall prog_lang="eel">SetAutomationMode(int mode, bool onlySel)</functioncall>
    <functioncall prog_lang="lua">reaper.SetAutomationMode(integer mode, boolean onlySel)</functioncall>
    <functioncall prog_lang="python">RPR_SetAutomationMode(Int mode, Boolean onlySel)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets all or selected tracks to mode.<br/>
<br/>
Includes the master-track.
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="mode" parmname="mode">
the automation-mode<br/>
0, Trim/read<br/>
1, Read<br/>
2, Touch<br/>
3, Write<br/>
4, Latch<br/>
5 and higher no mode selected
      </parameter>
      <parameter id="2" datatype="onlySel" parmname="onlySel">
true, only selected tracks; false, all tracks including master-track
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     set
     mode
     trim
     read
     touch
     write
     latch
     selected
     deselected
     master
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetCurrentBPM</slug>
    <functioncall prog_lang="cpp">void SetCurrentBPM(ReaProject* __proj, double bpm, bool wantUndo)</functioncall>
    <functioncall prog_lang="eel">SetCurrentBPM(ReaProject __proj, bpm, bool wantUndo)</functioncall>
    <functioncall prog_lang="lua">reaper.SetCurrentBPM(ReaProject __proj, number bpm, boolean wantUndo)</functioncall>
    <functioncall prog_lang="python">RPR_SetCurrentBPM(ReaProject __proj, Float bpm, Boolean wantUndo)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
set current BPM in project, set wantUndo=true to add undo point
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="__proj" parmname="__proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="bpm" parmname="bpm">
<p>the new beats per minute-value</p>

      </parameter>
      <parameter id="3" datatype="wantUndo" parmname="wantUndo">
<p>true, add undo point; false, no undo point added</p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     set
     bpm
     undo
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetCursorContext</slug>
    <functioncall prog_lang="cpp">void SetCursorContext(int mode, TrackEnvelope* envInOptional)</functioncall>
    <functioncall prog_lang="eel">SetCursorContext(int mode, TrackEnvelope envIn)</functioncall>
    <functioncall prog_lang="lua">reaper.SetCursorContext(integer mode, TrackEnvelope envIn)</functioncall>
    <functioncall prog_lang="python">RPR_SetCursorContext(Int mode, TrackEnvelope envInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Change the focus for the cursor.<br/>
You must use this to change the focus for the cursor programmatically. <br/>
<br/>
mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or envIn==NULL to clear the current track/take envelope selection)
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="mode" parmname="mode">
the focus to be changed to<br/>
0, track panels<br/>
1, arrange window<br/>
2, arrangewindow and env
      </parameter>
      <parameter id="2" datatype="envIn" parmname="envIn">
TrackEnvelope-object of the envelope to select(only when mode=2, else set to nil); nil, clear current track/envelope-selection;
      </parameter>
    </parameters>
    <tags>
     arrangeviewmanagement
     envelope
     focus
     set
     cursor
     context
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetEditCurPos</slug>
    <functioncall prog_lang="cpp">void SetEditCurPos(double time, bool moveview, bool seekplay)</functioncall>
    <functioncall prog_lang="eel">SetEditCurPos(time, bool moveview, bool seekplay)</functioncall>
    <functioncall prog_lang="lua">reaper.SetEditCurPos(number time, boolean moveview, boolean seekplay)</functioncall>
    <functioncall prog_lang="python">RPR_SetEditCurPos(Float time, Boolean moveview, Boolean seekplay)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Change the position of the edit-cursor in the current project.
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="time" parmname="time">
the new editcursor-position in seconds
      </parameter>
      <parameter id="2" datatype="moveview" parmname="moveview">
true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)
      </parameter>
      <parameter id="3" datatype="seekplay" parmname="seekplay">
true, when playing, restart playing at the new edit-cursor position; false, keep playing at &quot;old&quot; playposition
      </parameter>
    </parameters>
    <tags>
     transportmanagement
     set
     edit
     cursor
     position
     seekplay
     move view
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetEditCurPos2</slug>
    <functioncall prog_lang="cpp">void SetEditCurPos2(ReaProject* proj, double time, bool moveview, bool seekplay)</functioncall>
    <functioncall prog_lang="eel">SetEditCurPos2(ReaProject proj, time, bool moveview, bool seekplay)</functioncall>
    <functioncall prog_lang="lua">reaper.SetEditCurPos2(ReaProject proj, number time, boolean moveview, boolean seekplay)</functioncall>
    <functioncall prog_lang="python">RPR_SetEditCurPos2(ReaProject proj, Float time, Boolean moveview, Boolean seekplay)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Change the position of the edit-cursor in a specific project.       
    </description>
    <chapter_context>
      Transport Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="time" parmname="time">
<p>the new editcursor-position in seconds</p>

      </parameter>
      <parameter id="3" datatype="moveview" parmname="moveview">
<p>true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)</p>

      </parameter>
      <parameter id="4" datatype="seekplay" parmname="seekplay">
<p>true, when playing, restart playing at the new edit-cursor position; false, keep playing at “old” playposition</p>

      </parameter>
    </parameters>
    <tags>
     transportmanagement
     set
     edit
     cursor
     position
     seekplay
     move view
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetEnvelopePoint</slug>
    <functioncall prog_lang="cpp">bool SetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</functioncall>
    <functioncall prog_lang="eel">bool SetEnvelopePoint(TrackEnvelope envelope, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetEnvelopePoint(TrackEnvelope envelope, integer ptidx, optional number timeIn, optional number valueIn, optional number shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePoint(envelope, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="ptidx" parmname="ptidx">

      </parameter>
      <parameter id="3" datatype="shapeIn" parmname="shapeIn">

      </parameter>
      <parameter id="4" datatype="shapeIn" parmname="shapeIn">

      </parameter>
      <parameter id="5" datatype="shapeIn" parmname="shapeIn">

      </parameter>
      <parameter id="6" datatype="selectedIn" parmname="selectedIn">

      </parameter>
      <parameter id="7" datatype="selectedIn" parmname="selectedIn">

      </parameter>
      <parameter id="8" datatype="noSortIn" parmname="noSortIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetEnvelopePointEx</slug>
    <functioncall prog_lang="cpp">bool SetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</functioncall>
    <functioncall prog_lang="eel">bool SetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx, optional number timeIn, optional number valueIn, optional number shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
<p>Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration, even if the automation item is trimmed so that not all points are visible. Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations. See <a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a>, <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="autoitem_idx" parmname="autoitem_idx">

      </parameter>
      <parameter id="3" datatype="ptidx" parmname="ptidx">

      </parameter>
      <parameter id="4" datatype="shapeIn" parmname="shapeIn">

      </parameter>
      <parameter id="5" datatype="shapeIn" parmname="shapeIn">

      </parameter>
      <parameter id="6" datatype="shapeIn" parmname="shapeIn">

      </parameter>
      <parameter id="7" datatype="selectedIn" parmname="selectedIn">

      </parameter>
      <parameter id="8" datatype="selectedIn" parmname="selectedIn">

      </parameter>
      <parameter id="9" datatype="noSortIn" parmname="noSortIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetEnvelopeStateChunk</slug>
    <functioncall prog_lang="cpp">bool SetEnvelopeStateChunk(TrackEnvelope* env, const char* str, bool isundoOptional)</functioncall>
    <functioncall prog_lang="eel">bool SetEnvelopeStateChunk(TrackEnvelope env, &quot;str&quot;, bool isundo)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetEnvelopeStateChunk(TrackEnvelope env, String str, Boolean isundoOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets the RPPXML state of an envelope, returns true if successful. 
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, setting worked; false, setting didn't work
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="env" parmname="env">
the TrackEnvelope, whose statechunk you want to set
      </parameter>
      <parameter id="2" datatype="str" parmname="str">
the new statechunk, that you want to set
      </parameter>
      <parameter id="3" datatype="isundo" parmname="isundo">
undo flag is a performance/caching hint.
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     set
     statechunk
     envelope
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetExtState</slug>
    <functioncall prog_lang="cpp">void SetExtState(const char* section, const char* key, const char* value, bool persist)</functioncall>
    <functioncall prog_lang="eel">SetExtState(&quot;section&quot;, &quot;key&quot;, &quot;value&quot;, bool persist)</functioncall>
    <functioncall prog_lang="lua">reaper.SetExtState(string section, string key, string value, boolean persist)</functioncall>
    <functioncall prog_lang="python">RPR_SetExtState(String section, String key, String value, Boolean persist)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Set the extended state value for a specific section and key.</p>
<p>Persistant states are stored into the reaper-extstate.ini in the resources-folder.</p>
<p>See <a href="#GetExtState">GetExtState</a>, <a href="#DeleteExtState">DeleteExtState</a>, <a href="#HasExtState">HasExtState</a>.</p>

    </description>
    <chapter_context>
      Extended States
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">
the section, in which the key-value is stored
      </parameter>
      <parameter id="2" datatype="key" parmname="key">
the key, which stores the value
      </parameter>
      <parameter id="3" datatype="value" parmname="value">
the new value to be set
      </parameter>
      <parameter id="4" datatype="persist" parmname="persist">
true, means the value should be stored and reloaded the next time REAPER is opened
      </parameter>
    </parameters>
    <tags>
     extendedstates
     state
     value
     key
     section
     set
     persist
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetGlobalAutomationOverride</slug>
    <functioncall prog_lang="cpp">void SetGlobalAutomationOverride(int mode)</functioncall>
    <functioncall prog_lang="eel">SetGlobalAutomationOverride(int mode)</functioncall>
    <functioncall prog_lang="lua">reaper.SetGlobalAutomationOverride(integer mode)</functioncall>
    <functioncall prog_lang="python">RPR_SetGlobalAutomationOverride(Int mode)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
mode: see [GetGlobalAutomationOverride](GetGlobalAutomationOverride)
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetItemStateChunk</slug>
    <functioncall prog_lang="cpp">bool SetItemStateChunk(MediaItem* item, const char* str, bool isundoOptional)</functioncall>
    <functioncall prog_lang="eel">bool SetItemStateChunk(MediaItem item, &quot;str&quot;, bool isundo)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetItemStateChunk(MediaItem item, string str, boolean isundo)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetItemStateChunk(MediaItem item, String str, Boolean isundoOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="str" parmname="str">

      </parameter>
      <parameter id="3" datatype="isundo" parmname="isundo">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMasterTrackVisibility</slug>
    <functioncall prog_lang="cpp">int SetMasterTrackVisibility(int flag)</functioncall>
    <functioncall prog_lang="eel">int SetMasterTrackVisibility(int flag)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.SetMasterTrackVisibility(integer flag)</functioncall>
    <functioncall prog_lang="python">Int RPR_SetMasterTrackVisibility(Int flag)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>set &amp;amp;1 to show the master track in the TCP, &amp;amp;2 to show in the mixer. Returns the previous visibility state. See <a href="#GetMasterTrackVisibility">GetMasterTrackVisibility</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="flag" parmname="flag">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMediaItemInfo_Value</slug>
    <functioncall prog_lang="cpp">bool SetMediaItemInfo_Value(MediaItem* item, const char* parmname, double newvalue)</functioncall>
    <functioncall prog_lang="eel">bool SetMediaItemInfo_Value(MediaItem item, &quot;parmname&quot;, newvalue)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetMediaItemInfo_Value(MediaItem item, string parmname, number newvalue)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetMediaItemInfo_Value(MediaItem item, String parmname, Float newvalue)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set media item numerical-value attributes.<br/>
B_MUTE : bool * to muted state<br/>
B_LOOPSRC : bool * to loop source<br/>
B_ALLTAKESPLAY : bool * to all takes play<br/>
B_UISEL : bool * to ui selected<br/>
C_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly<br/>
C_LOCK : char * to one char of lock flags (&amp;amp;1 is locked, currently)<br/>
D_VOL : double * of item volume (volume bar)<br/>
D_POSITION : double * of item position (seconds)<br/>
D_LENGTH : double * of item length (seconds)<br/>
D_SNAPOFFSET : double * of item snap offset (seconds)<br/>
D_FADEINLEN : double * of item fade in length (manual, seconds)<br/>
D_FADEOUTLEN : double * of item fade out length (manual, seconds)<br/>
D_FADEINDIR : double * of item fade in curve [-1; 1]<br/>
D_FADEOUTDIR : double * of item fade out curve [-1; 1]<br/>
D_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)<br/>
D_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)<br/>
C_FADEINSHAPE : int * to fadein shape, 0=linear, ...<br/>
C_FADEOUTSHAPE : int * to fadeout shape<br/>
I_GROUPID : int * to group ID (0 = no group)<br/>
I_LASTY : int * to last y position in track (readonly)<br/>
I_LASTH : int * to last height in track (readonly)<br/>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).<br/>
I_CURTAKE : int * to active take<br/>
IP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)<br/>
F_FREEMODE_Y : float * to free mode y position (0..1)<br/>
F_FREEMODE_H : float * to free mode height (0..1)
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="parmname" parmname="parmname">

      </parameter>
      <parameter id="3" datatype="newvalue" parmname="newvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMediaItemLength</slug>
    <functioncall prog_lang="cpp">bool SetMediaItemLength(MediaItem* item, double length, bool refreshUI)</functioncall>
    <functioncall prog_lang="eel">bool SetMediaItemLength(MediaItem item, length, bool refreshUI)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetMediaItemLength(MediaItem item, number length, boolean refreshUI)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetMediaItemLength(MediaItem item, Float length, Boolean refreshUI)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Redraws the screen only if refreshUI == true. See <a href="#UpdateArrange">UpdateArrange</a>().</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="length" parmname="length">

      </parameter>
      <parameter id="3" datatype="refreshUI" parmname="refreshUI">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMediaItemPosition</slug>
    <functioncall prog_lang="cpp">bool SetMediaItemPosition(MediaItem* item, double position, bool refreshUI)</functioncall>
    <functioncall prog_lang="eel">bool SetMediaItemPosition(MediaItem item, position, bool refreshUI)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetMediaItemPosition(MediaItem item, number position, boolean refreshUI)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetMediaItemPosition(MediaItem item, Float position, Boolean refreshUI)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Redraws the screen only if refreshUI == true. See <a href="#UpdateArrange">UpdateArrange</a>().</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="position" parmname="position">

      </parameter>
      <parameter id="3" datatype="refreshUI" parmname="refreshUI">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMediaItemSelected</slug>
    <functioncall prog_lang="cpp">void SetMediaItemSelected(MediaItem* item, bool selected)</functioncall>
    <functioncall prog_lang="eel">SetMediaItemSelected(MediaItem item, bool selected)</functioncall>
    <functioncall prog_lang="lua">reaper.SetMediaItemSelected(MediaItem item, boolean selected)</functioncall>
    <functioncall prog_lang="python">RPR_SetMediaItemSelected(MediaItem item, Boolean selected)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="selected" parmname="selected">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMediaItemTake_Source</slug>
    <functioncall prog_lang="cpp">bool SetMediaItemTake_Source(MediaItem_Take* take, PCM_source* source)</functioncall>
    <functioncall prog_lang="eel">bool SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)</functioncall>
    <requires>
      Reaper=5.961
      Lua=5.3
    </requires>
    <description>
Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="source" parmname="source">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMediaItemTakeInfo_Value</slug>
    <functioncall prog_lang="cpp">bool SetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname, double newvalue)</functioncall>
    <functioncall prog_lang="eel">bool SetMediaItemTakeInfo_Value(MediaItem_Take take, &quot;parmname&quot;, newvalue)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname, number newvalue)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname, Float newvalue)</functioncall>
    <requires>
      Reaper=5.976
      Lua=5.3
    </requires>
    <description>
Set media item take numerical-value attributes.<br/>
D_STARTOFFS : double *, start offset in take of item<br/>
D_VOL : double *, take volume (negative if take polarity is flipped)<br/>
D_PAN : double *, take pan<br/>
D_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)<br/>
D_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)<br/>
D_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)<br/>
B_PPITCH, bool *, preserve pitch when changing rate<br/>
I_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)<br/>
I_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter<br/>
I_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).<br/>
IP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="parmname" parmname="parmname">

      </parameter>
      <parameter id="3" datatype="newvalue" parmname="newvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMediaTrackInfo_Value</slug>
    <functioncall prog_lang="cpp">bool SetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname, double newvalue)</functioncall>
    <functioncall prog_lang="eel">bool SetMediaTrackInfo_Value(MediaTrack tr, &quot;parmname&quot;, newvalue)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetMediaTrackInfo_Value(MediaTrack tr, string parmname, number newvalue)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetMediaTrackInfo_Value(MediaTrack tr, String parmname, Float newvalue)</functioncall>
    <requires>
      Reaper=5.982
      Lua=5.3
    </requires>
    <description>
Set track numerical-value attributes.<br/>
B_MUTE : bool * : mute flag<br/>
B_PHASE : bool * : invert track phase<br/>
IP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)<br/>
I_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place<br/>
I_FXEN : int * : 0=fx bypassed, nonzero = fx active<br/>
I_RECARM : int * : 0=not record armed, 1=record armed<br/>
I_RECINPUT : int * : record input. &amp;lt;0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 6 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)<br/>
I_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace<br/>
I_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))<br/>
I_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)<br/>
I_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)<br/>
I_NCHAN : int * : number of track channels, must be 2-64, even<br/>
I_SELECTED : int * : track selected? 0 or 1<br/>
I_WNDH : int * : current TCP window height including envelopes (Read-only)<br/>
I_TCPH : int * : current TCP window height not including envelopes (Read-only)<br/>
I_TCPY : int * : current TCP window Y position relative to top of arrange view (Read-only)<br/>
I_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc<br/>
I_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children<br/>
I_MIDIHWOUT : int * : track midi hardware output index (&amp;gt;0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))<br/>
I_PERFFLAGS : int * : track perf flags (&amp;amp;1=no media buffering, &amp;amp;2=no anticipative FX)<br/>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).<br/>
I_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels<br/>
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)<br/>
D_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)<br/>
D_PAN : double * : trim pan of track (-1..1)<br/>
D_WIDTH : double * : width of track (-1..1)<br/>
D_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6<br/>
D_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6<br/>
I_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)<br/>
D_PANLAW : double * : pan law of track. &amp;gt;0 for project default, 1.0 for +0dB, etc<br/>
P_ENV:&amp;lt;envchunkname : read only, returns TrackEnvelope *. To get a specific TrackEnvelope, call with :&amp;lt;VOLENV, :&amp;lt;PANENV, etc appended.<br/>
B_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master<br/>
B_SHOWINTCP : bool * : show track panel in tcp -- do not use on master<br/>
B_MAINSEND : bool * : track sends audio to parent<br/>
C_MAINSEND_OFFS : char * : track send to parent channel offset<br/>
B_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)<br/>
C_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly<br/>
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)<br/>
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="parmname" parmname="parmname">

      </parameter>
      <parameter id="3" datatype="newvalue" parmname="newvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMIDIEditorGrid</slug>
    <functioncall prog_lang="cpp">void SetMIDIEditorGrid(ReaProject* project, double division)</functioncall>
    <functioncall prog_lang="eel">SetMIDIEditorGrid(ReaProject project, division)</functioncall>
    <functioncall prog_lang="lua">reaper.SetMIDIEditorGrid(ReaProject project, number division)</functioncall>
    <functioncall prog_lang="python">RPR_SetMIDIEditorGrid(ReaProject project, Float division)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="project" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="division" parmname="division">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMixerScroll</slug>
    <functioncall prog_lang="cpp">MediaTrack* SetMixerScroll(MediaTrack* leftmosttrack)</functioncall>
    <functioncall prog_lang="eel">MediaTrack SetMixerScroll(MediaTrack leftmosttrack)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.SetMixerScroll(MediaTrack leftmosttrack)</functioncall>
    <functioncall prog_lang="python">MediaTrack RPR_SetMixerScroll(MediaTrack leftmosttrack)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">
the new leftmost-track as MediaTrack-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="leftmosttrack" parmname="leftmosttrack">
the desired leftmost-MediaTrack
      </parameter>
    </parameters>
    <tags>
     userinterface
     set
     mixer
     scroll
     leftmost
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetMouseModifier</slug>
    <functioncall prog_lang="cpp">void SetMouseModifier(const char* context, int modifier_flag, const char* action)</functioncall>
    <functioncall prog_lang="eel">SetMouseModifier(&quot;context&quot;, int modifier_flag, &quot;action&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.SetMouseModifier(string context, integer modifier_flag, string action)</functioncall>
    <functioncall prog_lang="python">RPR_SetMouseModifier(String context, Int modifier_flag, String action)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Set the mouse modifier assignment for a specific modifier key assignment, in a specific context. Context is a string like “MM_CTX_ITEM”. Find these strings by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini. Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win. (macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.) For left-click and double-click contexts, the action can be any built-in command ID number or any custom action ID string. Find built-in command IDs in the REAPER actions window (enable “show action IDs” in the context menu), and find custom action ID strings in reaper-kb.ini. For built-in mouse modifier behaviors, find action IDs (which will be low numbers) by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini. Assigning an action of -1 will reset that mouse modifier behavior to factory default. See <a href="#GetMouseModifier">GetMouseModifier</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="context" parmname="context">

      </parameter>
      <parameter id="2" datatype="modifier_flag" parmname="modifier_flag">

      </parameter>
      <parameter id="3" datatype="action" parmname="action">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetOnlyTrackSelected</slug>
    <functioncall prog_lang="cpp">void SetOnlyTrackSelected(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">SetOnlyTrackSelected(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">reaper.SetOnlyTrackSelected(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">RPR_SetOnlyTrackSelected(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set exactly one track selected, deselect all others
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack to be selected
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     set
     selected
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetProjectGrid</slug>
    <functioncall prog_lang="cpp">void SetProjectGrid(ReaProject* project, double division)</functioncall>
    <functioncall prog_lang="eel">SetProjectGrid(ReaProject project, division)</functioncall>
    <functioncall prog_lang="lua">reaper.SetProjectGrid(ReaProject project, number division)</functioncall>
    <functioncall prog_lang="python">RPR_SetProjectGrid(ReaProject project, Float division)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="project" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="division" parmname="division">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetProjectMarker</slug>
    <functioncall prog_lang="cpp">bool SetProjectMarker(int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</functioncall>
    <functioncall prog_lang="eel">bool SetProjectMarker(int markrgnindexnumber, bool isrgn, pos, rgnend, &quot;name&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetProjectMarker(integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetProjectMarker(Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/alters an existing project-marker
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, setting the marker worked; false, setting the marker didn't work
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="markrgnindexnumber" parmname="markrgnindexnumber">
the shown number of the marker to be altered
      </parameter>
      <parameter id="2" datatype="isrgn" parmname="isrgn">
true, marker is a region; false, marker is a normal marker
      </parameter>
      <parameter id="3" datatype="pos" parmname="pos">
the position of the new marker in seconds
      </parameter>
      <parameter id="4" datatype="rgnend" parmname="rgnend">
the end of a region, if isrgn is true
      </parameter>
      <parameter id="5" datatype="name" parmname="name">
shown name of the marker
      </parameter>
    </parameters>
    <tags>
     markermanagement
     set
     marker
     region
     position
     name
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>SetProjectMarker2</slug>
    <functioncall prog_lang="cpp">bool SetProjectMarker2(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</functioncall>
    <functioncall prog_lang="eel">bool SetProjectMarker2(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, &quot;name&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetProjectMarker2(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetProjectMarker2(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/alters an existing project-marker in a given project.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, setting the marker worked; false, setting the marker didn't work
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="markrgnindexnumber" parmname="markrgnindexnumber">
<p>the shown number of the marker to be altered</p>

      </parameter>
      <parameter id="3" datatype="isrgn" parmname="isrgn">
<p>true, marker is a region; false, marker is a normal marker</p>

      </parameter>
      <parameter id="4" datatype="pos" parmname="pos">
<p>the position of the new marker in seconds</p>

      </parameter>
      <parameter id="5" datatype="rgnend" parmname="rgnend">
<p>the end of a region, if isrgn is true</p>

      </parameter>
      <parameter id="6" datatype="name" parmname="name">
<p>shown name of the marker</p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     set
     marker
     region
     position
     name
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetProjectMarker3</slug>
    <functioncall prog_lang="cpp">bool SetProjectMarker3(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color)</functioncall>
    <functioncall prog_lang="eel">bool SetProjectMarker3(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, &quot;name&quot;, int color)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetProjectMarker3(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetProjectMarker3(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/alters an existing project-marker in a given project. Differs from SetProjectMarker2 and SetProjectMarker, that you can set color as well.<br/>
Color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, setting the marker worked; false, setting the marker didn't work
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="markrgnindexnumber" parmname="markrgnindexnumber">
<p>the shown number of the marker to be altered</p>

      </parameter>
      <parameter id="3" datatype="isrgn" parmname="isrgn">
<p>true, marker is a region; false, marker is a normal marker</p>

      </parameter>
      <parameter id="4" datatype="pos" parmname="pos">
<p>the position of the new marker in seconds</p>

      </parameter>
      <parameter id="5" datatype="rgnend" parmname="rgnend">
<p>the end of a region, if isrgn is true</p>

      </parameter>
      <parameter id="6" datatype="name" parmname="name">
<p>shown name of the marker</p>

      </parameter>
      <parameter id="7" datatype="color" parmname="color">
<p>the new color-value as native color-value</p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     set
     marker
     region
     position
     name
     project
     color
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetProjectMarker4</slug>
    <functioncall prog_lang="cpp">bool SetProjectMarker4(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color, int flags)</functioncall>
    <functioncall prog_lang="eel">bool SetProjectMarker4(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, &quot;name&quot;, int color, int flags)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetProjectMarker4(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color, integer flags)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetProjectMarker4(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color, Int flags)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets/alters an existing project-marker in a given project.<br/>
color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&amp;amp;1 to clear name
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, setting the marker worked; false, setting the marker didn't work
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="markrgnindexnumber" parmname="markrgnindexnumber">
<p>the shown number of the marker to be altered</p>

      </parameter>
      <parameter id="3" datatype="isrgn" parmname="isrgn">
<p>true, marker is a region; false, marker is a normal marker</p>

      </parameter>
      <parameter id="4" datatype="pos" parmname="pos">
<p>the position of the new marker in seconds</p>

      </parameter>
      <parameter id="5" datatype="rgnend" parmname="rgnend">
<p>the end of a region, if isrgn is true</p>

      </parameter>
      <parameter id="6" datatype="name" parmname="name">
<p>shown name of the marker</p>

      </parameter>
      <parameter id="7" datatype="color" parmname="color">
<p>the new color-value as native color-value</p>

      </parameter>
      <parameter id="8" datatype="flags" parmname="flags">
<p>&amp;1 to clear name</p>

      </parameter>
    </parameters>
    <tags>
     markermanagement
     set
     marker
     region
     position
     name
     project
     color
     clear name
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetProjectMarkerByIndex</slug>
    <functioncall prog_lang="cpp">bool SetProjectMarkerByIndex(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color)</functioncall>
    <functioncall prog_lang="eel">bool SetProjectMarkerByIndex(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, &quot;name&quot;, int color)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetProjectMarkerByIndex(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetProjectMarkerByIndex(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#SetProjectMarkerByIndex2">SetProjectMarkerByIndex2</a>.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="markrgnidx" parmname="markrgnidx">


      </parameter>
      <parameter id="3" datatype="isrgn" parmname="isrgn">


      </parameter>
      <parameter id="4" datatype="pos" parmname="pos">


      </parameter>
      <parameter id="5" datatype="rgnend" parmname="rgnend">


      </parameter>
      <parameter id="6" datatype="IDnumber" parmname="IDnumber">


      </parameter>
      <parameter id="7" datatype="name" parmname="name">


      </parameter>
      <parameter id="8" datatype="color" parmname="color">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetProjectMarkerByIndex2</slug>
    <functioncall prog_lang="cpp">bool SetProjectMarkerByIndex2(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color, int flags)</functioncall>
    <functioncall prog_lang="eel">bool SetProjectMarkerByIndex2(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, &quot;name&quot;, int color, int flags)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetProjectMarkerByIndex2(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color, integer flags)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetProjectMarkerByIndex2(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color, Int flags)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see <a href="#EnumProjectMarkers3">EnumProjectMarkers3</a>), rather than representing the displayed marker/region ID number (see <a href="#SetProjectMarker3">SetProjectMarker3</a>). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&amp;amp;1 to clear name.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="markrgnidx" parmname="markrgnidx">


      </parameter>
      <parameter id="3" datatype="isrgn" parmname="isrgn">


      </parameter>
      <parameter id="4" datatype="pos" parmname="pos">


      </parameter>
      <parameter id="5" datatype="rgnend" parmname="rgnend">


      </parameter>
      <parameter id="6" datatype="IDnumber" parmname="IDnumber">


      </parameter>
      <parameter id="7" datatype="name" parmname="name">


      </parameter>
      <parameter id="8" datatype="color" parmname="color">


      </parameter>
      <parameter id="9" datatype="flags" parmname="flags">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetProjExtState</slug>
    <functioncall prog_lang="cpp">int SetProjExtState(ReaProject* proj, const char* extname, const char* key, const char* value)</functioncall>
    <functioncall prog_lang="eel">int SetProjExtState(ReaProject proj, &quot;extname&quot;, &quot;key&quot;, &quot;value&quot;)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.SetProjExtState(ReaProject proj, string extname, string key, string value)</functioncall>
    <functioncall prog_lang="python">Int RPR_SetProjExtState(ReaProject proj, String extname, String key, String value)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or "“, all extended data for that extname will be deleted. If val is NULL or”", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See <a href="#GetProjExtState">GetProjExtState</a>, <a href="#EnumProjExtState">EnumProjExtState</a>.</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of key/value-pairs in the extname
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="extname" parmname="extname">
<p>the section, in which the key/value is stored</p>

      </parameter>
      <parameter id="3" datatype="key" parmname="key">
<p>the key, that stores the value</p>

      </parameter>
      <parameter id="4" datatype="value" parmname="value">
<p>the value, that’s stored in the key</p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     extended
     state
     value
     section
     key
     extname
     set
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetRegionRenderMatrix</slug>
    <functioncall prog_lang="cpp">void SetRegionRenderMatrix(ReaProject* proj, int regionindex, MediaTrack* track, int addorremove)</functioncall>
    <functioncall prog_lang="eel">SetRegionRenderMatrix(ReaProject proj, int regionindex, MediaTrack track, int addorremove)</functioncall>
    <functioncall prog_lang="lua">reaper.SetRegionRenderMatrix(ReaProject proj, integer regionindex, MediaTrack track, integer addorremove)</functioncall>
    <functioncall prog_lang="python">RPR_SetRegionRenderMatrix(ReaProject proj, Int regionindex, MediaTrack track, Int addorremove)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Add (addorremove &amp;gt; 0) or remove (addorremove &amp;gt; 0) a track from this region when using the region render matrix.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="regionindex" parmname="regionindex">


      </parameter>
      <parameter id="3" datatype="track" parmname="track">


      </parameter>
      <parameter id="4" datatype="addorremove" parmname="addorremove">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTakeStretchMarker</slug>
    <functioncall prog_lang="cpp">int SetTakeStretchMarker(MediaItem_Take* take, int idx, double pos, const double* srcposInOptional)</functioncall>
    <functioncall prog_lang="eel">int SetTakeStretchMarker(MediaItem_Take take, int idx, pos, optional srcposIn)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.SetTakeStretchMarker(MediaItem_Take take, integer idx, number pos, optional number srcposIn)</functioncall>
    <functioncall prog_lang="python">Int RPR_SetTakeStretchMarker(MediaItem_Take take, Int idx, Float pos, const double srcposInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Adds or updates a stretch marker. If idx&amp;gt;0, stretch marker will be added. If idx&amp;gt;=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="idx" parmname="idx">

      </parameter>
      <parameter id="3" datatype="pos" parmname="pos">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTakeStretchMarkerSlope</slug>
    <functioncall prog_lang="cpp">bool SetTakeStretchMarkerSlope(MediaItem_Take* take, int idx, double slope)</functioncall>
    <functioncall prog_lang="eel">bool SetTakeStretchMarkerSlope(MediaItem_Take take, int idx, slope)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetTakeStretchMarkerSlope(MediaItem_Take take, integer idx, number slope)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetTakeStretchMarkerSlope(MediaItem_Take take, Int idx, Float slope)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#GetTakeStretchMarkerSlope">GetTakeStretchMarkerSlope</a></p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="idx" parmname="idx">

      </parameter>
      <parameter id="3" datatype="slope" parmname="slope">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTempoTimeSigMarker</slug>
    <functioncall prog_lang="cpp">bool SetTempoTimeSigMarker(ReaProject* proj, int ptidx, double timepos, int measurepos, double beatpos, double bpm, int timesig_num, int timesig_denom, bool lineartempo)</functioncall>
    <functioncall prog_lang="eel">bool SetTempoTimeSigMarker(ReaProject proj, int ptidx, timepos, int measurepos, beatpos, bpm, int timesig_num, int timesig_denom, bool lineartempo)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetTempoTimeSigMarker(ReaProject proj, integer ptidx, number timepos, integer measurepos, number beatpos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempo)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetTempoTimeSigMarker(ReaProject proj, Int ptidx, Float timepos, Int measurepos, Float beatpos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempo)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See <a href="#CountTempoTimeSigMarkers">CountTempoTimeSigMarkers</a>, <a href="#GetTempoTimeSigMarker">GetTempoTimeSigMarker</a>, <a href="#AddTempoTimeSigMarker">AddTempoTimeSigMarker</a>, <a href="#DeleteTempoTimeSigMarker">DeleteTempoTimeSigMarker</a>.</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="ptidx" parmname="ptidx">


      </parameter>
      <parameter id="3" datatype="timepos" parmname="timepos">


      </parameter>
      <parameter id="4" datatype="measurepos" parmname="measurepos">


      </parameter>
      <parameter id="5" datatype="beatpos" parmname="beatpos">


      </parameter>
      <parameter id="6" datatype="bpm" parmname="bpm">


      </parameter>
      <parameter id="7" datatype="timesig_num" parmname="timesig_num">


      </parameter>
      <parameter id="8" datatype="timesig_denom" parmname="timesig_denom">


      </parameter>
      <parameter id="9" datatype="lineartempo" parmname="lineartempo">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetToggleCommandState</slug>
    <functioncall prog_lang="cpp">bool SetToggleCommandState(int section_id, int command_id, int state)</functioncall>
    <functioncall prog_lang="eel">bool SetToggleCommandState(int section_id, int command_id, int state)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetToggleCommandState(integer section_id, integer command_id, integer state)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetToggleCommandState(Int section_id, Int command_id, Int state)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See <a href="#RefreshToolbar2">RefreshToolbar2</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section_id" parmname="section_id">

      </parameter>
      <parameter id="2" datatype="command_id" parmname="command_id">

      </parameter>
      <parameter id="3" datatype="state" parmname="state">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackAutomationMode</slug>
    <functioncall prog_lang="cpp">void SetTrackAutomationMode(MediaTrack* tr, int mode)</functioncall>
    <functioncall prog_lang="eel">SetTrackAutomationMode(MediaTrack tr, int mode)</functioncall>
    <functioncall prog_lang="lua">reaper.SetTrackAutomationMode(MediaTrack tr, integer mode)</functioncall>
    <functioncall prog_lang="python">RPR_SetTrackAutomationMode(MediaTrack tr, Int mode)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set automation-mode for a specific MediaTrack.
    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">
the MediaTrack, whose automation-mode you want to set
      </parameter>
      <parameter id="2" datatype="mode" parmname="mode">
the automation-mode<br/>
0, Trim/read<br/>
1, Read<br/>
2, Touch<br/>
3, Write<br/>
4, Latch<br/>
5 and higher no mode selected
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     set
     mode
     trim
     read
     touch
     write
     latch
     master
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackColor</slug>
    <functioncall prog_lang="cpp">void SetTrackColor(MediaTrack* track, int color)</functioncall>
    <functioncall prog_lang="eel">SetTrackColor(MediaTrack track, int color)</functioncall>
    <functioncall prog_lang="lua">reaper.SetTrackColor(MediaTrack track, integer color)</functioncall>
    <functioncall prog_lang="python">RPR_SetTrackColor(MediaTrack track, Int color)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Set the custom track color, color is OS dependent (i.e. <a href="#ColorToNative">ColorToNative(r,g,b)</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack, whose color you want to change
      </parameter>
      <parameter id="2" datatype="color" parmname="color">
the new color-value
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     set
     color
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackMIDILyrics</slug>
    <functioncall prog_lang="cpp">bool SetTrackMIDILyrics(MediaTrack* track, int flag, const char* str)</functioncall>
    <functioncall prog_lang="eel">bool SetTrackMIDILyrics(MediaTrack track, int flag, &quot;str&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetTrackMIDILyrics(MediaTrack track, integer flag, string str)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetTrackMIDILyrics(MediaTrack track, Int flag, String str)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: “1.1.2for measure 1 beat 21.1for measure 2 beat 1”). See <a href="#GetTrackMIDILyrics">GetTrackMIDILyrics</a></p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="flag" parmname="flag">

      </parameter>
      <parameter id="3" datatype="str" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackMIDINoteName</slug>
    <functioncall prog_lang="cpp">bool SetTrackMIDINoteName(int track, int pitch, int chan, const char* name)</functioncall>
    <functioncall prog_lang="eel">bool SetTrackMIDINoteName(int track, int pitch, int chan, &quot;name&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetTrackMIDINoteName(integer track, integer pitch, integer chan, string name)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetTrackMIDINoteName(Int track, Int pitch, Int chan, String name)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
channel &amp;gt; 0 assigns these note names to all channels.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="pitch" parmname="pitch">

      </parameter>
      <parameter id="3" datatype="chan" parmname="chan">

      </parameter>
      <parameter id="4" datatype="name" parmname="name">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackMIDINoteNameEx</slug>
    <functioncall prog_lang="cpp">bool SetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan, const char* name)</functioncall>
    <functioncall prog_lang="eel">bool SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, int pitch, int chan, &quot;name&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan, string name)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan, String name)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
channel &amp;gt; 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="track" parmname="track">


      </parameter>
      <parameter id="3" datatype="pitch" parmname="pitch">


      </parameter>
      <parameter id="4" datatype="chan" parmname="chan">


      </parameter>
      <parameter id="5" datatype="name" parmname="name">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackSelected</slug>
    <functioncall prog_lang="cpp">void SetTrackSelected(MediaTrack* track, bool selected)</functioncall>
    <functioncall prog_lang="eel">SetTrackSelected(MediaTrack track, bool selected)</functioncall>
    <functioncall prog_lang="lua">reaper.SetTrackSelected(MediaTrack track, boolean selected)</functioncall>
    <functioncall prog_lang="python">RPR_SetTrackSelected(MediaTrack track, Boolean selected)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set a MediaTrack selected/deselected. Will retain already existing selection, so you can set multiple tracks selected that way.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack, whose selection state you want to set
      </parameter>
      <parameter id="2" datatype="selected" parmname="selected">
true, set MediaTrack to selected; false, set MediaTrack to deselected
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     select
     deselect
     unselect
     track
     set
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackSendInfo_Value</slug>
    <functioncall prog_lang="cpp">bool SetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname, double newvalue)</functioncall>
    <functioncall prog_lang="eel">bool SetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, &quot;parmname&quot;, newvalue)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname, number newvalue)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname, Float newvalue)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Set send/receive/hardware output numerical-value attributes, return true on success. category is &amp;lt;0 for receives, 0=sends, &amp;gt;0 for hardware outputs parameter names:</p>
<pre><code>B\_MUTE : bool \*
B\_PHASE : bool \*, true to flip phase
B\_MONO : bool \*
D\_VOL : double \*, 1.0 = +0dB etc
D\_PAN : double \*, -1..+1
D\_PANLAW : double \*,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I\_SENDMODE : int \*, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I\_AUTOMODE : int \* : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I\_SRCCHAN : int \*, index,&amp;amp;amp;1024=mono, -1 for none
I\_DSTCHAN : int \*, index, &amp;amp;amp;1024=mono, otherwise stereo pair, hwout:&amp;amp;amp;512=rearoute
I\_MIDIFLAGS : int \*, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee [CreateTrackSend](#CreateTrackSend), [RemoveTrackSend](#RemoveTrackSend), [GetTrackNumSends](#GetTrackNumSends).</code></pre>
<p>See <a href="#CreateTrackSend">CreateTrackSend</a>, <a href="#RemoveTrackSend">RemoveTrackSend</a>, <a href="#GetTrackNumSends">GetTrackNumSends</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="category" parmname="category">

      </parameter>
      <parameter id="3" datatype="sendidx" parmname="sendidx">

      </parameter>
      <parameter id="4" datatype="parmname" parmname="parmname">

      </parameter>
      <parameter id="5" datatype="newvalue" parmname="newvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackSendUIPan</slug>
    <functioncall prog_lang="cpp">bool SetTrackSendUIPan(MediaTrack* track, int send_idx, double pan, int isend)</functioncall>
    <functioncall prog_lang="eel">bool SetTrackSendUIPan(MediaTrack track, int send_idx, pan, int isend)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetTrackSendUIPan(MediaTrack track, integer send_idx, number pan, integer isend)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetTrackSendUIPan(MediaTrack track, Int send_idx, Float pan, Int isend)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
send_idx&amp;lt;0 for receives, &amp;gt;=0 for hw ouputs, &amp;gt;=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="send_idx" parmname="send_idx">

      </parameter>
      <parameter id="3" datatype="pan" parmname="pan">

      </parameter>
      <parameter id="4" datatype="isend" parmname="isend">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackSendUIVol</slug>
    <functioncall prog_lang="cpp">bool SetTrackSendUIVol(MediaTrack* track, int send_idx, double vol, int isend)</functioncall>
    <functioncall prog_lang="eel">bool SetTrackSendUIVol(MediaTrack track, int send_idx, vol, int isend)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetTrackSendUIVol(MediaTrack track, integer send_idx, number vol, integer isend)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetTrackSendUIVol(MediaTrack track, Int send_idx, Float vol, Int isend)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
send_idx&amp;lt;0 for receives, &amp;gt;=0 for hw ouputs, &amp;gt;=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="send_idx" parmname="send_idx">

      </parameter>
      <parameter id="3" datatype="vol" parmname="vol">

      </parameter>
      <parameter id="4" datatype="isend" parmname="isend">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetTrackStateChunk</slug>
    <functioncall prog_lang="cpp">bool SetTrackStateChunk(MediaTrack* track, const char* str, bool isundoOptional)</functioncall>
    <functioncall prog_lang="eel">bool SetTrackStateChunk(MediaTrack track, &quot;str&quot;, bool isundo)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SetTrackStateChunk(MediaTrack track, string str, boolean isundo)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_SetTrackStateChunk(MediaTrack track, String str, Boolean isundoOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, setting worked; false, setting didn't work
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack, whose statechunk you want to set
      </parameter>
      <parameter id="2" datatype="str" parmname="str">
the new trackstatechunk, you want to set this MediaTrack to
      </parameter>
      <parameter id="3" datatype="isundo" parmname="isundo">
undo flag is a performance/caching hint
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     set
     track
     statechunk
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ShowPopupMenu</slug>
    <functioncall prog_lang="cpp">void ShowPopupMenu(const char* name, int x, int y, HWND hwndParentOptional, void* ctxOptional, int ctx2Optional, int ctx3Optional)</functioncall>
    <functioncall prog_lang="eel">ShowPopupMenu(&quot;name&quot;, int x, int y, HWND hwndParent, void* ctx, int ctx2, int ctx3)</functioncall>
    <functioncall prog_lang="lua">reaper.ShowPopupMenu(string name, integer x, integer y, optional HWND hwndParent, identifier ctx, integer ctx2, integer ctx3)</functioncall>
    <functioncall prog_lang="python">RPR_ShowPopupMenu(String name, Int x, Int y, HWND hwndParentOptional, void ctxOptional, Int ctx2Optional, Int ctx3Optional)</functioncall>
    <requires>
      Reaper=5.92
      Lua=5.3
    </requires>
    <description>
shows a Reaper-context menu.<br/>
You can decide, which menu to show and to which track/item/envelope/envelope-point/automation-item you want this context-menu to be applied to.<br/>
e.g. you can decide, whether settings in the context-menu &quot;track_panel&quot; shall be applied to track 1, track 2, etc<br/>
<br/>
You can also apply this to the selected track/mediaitem/envelope.<br/>
The parameters name and ctx influence each other, means: name=&quot;item&quot; and ctx=reaper.GetMediaItem(0,1) apply the mediaitem-contextmenu to the Mediaitem-object, given to parameter ctx.<br/>
The choice of the parameter name also influences, whether ctxOptional and ctx2Optional can be set or not and what they mean.<br/>
<br/>
Blocks further execution of a script, until the context-menu is closed.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="string" parmname="name">
the name of the context-menu to show<br/>
can be track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item
      </parameter>
      <parameter id="2" datatype="integer" parmname="x">
x-position of the contextmenu-display-position in pixels
      </parameter>
      <parameter id="3" datatype="integer" parmname="y">
y-position of the contextmenu-display-position in pixels
      </parameter>
      <parameter id="4" datatype="optional HWND" parmname="hwndParent">
the HWND-window in which to display the context-menu. <br/>
nil, Reaper's main window will be used as HWND
      </parameter>
      <parameter id="5" datatype="optional identifier" parmname="ctx">
the object for which to apply the contextmenu. Options selected in the context-menu will be applied to this track/item; <br/>
nil, use the selected track(s)/item(s)/envelope, depending on the chosen context-menu-name in parameter name; <br/>
     shows no context-menu, when no track/item/envelope is selected;<br/>
<br/>
possible objects and their corresponding name-parameter:<br/>
  - MediaTrack(track_input, track_panel, track_routing)<br/>
  - MediaItem(item)<br/>
  - TrackEnvelope(also Take-Envelopes!) (envelope, envelope_point)<br/>
when using any other context-menu-name, this parameter will be ignored by Reaper.
      </parameter>
      <parameter id="6" datatype="optional" parmname="ctxOptional">
when ctx is a TrackEnvelope(or nil) and menu=&quot;envelope_point&quot;, <br/>
     this is the idx of the envelope-point to which to apply the context-menu<br/>
when ctx is a TrackEnvelope(or nil) and menu=&quot;envelope_item&quot;, <br/>
     this reflects the automation-item in chosen envelope, to which to apply the context-menu(1 or higher for automation-item 1 or higher)
      </parameter>
      <parameter id="7" datatype="optional" parmname="ctx2Optional">
when ctx is a TrackEnvelope(or nil) and menu=&quot;envelope_point&quot;, this reflects, <br/>
0, whether to apply the context-menu to the point in the envelope-lane or<br/>
1 or higher, whether to apply the context-menu to the point in automation-item 1 or higher; <br/>
nil, assumes 0(envelope-lane)
      </parameter>
    </parameters>
    <tags>
     userinterface
     context
     menu
     track
     envelope
     item
     automation item
     envelope point
     position
     hwnd
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ShowActionList</slug>
    <functioncall prog_lang="cpp">void ShowActionList(KbdSectionInfo* caller, HWND callerWnd)</functioncall>
    <functioncall prog_lang="eel">ShowActionList(KbdSectionInfo caller, HWND callerWnd)</functioncall>
    <functioncall prog_lang="lua">reaper.ShowActionList(KbdSectionInfo caller, optional HWND callerWnd)</functioncall>
    <functioncall prog_lang="python">RPR_ShowActionList(KbdSectionInfo caller, HWND callerWnd)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="caller" parmname="caller">

      </parameter>
      <parameter id="2" datatype="optional HWND" parmname="callerWnd">
the HWND that shall call the ActionList; can be nil
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ShowConsoleMsg</slug>
    <functioncall prog_lang="cpp">void ShowConsoleMsg(const char* msg)</functioncall>
    <functioncall prog_lang="eel">ShowConsoleMsg(&quot;msg&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.ShowConsoleMsg(string msg)</functioncall>
    <functioncall prog_lang="python">RPR_ShowConsoleMsg(String msg)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Show a message to the user (also useful for debugging). Send “” for newline, "" to clear the console. See <a href="#ClearConsole">ClearConsole</a></p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="msg" parmname="msg">
a message to be shown in ReaConsole
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     message
     console
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ShowMessageBox</slug>
    <functioncall prog_lang="cpp">int ShowMessageBox(const char* msg, const char* title, int type)</functioncall>
    <functioncall prog_lang="eel">int ShowMessageBox(&quot;msg&quot;, &quot;title&quot;, int type)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.ShowMessageBox(string msg, string title, integer type)</functioncall>
    <functioncall prog_lang="python">Int RPR_ShowMessageBox(String msg, String title, Int type)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Shows Messagebox with user-clickable buttons.           
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the button pressed by the user<br/>
1, OK<br/>
2, CANCEL<br/>
3, ABORT<br/>
4, RETRY<br/>
5, IGNORE<br/>
6, YES<br/>
7, NO
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="msg" parmname="msg">
the message, that shall be shown in messagebox
      </parameter>
      <parameter id="2" datatype="title" parmname="title">
the title of the messagebox
      </parameter>
      <parameter id="3" datatype="type" parmname="type">
which buttons shall be shown in the messagebox<br/>
0, OK<br/>
1, OK CANCEL<br/>
2, ABORT RETRY IGNORE<br/>
3, YES NO CANCEL<br/>
4, YES NO<br/>
5, RETRY CANCEL
      </parameter>
    </parameters>
    <tags>
     user
     interface
     input
     dialog
     messagebox
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SLIDER2DB</slug>
    <functioncall prog_lang="cpp">double SLIDER2DB(double y)</functioncall>
    <functioncall prog_lang="eel">double SLIDER2DB(y)</functioncall>
    <functioncall prog_lang="lua">number = reaper.SLIDER2DB(number y)</functioncall>
    <functioncall prog_lang="python">Float RPR_SLIDER2DB(Float y)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Convert slider-value to it's dB-value-equivalent.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the slider-value, you want to convert to dB
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="y" parmname="y">
the dB-value
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     slider
     db
     convert
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SnapToGrid</slug>
    <functioncall prog_lang="cpp">double SnapToGrid(ReaProject* project, double time_pos)</functioncall>
    <functioncall prog_lang="eel">double SnapToGrid(ReaProject project, time_pos)</functioncall>
    <functioncall prog_lang="lua">number = reaper.SnapToGrid(ReaProject project, number time_pos)</functioncall>
    <functioncall prog_lang="python">Float RPR_SnapToGrid(ReaProject project, Float time_pos)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="project" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="time_pos" parmname="time_pos">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SoloAllTracks</slug>
    <functioncall prog_lang="cpp">void SoloAllTracks(int solo)</functioncall>
    <functioncall prog_lang="eel">SoloAllTracks(int solo)</functioncall>
    <functioncall prog_lang="lua">reaper.SoloAllTracks(integer solo)</functioncall>
    <functioncall prog_lang="python">RPR_SoloAllTracks(Int solo)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Set solo-state for all tracks.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="solo" parmname="solo">
the new solo state for all tracks<br/>
0, solo off<br/>
1, solo, ignore routing<br/>
2, solo in place
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     solo
     state
     set
     on
     off
     solo in place
     solo ignore routing
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Splash_GetWnd</slug>
    <functioncall prog_lang="cpp">HWND Splash_GetWnd()</functioncall>
    <functioncall prog_lang="eel">HWND Splash_GetWnd()</functioncall>
    <functioncall prog_lang="lua">HWND = reaper.Splash_GetWnd()</functioncall>
    <functioncall prog_lang="python">HWND RPR_Splash_GetWnd()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HWND" retvalname="HWND">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SplitMediaItem</slug>
    <functioncall prog_lang="cpp">MediaItem* SplitMediaItem(MediaItem* item, double position)</functioncall>
    <functioncall prog_lang="eel">MediaItem SplitMediaItem(MediaItem item, position)</functioncall>
    <functioncall prog_lang="lua">MediaItem = reaper.SplitMediaItem(MediaItem item, number position)</functioncall>
    <functioncall prog_lang="python">MediaItem RPR_SplitMediaItem(MediaItem item, Float position)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
The original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="MediaItem">
the new MediaItem on the right side of the split
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">
the MediaItem so be split
      </parameter>
      <parameter id="2" datatype="position" parmname="position">
the split-position in seconds
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     split
     item
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>stringToGuid</slug>
    <functioncall prog_lang="cpp">void stringToGuid(const char* str, GUID* g)</functioncall>
    <functioncall prog_lang="eel">stringToGuid(&quot;str&quot;, #gGUID)</functioncall>
    <functioncall prog_lang="lua">string gGUID = reaper.stringToGuid(string str, string gGUID)</functioncall>
    <functioncall prog_lang="python">RPR_stringToGuid(String str, GUID g)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="gGUID" retvalname="gGUID">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>StuffMIDIMessage</slug>
    <functioncall prog_lang="cpp">void StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)</functioncall>
    <functioncall prog_lang="eel">StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)</functioncall>
    <functioncall prog_lang="lua">reaper.StuffMIDIMessage(integer mode, integer msg1, integer msg2, integer msg3)</functioncall>
    <functioncall prog_lang="python">RPR_StuffMIDIMessage(Int mode, Int msg1, Int msg2, Int msg3)</functioncall>
    <requires>
      Reaper=5.92
      Lua=5.3
    </requires>
    <description>
<p>Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see <a href="#GetNumMIDIOutputs">GetNumMIDIOutputs</a>, <a href="#GetMIDIOutputName">GetMIDIOutputName</a>.</p>

    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="2" datatype="msg1" parmname="msg1">
modifier
      </parameter>
      <parameter id="3" datatype="msg2" parmname="msg2">
note/keyname
      </parameter>
      <parameter id="4" datatype="msg3" parmname="msg3">
velocity
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_AddByName</slug>
    <functioncall prog_lang="cpp">int TakeFX_AddByName(MediaItem_Take* take, const char* fxname, int instantiate)</functioncall>
    <functioncall prog_lang="eel">int TakeFX_AddByName(MediaItem_Take take, &quot;fxname&quot;, int instantiate)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TakeFX_AddByName(MediaItem_Take take, string fxname, integer instantiate)</functioncall>
    <functioncall prog_lang="python">Int RPR_TakeFX_AddByName(MediaItem_Take take, String fxname, Int instantiate)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Adds or queries the position of a named FX in a take. Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fxname" parmname="fxname">

      </parameter>
      <parameter id="3" datatype="instantiate" parmname="instantiate">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_EndParamEdit</slug>
    <functioncall prog_lang="cpp">bool TakeFX_EndParamEdit(MediaItem_Take* take, int fx, int param)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_EndParamEdit(MediaItem_Take take, int fx, int param)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_EndParamEdit(MediaItem_Take take, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_EndParamEdit(MediaItem_Take take, Int fx, Int param)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_FormatParamValue</slug>
    <functioncall prog_lang="cpp">bool TakeFX_FormatParamValue(MediaItem_Take* take, int fx, int param, double val, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_FormatParamValue(MediaItem_Take take, int fx, int param, val, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_FormatParamValue(MediaItem_Take take, integer fx, integer param, number val, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, Float val, String buf, Int buf_sz) = RPR_TakeFX_FormatParamValue(take, fx, param, val, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Note: only works with FX that support Cockos VST extensions.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
      <parameter id="4" datatype="val" parmname="val">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>TakeFX_FormatParamValueNormalized</slug>
    <functioncall prog_lang="cpp">bool TakeFX_FormatParamValueNormalized(MediaItem_Take* take, int fx, int param, double value, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_FormatParamValueNormalized(MediaItem_Take take, int fx, int param, value, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_FormatParamValueNormalized(MediaItem_Take take, integer fx, integer param, number value, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TakeFX_FormatParamValueNormalized(take, fx, param, value, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Note: only works with FX that support Cockos VST extensions.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
      <parameter id="4" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetChainVisible</slug>
    <functioncall prog_lang="cpp">int TakeFX_GetChainVisible(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">int TakeFX_GetChainVisible(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TakeFX_GetChainVisible(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">Int RPR_TakeFX_GetChainVisible(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetCount</slug>
    <functioncall prog_lang="cpp">int TakeFX_GetCount(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">int TakeFX_GetCount(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TakeFX_GetCount(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">Int RPR_TakeFX_GetCount(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetEnabled</slug>
    <functioncall prog_lang="cpp">bool TakeFX_GetEnabled(MediaItem_Take* take, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetEnabled(MediaItem_Take take, int fx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_GetEnabled(MediaItem_Take take, integer fx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_GetEnabled(MediaItem_Take take, Int fx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#TakeFX_SetEnabled">TakeFX_SetEnabled</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetEnvelope</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* TakeFX_GetEnvelope(MediaItem_Take* take, int fxindex, int parameterindex, bool create)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope TakeFX_GetEnvelope(MediaItem_Take take, int fxindex, int parameterindex, bool create)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.TakeFX_GetEnvelope(MediaItem_Take take, integer fxindex, integer parameterindex, boolean create)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope RPR_TakeFX_GetEnvelope(MediaItem_Take take, Int fxindex, Int parameterindex, Boolean create)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fxindex" parmname="fxindex">

      </parameter>
      <parameter id="3" datatype="parameterindex" parmname="parameterindex">

      </parameter>
      <parameter id="4" datatype="create" parmname="create">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetFloatingWindow</slug>
    <functioncall prog_lang="cpp">HWND TakeFX_GetFloatingWindow(MediaItem_Take* take, int index)</functioncall>
    <functioncall prog_lang="eel">HWND TakeFX_GetFloatingWindow(MediaItem_Take take, int index)</functioncall>
    <functioncall prog_lang="lua">HWND = reaper.TakeFX_GetFloatingWindow(MediaItem_Take take, integer index)</functioncall>
    <functioncall prog_lang="python">HWND RPR_TakeFX_GetFloatingWindow(MediaItem_Take take, Int index)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns HWND of floating window for effect index, if any
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HWND" retvalname="HWND">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="index" parmname="index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetFormattedParamValue</slug>
    <functioncall prog_lang="cpp">bool TakeFX_GetFormattedParamValue(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetFormattedParamValue(MediaItem_Take take, int fx, int param, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetFormattedParamValue(MediaItem_Take take, integer fx, integer param, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, String buf, Int buf_sz) = RPR_TakeFX_GetFormattedParamValue(take, fx, param, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetFXGUID</slug>
    <functioncall prog_lang="cpp">GUID* TakeFX_GetFXGUID(MediaItem_Take* take, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetFXGUID(#retguid, MediaItem_Take take, int fx)</functioncall>
    <functioncall prog_lang="lua">string GUID = reaper.TakeFX_GetFXGUID(MediaItem_Take take, integer fx)</functioncall>
    <functioncall prog_lang="python">GUID RPR_TakeFX_GetFXGUID(MediaItem_Take take, Int fx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="GUID" retvalname="GUID">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetFXName</slug>
    <functioncall prog_lang="cpp">bool TakeFX_GetFXName(MediaItem_Take* take, int fx, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetFXName(MediaItem_Take take, int fx, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetFXName(MediaItem_Take take, integer fx, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, String buf, Int buf_sz) = RPR_TakeFX_GetFXName(take, fx, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetIOSize</slug>
    <functioncall prog_lang="cpp">int TakeFX_GetIOSize(MediaItem_Take* take, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional)</functioncall>
    <functioncall prog_lang="eel">int TakeFX_GetIOSize(MediaItem_Take take, int fx, optional int &amp;amp;inputPins, optional int &amp;amp;outputPins)</functioncall>
    <functioncall prog_lang="lua">integer retval, optional number inputPins, optional number outputPins = reaper.TakeFX_GetIOSize(MediaItem_Take take, integer fx)</functioncall>
    <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int fx, Int inputPinsOutOptional, Int outputPinsOutOptional) = RPR_TakeFX_GetIOSize(take, fx, inputPinsOutOptional, outputPinsOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="inputPins" retvalname="inputPins">

      </retval>
      <retval id="3" datatype="outputPins" retvalname="outputPins">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetNamedConfigParm</slug>
    <functioncall prog_lang="cpp">bool TakeFX_GetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, char* bufOut, int bufOut_sz)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetNamedConfigParm(MediaItem_Take take, int fx, &quot;parmname&quot;, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetNamedConfigParm(MediaItem_Take take, integer fx, string parmname)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, String parmname, String bufOut, Int bufOut_sz) = RPR_TakeFX_GetNamedConfigParm(take, fx, parmname, bufOut, bufOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
gets plug-in specific named configuration value (returns true on success)
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="parmname" parmname="parmname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetNumParams</slug>
    <functioncall prog_lang="cpp">int TakeFX_GetNumParams(MediaItem_Take* take, int fx)</functioncall>
    <functioncall prog_lang="eel">int TakeFX_GetNumParams(MediaItem_Take take, int fx)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TakeFX_GetNumParams(MediaItem_Take take, integer fx)</functioncall>
    <functioncall prog_lang="python">Int RPR_TakeFX_GetNumParams(MediaItem_Take take, Int fx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetOpen</slug>
    <functioncall prog_lang="cpp">bool TakeFX_GetOpen(MediaItem_Take* take, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetOpen(MediaItem_Take take, int fx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_GetOpen(MediaItem_Take take, integer fx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_GetOpen(MediaItem_Take take, Int fx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns true if this FX UI is open in the FX chain window or a floating window. See <a href="#TakeFX_SetOpen">TakeFX_SetOpen</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetParam</slug>
    <functioncall prog_lang="cpp">double TakeFX_GetParam(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut)</functioncall>
    <functioncall prog_lang="eel">double TakeFX_GetParam(MediaItem_Take take, int fx, int param, &amp;amp;minval, &amp;amp;maxval)</functioncall>
    <functioncall prog_lang="lua">number retval, number minval, number maxval = reaper.TakeFX_GetParam(MediaItem_Take take, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TakeFX_GetParam(take, fx, param, minvalOut, maxvalOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="minval" retvalname="minval">

      </retval>
      <retval id="3" datatype="maxval" retvalname="maxval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetParameterStepSizes</slug>
    <functioncall prog_lang="cpp">bool TakeFX_GetParameterStepSizes(MediaItem_Take* take, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetParameterStepSizes(MediaItem_Take take, int fx, int param, &amp;amp;step, &amp;amp;smallstep, &amp;amp;largestep, bool &amp;amp;istoggle)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TakeFX_GetParameterStepSizes(MediaItem_Take take, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TakeFX_GetParameterStepSizes(take, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="step" retvalname="step">

      </retval>
      <retval id="3" datatype="smallstep" retvalname="smallstep">

      </retval>
      <retval id="4" datatype="largestep" retvalname="largestep">

      </retval>
      <retval id="5" datatype="istoggle" retvalname="istoggle">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetParamEx</slug>
    <functioncall prog_lang="cpp">double TakeFX_GetParamEx(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</functioncall>
    <functioncall prog_lang="eel">double TakeFX_GetParamEx(MediaItem_Take take, int fx, int param, &amp;amp;minval, &amp;amp;maxval, &amp;amp;midval)</functioncall>
    <functioncall prog_lang="lua">number retval, number minval, number maxval, number midval = reaper.TakeFX_GetParamEx(MediaItem_Take take, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TakeFX_GetParamEx(take, fx, param, minvalOut, maxvalOut, midvalOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="minval" retvalname="minval">

      </retval>
      <retval id="3" datatype="maxval" retvalname="maxval">

      </retval>
      <retval id="4" datatype="midval" retvalname="midval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetParamName</slug>
    <functioncall prog_lang="cpp">bool TakeFX_GetParamName(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetParamName(MediaItem_Take take, int fx, int param, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TakeFX_GetParamName(MediaItem_Take take, integer fx, integer param, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, Int param, String buf, Int buf_sz) = RPR_TakeFX_GetParamName(take, fx, param, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetParamNormalized</slug>
    <functioncall prog_lang="cpp">double TakeFX_GetParamNormalized(MediaItem_Take* take, int fx, int param)</functioncall>
    <functioncall prog_lang="eel">double TakeFX_GetParamNormalized(MediaItem_Take take, int fx, int param)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TakeFX_GetParamNormalized(MediaItem_Take take, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">Float RPR_TakeFX_GetParamNormalized(MediaItem_Take take, Int fx, Int param)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetPinMappings</slug>
    <functioncall prog_lang="cpp">int TakeFX_GetPinMappings(MediaItem_Take* tr, int fx, int isOutput, int pin, int* high32OutOptional)</functioncall>
    <functioncall prog_lang="eel">int TakeFX_GetPinMappings(MediaItem_Take tr, int fx, int is, int pin, optional int &amp;amp;high32)</functioncall>
    <functioncall prog_lang="lua">integer retval, optional number high32 = reaper.TakeFX_GetPinMappings(MediaItem_Take tr, integer fx, integer is, integer pin)</functioncall>
    <functioncall prog_lang="python">(Int retval, MediaItem_Take tr, Int fx, Int isOutput, Int pin, Int high32OutOptional) = RPR_TakeFX_GetPinMappings(tr, fx, isOutput, pin, high32OutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="high32" retvalname="high32">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="is" parmname="is">

      </parameter>
      <parameter id="4" datatype="pin" parmname="pin">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetPreset</slug>
    <functioncall prog_lang="cpp">bool TakeFX_GetPreset(MediaItem_Take* take, int fx, char* presetname, int presetname_sz)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetPreset(MediaItem_Take take, int fx, #presetname)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string presetname = reaper.TakeFX_GetPreset(MediaItem_Take take, integer fx, string presetname)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Int fx, String presetname, Int presetname_sz) = RPR_TakeFX_GetPreset(take, fx, presetname, presetname_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See <a href="#TakeFX_SetPreset">TakeFX_SetPreset</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="presetname" retvalname="presetname">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetPresetIndex</slug>
    <functioncall prog_lang="cpp">int TakeFX_GetPresetIndex(MediaItem_Take* take, int fx, int* numberOfPresetsOut)</functioncall>
    <functioncall prog_lang="eel">int TakeFX_GetPresetIndex(MediaItem_Take take, int fx, int &amp;amp;numberOfPresets)</functioncall>
    <functioncall prog_lang="lua">integer retval, number numberOfPresets = reaper.TakeFX_GetPresetIndex(MediaItem_Take take, integer fx)</functioncall>
    <functioncall prog_lang="python">(Int retval, MediaItem_Take take, Int fx, Int numberOfPresetsOut) = RPR_TakeFX_GetPresetIndex(take, fx, numberOfPresetsOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See <a href="#TakeFX_SetPresetByIndex">TakeFX_SetPresetByIndex</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="numberOfPresets" retvalname="numberOfPresets">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetUserPresetFilename</slug>
    <functioncall prog_lang="cpp">void TakeFX_GetUserPresetFilename(MediaItem_Take* take, int fx, char* fn, int fn_sz)</functioncall>
    <functioncall prog_lang="eel">TakeFX_GetUserPresetFilename(MediaItem_Take take, int fx, #fn)</functioncall>
    <functioncall prog_lang="lua">string fn = reaper.TakeFX_GetUserPresetFilename(MediaItem_Take take, integer fx, string fn)</functioncall>
    <functioncall prog_lang="python">(MediaItem_Take take, Int fx, String fn, Int fn_sz) = RPR_TakeFX_GetUserPresetFilename(take, fx, fn, fn_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="fn" retvalname="fn">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_NavigatePresets</slug>
    <functioncall prog_lang="cpp">bool TakeFX_NavigatePresets(MediaItem_Take* take, int fx, int presetmove)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_NavigatePresets(MediaItem_Take take, int fx, int presetmove)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_NavigatePresets(MediaItem_Take take, integer fx, integer presetmove)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_NavigatePresets(MediaItem_Take take, Int fx, Int presetmove)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="presetmove" parmname="presetmove">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_SetEnabled</slug>
    <functioncall prog_lang="cpp">void TakeFX_SetEnabled(MediaItem_Take* take, int fx, bool enabled)</functioncall>
    <functioncall prog_lang="eel">TakeFX_SetEnabled(MediaItem_Take take, int fx, bool enabled)</functioncall>
    <functioncall prog_lang="lua">reaper.TakeFX_SetEnabled(MediaItem_Take take, integer fx, boolean enabled)</functioncall>
    <functioncall prog_lang="python">RPR_TakeFX_SetEnabled(MediaItem_Take take, Int fx, Boolean enabled)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#TakeFX_GetEnabled">TakeFX_GetEnabled</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="enabled" parmname="enabled">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_SetNamedConfigParm</slug>
    <functioncall prog_lang="cpp">bool TakeFX_SetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, const char* value)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_SetNamedConfigParm(MediaItem_Take take, int fx, &quot;parmname&quot;, &quot;value&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetNamedConfigParm(MediaItem_Take take, integer fx, string parmname, string value)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_SetNamedConfigParm(MediaItem_Take take, Int fx, String parmname, String value)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
gets plug-in specific named configuration value (returns true on success)
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="parmname" parmname="parmname">

      </parameter>
      <parameter id="4" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_SetOpen</slug>
    <functioncall prog_lang="cpp">void TakeFX_SetOpen(MediaItem_Take* take, int fx, bool open)</functioncall>
    <functioncall prog_lang="eel">TakeFX_SetOpen(MediaItem_Take take, int fx, bool open)</functioncall>
    <functioncall prog_lang="lua">reaper.TakeFX_SetOpen(MediaItem_Take take, integer fx, boolean open)</functioncall>
    <functioncall prog_lang="python">RPR_TakeFX_SetOpen(MediaItem_Take take, Int fx, Boolean open)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Open this FX UI. See <a href="#TakeFX_GetOpen">TakeFX_GetOpen</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="open" parmname="open">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_SetParam</slug>
    <functioncall prog_lang="cpp">bool TakeFX_SetParam(MediaItem_Take* take, int fx, int param, double val)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_SetParam(MediaItem_Take take, int fx, int param, val)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetParam(MediaItem_Take take, integer fx, integer param, number val)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_SetParam(MediaItem_Take take, Int fx, Int param, Float val)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
      <parameter id="4" datatype="val" parmname="val">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_SetParamNormalized</slug>
    <functioncall prog_lang="cpp">bool TakeFX_SetParamNormalized(MediaItem_Take* take, int fx, int param, double value)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_SetParamNormalized(MediaItem_Take take, int fx, int param, value)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetParamNormalized(MediaItem_Take take, integer fx, integer param, number value)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_SetParamNormalized(MediaItem_Take take, Int fx, Int param, Float value)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
      <parameter id="4" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_SetPinMappings</slug>
    <functioncall prog_lang="cpp">bool TakeFX_SetPinMappings(MediaItem_Take* tr, int fx, int isOutput, int pin, int low32bits, int hi32bits)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_SetPinMappings(MediaItem_Take tr, int fx, int is, int pin, int low32bits, int hi32bits)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetPinMappings(MediaItem_Take tr, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_SetPinMappings(MediaItem_Take tr, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="is" parmname="is">

      </parameter>
      <parameter id="4" datatype="pin" parmname="pin">

      </parameter>
      <parameter id="5" datatype="low32bits" parmname="low32bits">

      </parameter>
      <parameter id="6" datatype="hi32bits" parmname="hi32bits">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_SetPreset</slug>
    <functioncall prog_lang="cpp">bool TakeFX_SetPreset(MediaItem_Take* take, int fx, const char* presetname)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_SetPreset(MediaItem_Take take, int fx, &quot;presetname&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetPreset(MediaItem_Take take, integer fx, string presetname)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_SetPreset(MediaItem_Take take, Int fx, String presetname)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See <a href="#TakeFX_GetPreset">TakeFX_GetPreset</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="presetname" parmname="presetname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_SetPresetByIndex</slug>
    <functioncall prog_lang="cpp">bool TakeFX_SetPresetByIndex(MediaItem_Take* take, int fx, int idx)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_SetPresetByIndex(MediaItem_Take take, int fx, int idx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeFX_SetPresetByIndex(MediaItem_Take take, integer fx, integer idx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_SetPresetByIndex(MediaItem_Take take, Int fx, Int idx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See <a href="#TakeFX_GetPresetIndex">TakeFX_GetPresetIndex</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="idx" parmname="idx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_Show</slug>
    <functioncall prog_lang="cpp">void TakeFX_Show(MediaItem_Take* take, int index, int showFlag)</functioncall>
    <functioncall prog_lang="eel">TakeFX_Show(MediaItem_Take take, int index, int showFlag)</functioncall>
    <functioncall prog_lang="lua">reaper.TakeFX_Show(MediaItem_Take take, integer index, integer showFlag)</functioncall>
    <functioncall prog_lang="python">RPR_TakeFX_Show(MediaItem_Take take, Int index, Int showFlag)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="index" parmname="index">

      </parameter>
      <parameter id="3" datatype="showFlag" parmname="showFlag">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeIsMIDI</slug>
    <functioncall prog_lang="cpp">bool TakeIsMIDI(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">bool TakeIsMIDI(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TakeIsMIDI(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeIsMIDI(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns true if the active take contains MIDI.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, MediaItem_Take contains MIDI; false, MediaItem_Take doesn't contain MIDI
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">
the MediaItem_Take, that you want to check for MIDI-elements
      </parameter>
    </parameters>
    <tags>
     midimanagement
     take
     item
     check
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ThemeLayout_GetLayout</slug>
    <functioncall prog_lang="cpp">bool ThemeLayout_GetLayout(const char* section, int idx, char* nameOut, int nameOut_sz)</functioncall>
    <functioncall prog_lang="eel">bool ThemeLayout_GetLayout(&quot;section&quot;, int idx, #name)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string name = reaper.ThemeLayout_GetLayout(string section, integer idx)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, String section, Int idx, String nameOut, Int nameOut_sz) = RPR_ThemeLayout_GetLayout(section, idx, nameOut, nameOut_sz)</functioncall>
    <requires>
      Reaper=5.974
      Lua=5.3
    </requires>
    <description>
Gets theme layout information. <br/>
<br/>
section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. <br/>
idx can be -1 to query the current value, -2 to get the description of the section (if not global), or 0..x. <br/>
<br/>
returns false if failed.
    </description>
    <chapter_context>
      Theme management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="name">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="section">

      </parameter>
      <parameter id="2" datatype="integer" parmname="idx">

      </parameter>
    </parameters>
    <tags>
     theme management
     get
     layout
     theme
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ThemeLayout_GetParameter</slug>
    <functioncall prog_lang="cpp">const char* ThemeLayout_GetParameter(int wp, const char** descOutOptional, int* valueOutOptional, int* defValueOutOptional, int* minValueOutOptional, int* maxValueOutOptional)</functioncall>
    <functioncall prog_lang="eel">bool ThemeLayout_GetParameter(#retval, int wp, optional #desc, optional int &amp;value, optional int &amp;defValue, optional int &amp;minValue, optional int &amp;maxValue)</functioncall>
    <functioncall prog_lang="lua">string retval, optional string desc, optional number value, optional number defValue, optional number minValue, optional number maxValue = reaper.ThemeLayout_GetParameter(integer wp)</functioncall>
    <functioncall prog_lang="python">(String retval, Int wp, String descOutOptional, Int valueOutOptional, Int defValueOutOptional, Int minValueOutOptional, Int maxValueOutOptional) = RPR_ThemeLayout_GetParameter(wp, descOutOptional, valueOutOptional, defValueOutOptional, minValueOutOptional, maxValueOutOptional)</functioncall>
    <requires>
      Reaper=5.972
      Lua=5.3
    </requires>
    <description>
<p>returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.</p>

    </description>
    <chapter_context>
      Theme management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="retval">

      </retval>
      <retval id="2" datatype="optional string" retvalname="desc">

      </retval>
      <retval id="3" datatype="optional number" retvalname="value">

      </retval>
      <retval id="4" datatype="optional number" retvalname="defValue">

      </retval>
      <retval id="5" datatype="optional number" retvalname="minValue">

      </retval>
      <retval id="6" datatype="optional number" retvalname="maxValue">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="wp">

      </parameter>
    </parameters>
    <tags>
     theme management
     get
     layout
     theme
     parameter
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>ThemeLayout_RefreshAll</slug>
    <functioncall prog_lang="cpp">void ThemeLayout_RefreshAll()</functioncall>
    <functioncall prog_lang="eel">ThemeLayout_RefreshAll()</functioncall>
    <functioncall prog_lang="lua">reaper.ThemeLayout_RefreshAll()</functioncall>
    <functioncall prog_lang="python">RPR_ThemeLayout_RefreshAll()</functioncall>
    <requires>
      Reaper=5.972
      Lua=5.3
    </requires>
    <description>
<p>Refreshes all layouts</p>

    </description>
    <chapter_context>
      Theme management
    </chapter_context>
    <tags>
     theme management
     refresh
     layout
     theme
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ThemeLayout_SetLayout</slug>
    <functioncall prog_lang="cpp">bool ThemeLayout_SetLayout(const char* section, const char* layout)</functioncall>
    <functioncall prog_lang="eel">bool ThemeLayout_SetLayout(&quot;section&quot;, &quot; layout&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.ThemeLayout_SetLayout(string section, string layout)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_ThemeLayout_SetLayout(String section, String layout)</functioncall>
    <requires>
      Reaper=5.974
      Lua=5.3
    </requires>
    <description>
Sets theme layout override for a particular section <br/>
<br/>
section can be 'global' or 'mcp' etc. <br/>
<br/>
If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. <br/>
<br/>
Returns false if failed.
    </description>
    <chapter_context>
      Theme management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="section">

      </parameter>
      <parameter id="2" datatype="string" parmname="layout">

      </parameter>
    </parameters>
    <tags>
     theme management
     set
     layout
     theme
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ThemeLayout_SetParameter</slug>
    <functioncall prog_lang="cpp">bool ThemeLayout_SetParameter(int wp, int value, bool persist)</functioncall>
    <functioncall prog_lang="eel">bool ThemeLayout_SetParameter(int wp, int value, bool persist)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.ThemeLayout_SetParameter(integer wp, integer value, boolean persist)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_ThemeLayout_SetParameter(Int wp, Int value, Boolean persist)</functioncall>
    <requires>
      Reaper=5.972
      Lua=5.3
    </requires>
    <description>
<p>sets theme layout parameter to value. persist=true in order to have change loaded on next theme load.</p>
<p>note that the caller should update layouts via ??? to make changes visible.</p>

    </description>
    <chapter_context>
      Theme management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="wp">

      </parameter>
      <parameter id="2" datatype="integer" parmname="value">

      </parameter>
      <parameter id="3" datatype="boolean" parmname="persist">

      </parameter>
    </parameters>
    <tags>
     theme management
     set
     layout
     theme
     parameter
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>time_precise</slug>
    <functioncall prog_lang="cpp">double time_precise()</functioncall>
    <functioncall prog_lang="lua">number = reaper.time_precise()</functioncall>
    <functioncall prog_lang="python">Float RPR_time_precise()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Gets a precise system timestamp in seconds.</p>
<p>For EEL-programming, see <a href="#eel_time_precise">eel_time_precise</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the system-timestamp in seconds with a precision of 7 digits
      </retval>
    </retvals>
    <tags>
     helperfunctions
     time
     precise
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap2_beatsToTime</slug>
    <functioncall prog_lang="cpp">double TimeMap2_beatsToTime(ReaProject* proj, double tpos, const int* measuresInOptional)</functioncall>
    <functioncall prog_lang="eel">double TimeMap2_beatsToTime(ReaProject proj, tpos, optional int measuresIn)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap2_beatsToTime(ReaProject proj, number tpos, optional number measuresIn)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap2_beatsToTime(ReaProject proj, Float tpos, const int measuresInOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="tpos" parmname="tpos">


      </parameter>
      <parameter id="3" datatype="measuresIn" parmname="measuresIn">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap2_GetDividedBpmAtTime</slug>
    <functioncall prog_lang="cpp">double TimeMap2_GetDividedBpmAtTime(ReaProject* proj, double time)</functioncall>
    <functioncall prog_lang="eel">double TimeMap2_GetDividedBpmAtTime(ReaProject proj, time)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap2_GetDividedBpmAtTime(ReaProject proj, number time)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap2_GetDividedBpmAtTime(ReaProject proj, Float time)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="time" parmname="time">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap2_GetNextChangeTime</slug>
    <functioncall prog_lang="cpp">double TimeMap2_GetNextChangeTime(ReaProject* proj, double time)</functioncall>
    <functioncall prog_lang="eel">double TimeMap2_GetNextChangeTime(ReaProject proj, time)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap2_GetNextChangeTime(ReaProject proj, number time)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap2_GetNextChangeTime(ReaProject proj, Float time)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
when does the next time map (tempo or time sig) change occur
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="time" parmname="time">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap2_QNToTime</slug>
    <functioncall prog_lang="cpp">double TimeMap2_QNToTime(ReaProject* proj, double qn)</functioncall>
    <functioncall prog_lang="eel">double TimeMap2_QNToTime(ReaProject proj, qn)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap2_QNToTime(ReaProject proj, number qn)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap2_QNToTime(ReaProject proj, Float qn)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
converts project QN position to time.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="qn" parmname="qn">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap2_timeToBeats</slug>
    <functioncall prog_lang="cpp">double TimeMap2_timeToBeats(ReaProject* proj, double tpos, int* measuresOutOptional, int* cmlOutOptional, double* fullbeatsOutOptional, int* cdenomOutOptional)</functioncall>
    <functioncall prog_lang="eel">double TimeMap2_timeToBeats(ReaProject proj, tpos, optional int &amp;amp;measures, optional int &amp;amp;cml, optional &amp;amp;fullbeats, optional int &amp;amp;cdenom)</functioncall>
    <functioncall prog_lang="lua">number retval, optional number measures, optional number cml, optional number fullbeats, optional number cdenom = reaper.TimeMap2_timeToBeats(ReaProject proj, number tpos)</functioncall>
    <functioncall prog_lang="python">(Float retval, ReaProject proj, Float tpos, Int measuresOutOptional, Int cmlOutOptional, Float fullbeatsOutOptional, Int cdenomOutOptional) = RPR_TimeMap2_timeToBeats(proj, tpos, measuresOutOptional, cmlOutOptional, fullbeatsOutOptional, cdenomOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
convert a time into beats.<br/>
if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.<br/>
if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)<br/>
if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).<br/>
if cdenom is non-NULL, will be set to the current time signature denominator.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="measures" retvalname="measures">

      </retval>
      <retval id="3" datatype="cml" retvalname="cml">

      </retval>
      <retval id="4" datatype="fullbeats" retvalname="fullbeats">

      </retval>
      <retval id="5" datatype="cdenom" retvalname="cdenom">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="tpos" parmname="tpos">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap2_timeToQN</slug>
    <functioncall prog_lang="cpp">double TimeMap2_timeToQN(ReaProject* proj, double tpos)</functioncall>
    <functioncall prog_lang="eel">double TimeMap2_timeToQN(ReaProject proj, tpos)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap2_timeToQN(ReaProject proj, number tpos)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap2_timeToQN(ReaProject proj, Float tpos)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
converts project time position to QN position.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="tpos" parmname="tpos">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_curFrameRate</slug>
    <functioncall prog_lang="cpp">double TimeMap_curFrameRate(ReaProject* proj, bool* dropFrameOutOptional)</functioncall>
    <functioncall prog_lang="eel">double TimeMap_curFrameRate(ReaProject proj, optional bool &amp;amp;dropFrame)</functioncall>
    <functioncall prog_lang="lua">number retval, optional boolean dropFrame = reaper.TimeMap_curFrameRate(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">(Float retval, ReaProject proj, Boolean dropFrameOutOptional) = RPR_TimeMap_curFrameRate(proj, dropFrameOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Gets project framerate, and optionally whether it is drop-frame timecode
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="dropFrame" retvalname="dropFrame">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_GetDividedBpmAtTime</slug>
    <functioncall prog_lang="cpp">double TimeMap_GetDividedBpmAtTime(double time)</functioncall>
    <functioncall prog_lang="eel">double TimeMap_GetDividedBpmAtTime(time)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap_GetDividedBpmAtTime(number time)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap_GetDividedBpmAtTime(Float time)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="time" parmname="time">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_GetMeasureInfo</slug>
    <functioncall prog_lang="cpp">double TimeMap_GetMeasureInfo(ReaProject* proj, int measure, double* qn_startOut, double* qn_endOut, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</functioncall>
    <functioncall prog_lang="eel">double TimeMap_GetMeasureInfo(ReaProject proj, int measure, &amp;amp;qn_start, &amp;amp;qn_end, int &amp;amp;timesig_num, int &amp;amp;timesig_denom, &amp;amp;tempo)</functioncall>
    <functioncall prog_lang="lua">number retval, number qn_start, number qn_end, number timesig_num, number timesig_denom, number tempo = reaper.TimeMap_GetMeasureInfo(ReaProject proj, integer measure)</functioncall>
    <functioncall prog_lang="python">(Float retval, ReaProject proj, Int measure, Float qn_startOut, Float qn_endOut, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetMeasureInfo(proj, measure, qn_startOut, qn_endOut, timesig_numOut, timesig_denomOut, tempoOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="qn_start" retvalname="qn_start">

      </retval>
      <retval id="3" datatype="qn_end" retvalname="qn_end">

      </retval>
      <retval id="4" datatype="timesig_num" retvalname="timesig_num">

      </retval>
      <retval id="5" datatype="timesig_denom" retvalname="timesig_denom">

      </retval>
      <retval id="6" datatype="tempo" retvalname="tempo">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="measure" parmname="measure">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_GetMetronomePattern</slug>
    <functioncall prog_lang="cpp">int TimeMap_GetMetronomePattern(ReaProject* proj, double time, char* pattern, int pattern_sz)</functioncall>
    <functioncall prog_lang="eel">int TimeMap_GetMetronomePattern(ReaProject proj, time, #pattern)</functioncall>
    <functioncall prog_lang="lua">integer retval, string pattern = reaper.TimeMap_GetMetronomePattern(ReaProject proj, number time, string pattern)</functioncall>
    <functioncall prog_lang="python">(Int retval, ReaProject proj, Float time, String pattern, Int pattern_sz) = RPR_TimeMap_GetMetronomePattern(proj, time, pattern, pattern_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be &quot;1221222&quot;. The length of the string is the time signature numerator, and the function returns the time signature denominator.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="pattern" retvalname="pattern">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="time" parmname="time">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_GetTimeSigAtTime</slug>
    <functioncall prog_lang="cpp">void TimeMap_GetTimeSigAtTime(ReaProject* proj, double time, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</functioncall>
    <functioncall prog_lang="eel">TimeMap_GetTimeSigAtTime(ReaProject proj, time, int &amp;amp;timesig_num, int &amp;amp;timesig_denom, &amp;amp;tempo)</functioncall>
    <functioncall prog_lang="lua">number timesig_num retval, number timesig_denom, number tempo = reaper.TimeMap_GetTimeSigAtTime(ReaProject proj, number time)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, Float time, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetTimeSigAtTime(proj, time, timesig_numOut, timesig_denomOut, tempoOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
get the effective time signature and tempo
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="timesig_num" retvalname="retval">

      </retval>
      <retval id="2" datatype="timesig_denom" retvalname="timesig_denom">

      </retval>
      <retval id="3" datatype="tempo" retvalname="tempo">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="time" parmname="time">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_QNToMeasures</slug>
    <functioncall prog_lang="cpp">int TimeMap_QNToMeasures(ReaProject* proj, double qn, double* qnMeasureStartOutOptional, double* qnMeasureEndOutOptional)</functioncall>
    <functioncall prog_lang="eel">int TimeMap_QNToMeasures(ReaProject proj, qn, optional &amp;amp;qnMeasureStart, optional &amp;amp;qnMeasureEnd)</functioncall>
    <functioncall prog_lang="lua">integer retval, optional number qnMeasureStart, optional number qnMeasureEnd = reaper.TimeMap_QNToMeasures(ReaProject proj, number qn)</functioncall>
    <functioncall prog_lang="python">(Int retval, ReaProject proj, Float qn, Float qnMeasureStartOutOptional, Float qnMeasureEndOutOptional) = RPR_TimeMap_QNToMeasures(proj, qn, qnMeasureStartOutOptional, qnMeasureEndOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Find which measure the given QN position falls in.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="qnMeasureStart" retvalname="qnMeasureStart">

      </retval>
      <retval id="3" datatype="qnMeasureEnd" retvalname="qnMeasureEnd">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="qn" parmname="qn">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_QNToTime</slug>
    <functioncall prog_lang="cpp">double TimeMap_QNToTime(double qn)</functioncall>
    <functioncall prog_lang="eel">double TimeMap_QNToTime(qn)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap_QNToTime(number qn)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap_QNToTime(Float qn)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
converts project QN position to time.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="qn" parmname="qn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_QNToTime_abs</slug>
    <functioncall prog_lang="cpp">double TimeMap_QNToTime_abs(ReaProject* proj, double qn)</functioncall>
    <functioncall prog_lang="eel">double TimeMap_QNToTime_abs(ReaProject proj, qn)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap_QNToTime_abs(ReaProject proj, number qn)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap_QNToTime_abs(ReaProject proj, Float qn)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See <a href="#TimeMap2_QNToTime">TimeMap2_QNToTime</a></p>

    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="qn" parmname="qn">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_timeToQN</slug>
    <functioncall prog_lang="cpp">double TimeMap_timeToQN(double tpos)</functioncall>
    <functioncall prog_lang="eel">double TimeMap_timeToQN(tpos)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap_timeToQN(number tpos)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap_timeToQN(Float tpos)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
converts project QN position to time.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tpos" parmname="tpos">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TimeMap_timeToQN_abs</slug>
    <functioncall prog_lang="cpp">double TimeMap_timeToQN_abs(ReaProject* proj, double tpos)</functioncall>
    <functioncall prog_lang="eel">double TimeMap_timeToQN_abs(ReaProject proj, tpos)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TimeMap_timeToQN_abs(ReaProject proj, number tpos)</functioncall>
    <functioncall prog_lang="python">Float RPR_TimeMap_timeToQN_abs(ReaProject proj, Float tpos)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See <a href="#TimeMap2_timeToQN">TimeMap2_timeToQN</a></p>

    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="tpos" parmname="tpos">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ToggleTrackSendUIMute</slug>
    <functioncall prog_lang="cpp">bool ToggleTrackSendUIMute(MediaTrack* track, int send_idx)</functioncall>
    <functioncall prog_lang="eel">bool ToggleTrackSendUIMute(MediaTrack track, int send_idx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.ToggleTrackSendUIMute(MediaTrack track, integer send_idx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_ToggleTrackSendUIMute(MediaTrack track, Int send_idx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
send_idx&amp;lt;0 for receives, &amp;gt;=0 for hw ouputs, &amp;gt;=nb_of_hw_ouputs for sends.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="send_idx" parmname="send_idx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Track_GetPeakHoldDB</slug>
    <functioncall prog_lang="cpp">double Track_GetPeakHoldDB(MediaTrack* track, int channel, bool clear)</functioncall>
    <functioncall prog_lang="eel">double Track_GetPeakHoldDB(MediaTrack track, int channel, bool clear)</functioncall>
    <functioncall prog_lang="lua">number = reaper.Track_GetPeakHoldDB(MediaTrack track, integer channel, boolean clear)</functioncall>
    <functioncall prog_lang="python">Float RPR_Track_GetPeakHoldDB(MediaTrack track, Int channel, Boolean clear)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="channel" parmname="channel">

      </parameter>
      <parameter id="3" datatype="clear" parmname="clear">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Track_GetPeakInfo</slug>
    <functioncall prog_lang="cpp">double Track_GetPeakInfo(MediaTrack* track, int channel)</functioncall>
    <functioncall prog_lang="eel">double Track_GetPeakInfo(MediaTrack track, int channel)</functioncall>
    <functioncall prog_lang="lua">number = reaper.Track_GetPeakInfo(MediaTrack track, integer channel)</functioncall>
    <functioncall prog_lang="python">Float RPR_Track_GetPeakInfo(MediaTrack track, Int channel)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="channel" parmname="channel">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackCtl_SetToolTip</slug>
    <functioncall prog_lang="cpp">void TrackCtl_SetToolTip(const char* fmt, int xpos, int ypos, bool topmost)</functioncall>
    <functioncall prog_lang="eel">TrackCtl_SetToolTip(&quot;fmt&quot;, int xpos, int ypos, bool topmost)</functioncall>
    <functioncall prog_lang="lua">reaper.TrackCtl_SetToolTip(string fmt, integer xpos, integer ypos, boolean topmost)</functioncall>
    <functioncall prog_lang="python">RPR_TrackCtl_SetToolTip(String fmt, Int xpos, Int ypos, Boolean topmost)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Displays tooltip at location, or removes if empty string.<br/>
<br/>
Only one tooltip can be shown, means, a new tooltip removes the previous one.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fmt" parmname="fmt">
the message, to be shown as tooltip; empty string removes tooltip
      </parameter>
      <parameter id="2" datatype="xpos" parmname="xpos">
horizontal position in pixels
      </parameter>
      <parameter id="3" datatype="ypos" parmname="ypos">
vertical position in pixels
      </parameter>
      <parameter id="4" datatype="topmost" parmname="topmost">
unknown
      </parameter>
    </parameters>
    <tags>
     userinterface
     tooltip
     message
     set
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_AddByName</slug>
    <functioncall prog_lang="cpp">int TrackFX_AddByName(MediaTrack* track, const char* fxname, bool recFX, int instantiate)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_AddByName(MediaTrack track, &quot;fxname&quot;, bool recFX, int instantiate)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TrackFX_AddByName(MediaTrack track, string fxname, boolean recFX, integer instantiate)</functioncall>
    <functioncall prog_lang="python">Int RPR_TrackFX_AddByName(MediaTrack track, String fxname, Boolean recFX, Int instantiate)</functioncall>
    <requires>
      Reaper=5.92
      Lua=5.3
    </requires>
    <description>
Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fxname" parmname="fxname">

      </parameter>
      <parameter id="3" datatype="recFX" parmname="recFX">

      </parameter>
      <parameter id="4" datatype="instantiate" parmname="instantiate">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_CopyToTrack</slug>
    <functioncall prog_lang="cpp">void TrackFX_CopyToTrack(MediaTrack* src_track, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="eel">TrackFX_CopyToTrack(MediaTrack src_track, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="lua">reaper.TrackFX_CopyToTrack(MediaTrack src_track, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)</functioncall>
    <functioncall prog_lang="python">RPR_TrackFX_CopyToTrack(MediaTrack src_track, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. 
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="src_track">

      </parameter>
      <parameter id="2" datatype="Int" parmname="src_fx">

      </parameter>
      <parameter id="3" datatype="MediaTrack" parmname="dest_track">

      </parameter>
      <parameter id="4" datatype="Int" parmname="dest_fx">

      </parameter>
      <parameter id="5" datatype="Boolean" parmname="is_move">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_CopyToTake</slug>
    <functioncall prog_lang="cpp">void TrackFX_CopyToTake(MediaTrack* src_track, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="eel">TrackFX_CopyToTake(MediaTrack src_track, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="lua">reaper.TrackFX_CopyToTake(MediaTrack src_track, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)</functioncall>
    <functioncall prog_lang="python">RPR_TrackFX_CopyToTake(MediaTrack src_track, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. 
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="src_track">

      </parameter>
      <parameter id="2" datatype="integer" parmname="src_fx">

      </parameter>
      <parameter id="3" datatype="MediaItem_Take" parmname="dest_take">

      </parameter>
      <parameter id="4" datatype="integer" parmname="dest_fx">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="is_move">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_EndParamEdit</slug>
    <functioncall prog_lang="cpp">bool TrackFX_EndParamEdit(MediaTrack* track, int fx, int param)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_EndParamEdit(MediaTrack track, int fx, int param)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_EndParamEdit(MediaTrack track, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_EndParamEdit(MediaTrack track, Int fx, Int param)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_FormatParamValue</slug>
    <functioncall prog_lang="cpp">bool TrackFX_FormatParamValue(MediaTrack* track, int fx, int param, double val, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_FormatParamValue(MediaTrack track, int fx, int param, val, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_FormatParamValue(MediaTrack track, integer fx, integer param, number val, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, Float val, String buf, Int buf_sz) = RPR_TrackFX_FormatParamValue(track, fx, param, val, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Note: only works with FX that support Cockos VST extensions.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
      <parameter id="4" datatype="val" parmname="val">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_FormatParamValueNormalized</slug>
    <functioncall prog_lang="cpp">bool TrackFX_FormatParamValueNormalized(MediaTrack* track, int fx, int param, double value, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_FormatParamValueNormalized(MediaTrack track, int fx, int param, value, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_FormatParamValueNormalized(MediaTrack track, integer fx, integer param, number value, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TrackFX_FormatParamValueNormalized(track, fx, param, value, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Note: only works with FX that support Cockos VST extensions.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
      <parameter id="4" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetByName</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetByName(MediaTrack* track, const char* fxname, bool instantiate)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetByName(MediaTrack track, &quot;fxname&quot;, bool instantiate)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TrackFX_GetByName(MediaTrack track, string fxname, boolean instantiate)</functioncall>
    <functioncall prog_lang="python">Int RPR_TrackFX_GetByName(MediaTrack track, String fxname, Boolean instantiate)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See <a href="#TrackFX_GetInstrument">TrackFX_GetInstrument</a>, <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>. Deprecated in favor of TrackFX_AddByName.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fxname" parmname="fxname">

      </parameter>
      <parameter id="3" datatype="instantiate" parmname="instantiate">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetChainVisible</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetChainVisible(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetChainVisible(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TrackFX_GetChainVisible(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_TrackFX_GetChainVisible(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetCount</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetCount(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetCount(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TrackFX_GetCount(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_TrackFX_GetCount(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetEnabled</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetEnabled(MediaTrack* track, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetEnabled(MediaTrack track, int fx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_GetEnabled(MediaTrack track, integer fx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_GetEnabled(MediaTrack track, Int fx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#TrackFX_SetEnabled">TrackFX_SetEnabled</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetEQ</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetEQ(MediaTrack* track, bool instantiate)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetEQ(MediaTrack track, bool instantiate)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TrackFX_GetEQ(MediaTrack track, boolean instantiate)</functioncall>
    <functioncall prog_lang="python">Int RPR_TrackFX_GetEQ(MediaTrack track, Boolean instantiate)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See <a href="#TrackFX_GetInstrument">TrackFX_GetInstrument</a>, <a href="#TrackFX_GetByName">TrackFX_GetByName</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="instantiate" parmname="instantiate">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>TrackFX_GetEQBandEnabled</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetEQBandEnabled(MediaTrack track, int fxidx, int bandtype, int bandidx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_GetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_GetEQBandEnabled(MediaTrack track, Int fxidx, Int bandtype, Int bandidx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns true if the EQ band is enabled. Returns false if the band is disabled, or if track/fxidx is not ReaEQ. Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass. Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc. See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_GetEQParam">TrackFX_GetEQParam</a>, <a href="#TrackFX_SetEQParam">TrackFX_SetEQParam</a>, <a href="#TrackFX_SetEQBandEnabled">TrackFX_SetEQBandEnabled</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fxidx" parmname="fxidx">

      </parameter>
      <parameter id="3" datatype="bandtype" parmname="bandtype">

      </parameter>
      <parameter id="4" datatype="bandidx" parmname="bandidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetEQParam</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetEQParam(MediaTrack* track, int fxidx, int paramidx, int* bandtypeOut, int* bandidxOut, int* paramtypeOut, double* normvalOut)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetEQParam(MediaTrack track, int fxidx, int paramidx, int &amp;amp;bandtype, int &amp;amp;bandidx, int &amp;amp;paramtype, &amp;amp;normval)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number bandtype, number bandidx, number paramtype, number normval = reaper.TrackFX_GetEQParam(MediaTrack track, integer fxidx, integer paramidx)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fxidx, Int paramidx, Int bandtypeOut, Int bandidxOut, Int paramtypeOut, Float normvalOut) = RPR_TrackFX_GetEQParam(track, fxidx, paramidx, bandtypeOut, bandidxOut, paramtypeOut, normvalOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns false if track/fxidx is not ReaEQ. Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass. Bandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc. Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q. See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_SetEQParam">TrackFX_SetEQParam</a>, <a href="#TrackFX_GetEQBandEnabled">TrackFX_GetEQBandEnabled</a>, <a href="#TrackFX_SetEQBandEnabled">TrackFX_SetEQBandEnabled</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="bandtype" retvalname="bandtype">

      </retval>
      <retval id="3" datatype="bandidx" retvalname="bandidx">

      </retval>
      <retval id="4" datatype="paramtype" retvalname="paramtype">

      </retval>
      <retval id="5" datatype="normval" retvalname="normval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fxidx" parmname="fxidx">

      </parameter>
      <parameter id="3" datatype="paramidx" parmname="paramidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetFloatingWindow</slug>
    <functioncall prog_lang="cpp">HWND TrackFX_GetFloatingWindow(MediaTrack* track, int index)</functioncall>
    <functioncall prog_lang="eel">HWND TrackFX_GetFloatingWindow(MediaTrack track, int index)</functioncall>
    <functioncall prog_lang="lua">HWND = reaper.TrackFX_GetFloatingWindow(MediaTrack track, integer index)</functioncall>
    <functioncall prog_lang="python">HWND RPR_TrackFX_GetFloatingWindow(MediaTrack track, Int index)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns HWND of floating window for effect index, if any
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HWND" retvalname="HWND">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="index" parmname="index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetFormattedParamValue</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetFormattedParamValue(MediaTrack* track, int fx, int param, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetFormattedParamValue(MediaTrack track, int fx, int param, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetFormattedParamValue(MediaTrack track, integer fx, integer param, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, String buf, Int buf_sz) = RPR_TrackFX_GetFormattedParamValue(track, fx, param, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetFXGUID</slug>
    <functioncall prog_lang="cpp">GUID* TrackFX_GetFXGUID(MediaTrack* track, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetFXGUID(#retguid, MediaTrack track, int fx)</functioncall>
    <functioncall prog_lang="lua">string GUID = reaper.TrackFX_GetFXGUID(MediaTrack track, integer fx)</functioncall>
    <functioncall prog_lang="python">GUID RPR_TrackFX_GetFXGUID(MediaTrack track, Int fx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="GUID" retvalname="GUID">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetFXName</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetFXName(MediaTrack* track, int fx, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetFXName(MediaTrack track, int fx, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetFXName(MediaTrack track, integer fx, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String buf, Int buf_sz) = RPR_TrackFX_GetFXName(track, fx, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetInstrument</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetInstrument(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetInstrument(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TrackFX_GetInstrument(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_TrackFX_GetInstrument(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_GetByName">TrackFX_GetByName</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetIOSize</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetIOSize(MediaTrack* track, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetIOSize(MediaTrack track, int fx, optional int &amp;amp;inputPins, optional int &amp;amp;outputPins)</functioncall>
    <functioncall prog_lang="lua">integer retval, optional number inputPins, optional number outputPins = reaper.TrackFX_GetIOSize(MediaTrack track, integer fx)</functioncall>
    <functioncall prog_lang="python">(Int retval, MediaTrack track, Int fx, Int inputPinsOutOptional, Int outputPinsOutOptional) = RPR_TrackFX_GetIOSize(track, fx, inputPinsOutOptional, outputPinsOutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="inputPins" retvalname="inputPins">

      </retval>
      <retval id="3" datatype="outputPins" retvalname="outputPins">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetNamedConfigParm</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, char* bufOut, int bufOut_sz)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetNamedConfigParm(MediaTrack track, int fx, &quot;parmname&quot;, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetNamedConfigParm(MediaTrack track, integer fx, string parmname)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String parmname, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetNamedConfigParm(track, fx, parmname, bufOut, bufOut_sz)</functioncall>
    <requires>
      Reaper=5.965
      Lua=5.3
    </requires>
    <description>
gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="parmname" parmname="parmname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetNumParams</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetNumParams(MediaTrack* track, int fx)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetNumParams(MediaTrack track, int fx)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TrackFX_GetNumParams(MediaTrack track, integer fx)</functioncall>
    <functioncall prog_lang="python">Int RPR_TrackFX_GetNumParams(MediaTrack track, Int fx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetOpen</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetOpen(MediaTrack* track, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetOpen(MediaTrack track, int fx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_GetOpen(MediaTrack track, integer fx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_GetOpen(MediaTrack track, Int fx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns true if this FX UI is open in the FX chain window or a floating window. See <a href="#TrackFX_SetOpen">TrackFX_SetOpen</a></p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, TrackFX is open; false, TrackFX is closed
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack, in which the fx to check is located
      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">
the id of the fx in the fx-chain
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     check
     open
     get
     ui
     fx
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetParam</slug>
    <functioncall prog_lang="cpp">double TrackFX_GetParam(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut)</functioncall>
    <functioncall prog_lang="eel">double TrackFX_GetParam(MediaTrack track, int fx, int param, &amp;amp;minval, &amp;amp;maxval)</functioncall>
    <functioncall prog_lang="lua">number retval, number minval, number maxval = reaper.TrackFX_GetParam(MediaTrack track, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TrackFX_GetParam(track, fx, param, minvalOut, maxvalOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="minval" retvalname="minval">

      </retval>
      <retval id="3" datatype="maxval" retvalname="maxval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetParameterStepSizes</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetParameterStepSizes(MediaTrack* track, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetParameterStepSizes(MediaTrack track, int fx, int param, &amp;amp;step, &amp;amp;smallstep, &amp;amp;largestep, bool &amp;amp;istoggle)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TrackFX_GetParameterStepSizes(MediaTrack track, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TrackFX_GetParameterStepSizes(track, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="step" retvalname="step">

      </retval>
      <retval id="3" datatype="smallstep" retvalname="smallstep">

      </retval>
      <retval id="4" datatype="largestep" retvalname="largestep">

      </retval>
      <retval id="5" datatype="istoggle" retvalname="istoggle">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetParamEx</slug>
    <functioncall prog_lang="cpp">double TrackFX_GetParamEx(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</functioncall>
    <functioncall prog_lang="eel">double TrackFX_GetParamEx(MediaTrack track, int fx, int param, &amp;amp;minval, &amp;amp;maxval, &amp;amp;midval)</functioncall>
    <functioncall prog_lang="lua">number retval, number minval, number maxval, number midval = reaper.TrackFX_GetParamEx(MediaTrack track, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TrackFX_GetParamEx(track, fx, param, minvalOut, maxvalOut, midvalOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="minval" retvalname="minval">

      </retval>
      <retval id="3" datatype="maxval" retvalname="maxval">

      </retval>
      <retval id="4" datatype="midval" retvalname="midval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetParamName</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetParamName(MediaTrack* track, int fx, int param, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetParamName(MediaTrack track, int fx, int param, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.TrackFX_GetParamName(MediaTrack track, integer fx, integer param, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, Int param, String buf, Int buf_sz) = RPR_TrackFX_GetParamName(track, fx, param, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="buf" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetParamNormalized</slug>
    <functioncall prog_lang="cpp">double TrackFX_GetParamNormalized(MediaTrack* track, int fx, int param)</functioncall>
    <functioncall prog_lang="eel">double TrackFX_GetParamNormalized(MediaTrack track, int fx, int param)</functioncall>
    <functioncall prog_lang="lua">number = reaper.TrackFX_GetParamNormalized(MediaTrack track, integer fx, integer param)</functioncall>
    <functioncall prog_lang="python">Float RPR_TrackFX_GetParamNormalized(MediaTrack track, Int fx, Int param)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetPinMappings</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetPinMappings(MediaTrack* tr, int fx, int isOutput, int pin, int* high32OutOptional)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetPinMappings(MediaTrack tr, int fx, int is, int pin, optional int &amp;amp;high32)</functioncall>
    <functioncall prog_lang="lua">integer retval, optional number high32 = reaper.TrackFX_GetPinMappings(MediaTrack tr, integer fx, integer is, integer pin)</functioncall>
    <functioncall prog_lang="python">(Int retval, MediaTrack tr, Int fx, Int isOutput, Int pin, Int high32OutOptional) = RPR_TrackFX_GetPinMappings(tr, fx, isOutput, pin, high32OutOptional)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="high32" retvalname="high32">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="is" parmname="is">

      </parameter>
      <parameter id="4" datatype="pin" parmname="pin">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetPreset</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetPreset(MediaTrack* track, int fx, char* presetname, int presetname_sz)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetPreset(MediaTrack track, int fx, #presetname)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string presetname = reaper.TrackFX_GetPreset(MediaTrack track, integer fx, string presetname)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String presetname, Int presetname_sz) = RPR_TrackFX_GetPreset(track, fx, presetname, presetname_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See <a href="#TrackFX_SetPreset">TrackFX_SetPreset</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="presetname" retvalname="presetname">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetPresetIndex</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetPresetIndex(MediaTrack* track, int fx, int* numberOfPresetsOut)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetPresetIndex(MediaTrack track, int fx, int &amp;amp;numberOfPresets)</functioncall>
    <functioncall prog_lang="lua">integer retval, number numberOfPresets = reaper.TrackFX_GetPresetIndex(MediaTrack track, integer fx)</functioncall>
    <functioncall prog_lang="python">(Int retval, MediaTrack track, Int fx, Int numberOfPresetsOut) = RPR_TrackFX_GetPresetIndex(track, fx, numberOfPresetsOut)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See <a href="#TrackFX_SetPresetByIndex">TrackFX_SetPresetByIndex</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="numberOfPresets" retvalname="numberOfPresets">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetRecChainVisible</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetRecChainVisible(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetRecChainVisible(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TrackFX_GetRecChainVisible(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_TrackFX_GetRecChainVisible(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetRecCount</slug>
    <functioncall prog_lang="cpp">int TrackFX_GetRecCount(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int TrackFX_GetRecCount(MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.TrackFX_GetRecCount(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int RPR_TrackFX_GetRecCount(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetUserPresetFilename</slug>
    <functioncall prog_lang="cpp">void TrackFX_GetUserPresetFilename(MediaTrack* track, int fx, char* fn, int fn_sz)</functioncall>
    <functioncall prog_lang="eel">TrackFX_GetUserPresetFilename(MediaTrack track, int fx, #fn)</functioncall>
    <functioncall prog_lang="lua">string fn = reaper.TrackFX_GetUserPresetFilename(MediaTrack track, integer fx, string fn)</functioncall>
    <functioncall prog_lang="python">(MediaTrack track, Int fx, String fn, Int fn_sz) = RPR_TrackFX_GetUserPresetFilename(track, fx, fn, fn_sz)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="fn" retvalname="fn">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_NavigatePresets</slug>
    <functioncall prog_lang="cpp">bool TrackFX_NavigatePresets(MediaTrack* track, int fx, int presetmove)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_NavigatePresets(MediaTrack track, int fx, int presetmove)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_NavigatePresets(MediaTrack track, integer fx, integer presetmove)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_NavigatePresets(MediaTrack track, Int fx, Int presetmove)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="presetmove" parmname="presetmove">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetEnabled</slug>
    <functioncall prog_lang="cpp">void TrackFX_SetEnabled(MediaTrack* track, int fx, bool enabled)</functioncall>
    <functioncall prog_lang="eel">TrackFX_SetEnabled(MediaTrack track, int fx, bool enabled)</functioncall>
    <functioncall prog_lang="lua">reaper.TrackFX_SetEnabled(MediaTrack track, integer fx, boolean enabled)</functioncall>
    <functioncall prog_lang="python">RPR_TrackFX_SetEnabled(MediaTrack track, Int fx, Boolean enabled)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#TrackFX_GetEnabled">TrackFX_GetEnabled</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="enabled" parmname="enabled">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetEQBandEnabled</slug>
    <functioncall prog_lang="cpp">bool TrackFX_SetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx, bool enable)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_SetEQBandEnabled(MediaTrack track, int fxidx, int bandtype, int bandidx, bool enable)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, boolean enable)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_SetEQBandEnabled(MediaTrack track, Int fxidx, Int bandtype, Int bandidx, Boolean enable)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Enable or disable a ReaEQ band. Returns false if track/fxidx is not ReaEQ. Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass. Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc. See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_GetEQParam">TrackFX_GetEQParam</a>, <a href="#TrackFX_SetEQParam">TrackFX_SetEQParam</a>, <a href="#TrackFX_GetEQBandEnabled">TrackFX_GetEQBandEnabled</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fxidx" parmname="fxidx">

      </parameter>
      <parameter id="3" datatype="bandtype" parmname="bandtype">

      </parameter>
      <parameter id="4" datatype="bandidx" parmname="bandidx">

      </parameter>
      <parameter id="5" datatype="enable" parmname="enable">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetEQParam</slug>
    <functioncall prog_lang="cpp">bool TrackFX_SetEQParam(MediaTrack* track, int fxidx, int bandtype, int bandidx, int paramtype, double val, bool isnorm)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_SetEQParam(MediaTrack track, int fxidx, int bandtype, int bandidx, int paramtype, val, bool isnorm)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetEQParam(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, integer paramtype, number val, boolean isnorm)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_SetEQParam(MediaTrack track, Int fxidx, Int bandtype, Int bandidx, Int paramtype, Float val, Boolean isnorm)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype. Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass. Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc. Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q. See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_GetEQParam">TrackFX_GetEQParam</a>, <a href="#TrackFX_GetEQBandEnabled">TrackFX_GetEQBandEnabled</a>, <a href="#TrackFX_SetEQBandEnabled">TrackFX_SetEQBandEnabled</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fxidx" parmname="fxidx">

      </parameter>
      <parameter id="3" datatype="bandtype" parmname="bandtype">

      </parameter>
      <parameter id="4" datatype="bandidx" parmname="bandidx">

      </parameter>
      <parameter id="5" datatype="paramtype" parmname="paramtype">

      </parameter>
      <parameter id="6" datatype="val" parmname="val">

      </parameter>
      <parameter id="7" datatype="isnorm" parmname="isnorm">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetNamedConfigParm</slug>
    <functioncall prog_lang="cpp">bool TrackFX_SetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, const char* value)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_SetNamedConfigParm(MediaTrack track, int fx, &quot;parmname&quot;, &quot;value&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetNamedConfigParm(MediaTrack track, integer fx, string parmname, string value)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_SetNamedConfigParm(MediaTrack track, Int fx, String parmname, String value)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
sets plug-in specific named configuration value (returns true on success)
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="parmname" parmname="parmname">

      </parameter>
      <parameter id="4" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetOffline</slug>
    <functioncall prog_lang="cpp">void TrackFX_SetOffline(MediaTrack* track, int fx, bool offline)</functioncall>
    <functioncall prog_lang="eel">TrackFX_SetOffline(MediaTrack track, int fx, bool offline)</functioncall>
    <functioncall prog_lang="lua">reaper.TrackFX_SetOffline(MediaTrack track, integer fx, boolean offline)</functioncall>
    <functioncall prog_lang="python">RPR_TrackFX_SetOffline(MediaTrack track, Int fx, Boolean offline)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#TrackFX_GetOffline">TrackFX_GetOffline</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">

      </parameter>
      <parameter id="2" datatype="integer" parmname="fx">

      </parameter>
      <parameter id="3" datatype="boolean" parmname="offline">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_SetOffline</slug>
    <functioncall prog_lang="cpp">void TakeFX_SetOffline(MediaItem_Take* take, int fx, bool offline)</functioncall>
    <functioncall prog_lang="eel">TakeFX_SetOffline(MediaItem_Take take, int fx, bool offline)</functioncall>
    <functioncall prog_lang="lua">reaper.TakeFX_SetOffline(MediaItem_Take take, integer fx, boolean offline)</functioncall>
    <functioncall prog_lang="python">RPR_TakeFX_SetOffline(MediaItem_Take take, Int fx, Boolean offline)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#TakeFX_GetOffline">TakeFX_GetOffline</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
      <parameter id="2" datatype="integer" parmname="fx">

      </parameter>
      <parameter id="3" datatype="boolean" parmname="offline">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_GetOffline</slug>
    <functioncall prog_lang="cpp">bool TakeFX_GetOffline(MediaItem_Take* take, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_GetOffline(MediaItem_Take take, int fx)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_GetOffline(MediaItem_Take take, integer fx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TakeFX_GetOffline(MediaItem_Take take, Int fx)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#TakeFX_SetOffline">TakeFX_SetOffline</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
      <parameter id="2" datatype="integer" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_Delete</slug>
    <functioncall prog_lang="cpp">bool TakeFX_Delete(MediaItem_Take* take, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TakeFX_Delete(MediaItem_Take take, int fx)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.TakeFX_Delete(MediaItem_Take take, integer fx)</functioncall>
    <functioncall prog_lang="python"> Boolean RPR_TakeFX_Delete(MediaItem_Take take, Int fx)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Remove a FX from take chain (returns true on success)
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
      <parameter id="2" datatype="integer" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_CopyToTake</slug>
    <functioncall prog_lang="cpp">void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="eel">TakeFX_CopyToTake(MediaItem_Take src_take, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="lua">reaper.TakeFX_CopyToTake(MediaItem_Take src_take, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)</functioncall>
    <functioncall prog_lang="python">RPR_TakeFX_CopyToTake(MediaItem_Take src_take, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder. 
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="src_take">

      </parameter>
      <parameter id="2" datatype="integer" parmname="src_fx">

      </parameter>
      <parameter id="3" datatype="MediaItem_Take" parmname="dest_take">

      </parameter>
      <parameter id="4" datatype="integer" parmname="dest_fx">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="is_move">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_CopyToTrack</slug>
    <functioncall prog_lang="cpp">void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="eel">TakeFX_CopyToTrack(MediaItem_Take src_take, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="lua">reaper.TakeFX_CopyToTrack(MediaItem_Take src_take, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)</functioncall>
    <functioncall prog_lang="python"> RPR_TakeFX_CopyToTrack(MediaItem_Take src_take, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="src_take">

      </parameter>
      <parameter id="2" datatype="integer" parmname="src_fx">

      </parameter>
      <parameter id="3" datatype="MediaTrack" parmname="dest_track">

      </parameter>
      <parameter id="4" datatype="integer" parmname="dest_fx">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="is_move">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_GetOffline</slug>
    <functioncall prog_lang="cpp">bool TrackFX_GetOffline(MediaTrack* track, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_GetOffline(MediaTrack track, int fx)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_GetOffline(MediaTrack track, integer fx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_GetOffline(MediaTrack track, Int fx)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#TrackFX_SetOffline">TrackFX_SetOffline</a></p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">

      </parameter>
      <parameter id="2" datatype="integer" parmname="fx">

      </parameter>
      <parameter id="3" datatype="boolean" parmname="offline">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TakeFX_CopyToTake</slug>
    <functioncall prog_lang="cpp">void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="eel">TakeFX_CopyToTake(MediaItem_Take src_take, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="lua">reaper.TakeFX_CopyToTake(MediaItem_Take src_take, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)</functioncall>
    <functioncall prog_lang="python">RPR_TakeFX_CopyToTake(MediaItem_Take src_take, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder. 
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="src_take">

      </parameter>
      <parameter id="2" datatype="integer" parmname="src_fx">

      </parameter>
      <parameter id="3" datatype="MediaItem_Take" parmname="dest_take">

      </parameter>
      <parameter id="4" datatype="integer" parmname="dest_fx">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="is_move">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>TakeFX_CopyToTrack</slug>
    <functioncall prog_lang="cpp">void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="eel">TakeFX_CopyToTrack(MediaItem_Take src_take, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)</functioncall>
    <functioncall prog_lang="lua">reaper.TakeFX_CopyToTrack(MediaItem_Take src_take, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)</functioncall>
    <functioncall prog_lang="python">RPR_TakeFX_CopyToTrack(MediaItem_Take src_take, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX. 
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="src_take">

      </parameter>
      <parameter id="2" datatype="integer" parmname="src_fx">

      </parameter>
      <parameter id="3" datatype="MediaTrack" parmname="dest_track">

      </parameter>
      <parameter id="4" datatype="integer" parmname="dest_fx">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="is_move">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_Delete</slug>
    <functioncall prog_lang="cpp">bool TrackFX_Delete(MediaTrack* track, int fx)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_Delete(MediaTrack track, int fx)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.TrackFX_Delete(MediaTrack track, integer fx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_Delete(MediaTrack track, Int fx)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Remove a FX from track chain (returns true on success).
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">

      </parameter>
      <parameter id="2" datatype="integer" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetOpen</slug>
    <functioncall prog_lang="cpp">void TrackFX_SetOpen(MediaTrack* track, int fx, bool open)</functioncall>
    <functioncall prog_lang="eel">TrackFX_SetOpen(MediaTrack track, int fx, bool open)</functioncall>
    <functioncall prog_lang="lua">reaper.TrackFX_SetOpen(MediaTrack track, integer fx, boolean open)</functioncall>
    <functioncall prog_lang="python">RPR_TrackFX_SetOpen(MediaTrack track, Int fx, Boolean open)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Open this FX UI. See <a href="#TrackFX_GetOpen">TrackFX_GetOpen</a></p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the track, in which the FX to be opened is located
      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">
the fx-id within the fxchain
      </parameter>
      <parameter id="3" datatype="open" parmname="open">
true, open FX-UI; false, close FX-UI
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     set
     open
     ui
     fx
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetParam</slug>
    <functioncall prog_lang="cpp">bool TrackFX_SetParam(MediaTrack* track, int fx, int param, double val)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_SetParam(MediaTrack track, int fx, int param, val)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetParam(MediaTrack track, integer fx, integer param, number val)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_SetParam(MediaTrack track, Int fx, Int param, Float val)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
      <parameter id="4" datatype="val" parmname="val">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetParamNormalized</slug>
    <functioncall prog_lang="cpp">bool TrackFX_SetParamNormalized(MediaTrack* track, int fx, int param, double value)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_SetParamNormalized(MediaTrack track, int fx, int param, value)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetParamNormalized(MediaTrack track, integer fx, integer param, number value)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_SetParamNormalized(MediaTrack track, Int fx, Int param, Float value)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
      <parameter id="4" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetPinMappings</slug>
    <functioncall prog_lang="cpp">bool TrackFX_SetPinMappings(MediaTrack* tr, int fx, int isOutput, int pin, int low32bits, int hi32bits)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_SetPinMappings(MediaTrack tr, int fx, int is, int pin, int low32bits, int hi32bits)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetPinMappings(MediaTrack tr, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_SetPinMappings(MediaTrack tr, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="is" parmname="is">

      </parameter>
      <parameter id="4" datatype="pin" parmname="pin">

      </parameter>
      <parameter id="5" datatype="low32bits" parmname="low32bits">

      </parameter>
      <parameter id="6" datatype="hi32bits" parmname="hi32bits">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetPreset</slug>
    <functioncall prog_lang="cpp">bool TrackFX_SetPreset(MediaTrack* track, int fx, const char* presetname)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_SetPreset(MediaTrack track, int fx, &quot;presetname&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetPreset(MediaTrack track, integer fx, string presetname)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_SetPreset(MediaTrack track, Int fx, String presetname)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See <a href="#TrackFX_GetPreset">TrackFX_GetPreset</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="presetname" parmname="presetname">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_SetPresetByIndex</slug>
    <functioncall prog_lang="cpp">bool TrackFX_SetPresetByIndex(MediaTrack* track, int fx, int idx)</functioncall>
    <functioncall prog_lang="eel">bool TrackFX_SetPresetByIndex(MediaTrack track, int fx, int idx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.TrackFX_SetPresetByIndex(MediaTrack track, integer fx, integer idx)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_TrackFX_SetPresetByIndex(MediaTrack track, Int fx, Int idx)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See <a href="#TrackFX_GetPresetIndex">TrackFX_GetPresetIndex</a>.</p>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
      <parameter id="3" datatype="idx" parmname="idx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackFX_Show</slug>
    <functioncall prog_lang="cpp">void TrackFX_Show(MediaTrack* track, int index, int showFlag)</functioncall>
    <functioncall prog_lang="eel">TrackFX_Show(MediaTrack track, int index, int showFlag)</functioncall>
    <functioncall prog_lang="lua">reaper.TrackFX_Show(MediaTrack track, integer index, integer showFlag)</functioncall>
    <functioncall prog_lang="python">RPR_TrackFX_Show(MediaTrack track, Int index, Int showFlag)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Shows a track-FX-window.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
the MediaTrack, whose TrackFX you want to show
      </parameter>
      <parameter id="2" datatype="index" parmname="index">
the id of the track within the fxchain
      </parameter>
      <parameter id="3" datatype="showFlag" parmname="showFlag">
how to show the FX-window<br/>
0, for hidechain<br/>
1, for show chain(index valid)<br/>
2, for hide floating window(index valid)<br/>
3, for show floating window(index valid)
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     show
     fx
     window
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackList_AdjustWindows</slug>
    <functioncall prog_lang="cpp">void TrackList_AdjustWindows(bool isMinor)</functioncall>
    <functioncall prog_lang="eel">TrackList_AdjustWindows(bool isMinor)</functioncall>
    <functioncall prog_lang="lua">reaper.TrackList_AdjustWindows(boolean isMinor)</functioncall>
    <functioncall prog_lang="python">RPR_TrackList_AdjustWindows(Boolean isMinor)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="isMinor" parmname="isMinor">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>TrackList_UpdateAllExternalSurfaces</slug>
    <functioncall prog_lang="cpp">void TrackList_UpdateAllExternalSurfaces()</functioncall>
    <functioncall prog_lang="eel">TrackList_UpdateAllExternalSurfaces()</functioncall>
    <functioncall prog_lang="lua">reaper.TrackList_UpdateAllExternalSurfaces()</functioncall>
    <functioncall prog_lang="python">RPR_TrackList_UpdateAllExternalSurfaces()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_BeginBlock</slug>
    <functioncall prog_lang="cpp">void Undo_BeginBlock()</functioncall>
    <functioncall prog_lang="eel">Undo_BeginBlock()</functioncall>
    <functioncall prog_lang="lua">reaper.Undo_BeginBlock()</functioncall>
    <functioncall prog_lang="python">RPR_Undo_BeginBlock()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
call to start a new block
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_BeginBlock2</slug>
    <functioncall prog_lang="cpp">void Undo_BeginBlock2(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">Undo_BeginBlock2(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">reaper.Undo_BeginBlock2(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">RPR_Undo_BeginBlock2(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>call to start a new undo block. Code after that and before <a href="#Undo_EndBlock">Undo_EndBlock</a> can be undone.</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     projectmanagement
     start
     undo
     block
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_CanRedo2</slug>
    <functioncall prog_lang="cpp">const char* Undo_CanRedo2(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">bool Undo_CanRedo2(#retval, ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">string = reaper.Undo_CanRedo2(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">String RPR_Undo_CanRedo2(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns string of next action,if able,NULL if not
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_CanUndo2</slug>
    <functioncall prog_lang="cpp">const char* Undo_CanUndo2(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">bool Undo_CanUndo2(#retval, ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">string = reaper.Undo_CanUndo2(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">String RPR_Undo_CanUndo2(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
returns string of last action,if able,NULL if not
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_DoRedo2</slug>
    <functioncall prog_lang="cpp">int Undo_DoRedo2(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int Undo_DoRedo2(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.Undo_DoRedo2(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_Undo_DoRedo2(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
nonzero if success
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_DoUndo2</slug>
    <functioncall prog_lang="cpp">int Undo_DoUndo2(ReaProject* proj)</functioncall>
    <functioncall prog_lang="eel">int Undo_DoUndo2(ReaProject proj)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.Undo_DoUndo2(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">Int RPR_Undo_DoUndo2(ReaProject proj)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
nonzero if success
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_EndBlock</slug>
    <functioncall prog_lang="cpp">void Undo_EndBlock(const char* descchange, int extraflags)</functioncall>
    <functioncall prog_lang="eel">Undo_EndBlock(&quot;descchange&quot;, int extraflags)</functioncall>
    <functioncall prog_lang="lua">reaper.Undo_EndBlock(string descchange, integer extraflags)</functioncall>
    <functioncall prog_lang="python">RPR_Undo_EndBlock(String descchange, Int extraflags)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
call to end the block,with extra flags if any,and a description
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="descchange" parmname="descchange">
a string that describes the changes of the undo-block
      </parameter>
      <parameter id="2" datatype="extraflags" parmname="extraflags">
-1, all undo states<br/>
1, track/master vol/pan/routing, routing/hwout envelopes too<br/>
2, track/master fx<br/>
4, track items<br/>
8, loop selection, markers, regions, extensions<br/>
16, freeze state<br/>
32, non-FX envelopes only<br/>
64, FX envelopes, implied by UNDO_STATE_FX too<br/>
128, contents of automation items -- not position, length, rate etc of automation items, which is part of envelope state<br/>
256, ARA state
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_EndBlock2</slug>
    <functioncall prog_lang="cpp">void Undo_EndBlock2(ReaProject* proj, const char* descchange, int extraflags)</functioncall>
    <functioncall prog_lang="eel">Undo_EndBlock2(ReaProject proj, &quot;descchange&quot;, int extraflags)</functioncall>
    <functioncall prog_lang="lua">reaper.Undo_EndBlock2(ReaProject proj, string descchange, integer extraflags)</functioncall>
    <functioncall prog_lang="python">RPR_Undo_EndBlock2(ReaProject proj, String descchange, Int extraflags)</functioncall>
    <requires>
      Reaper=5.979
      Lua=5.3
    </requires>
    <description>
call to end the block,with extra flags if any,and a description
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="descchange" parmname="descchange">
<p>a string that describes the changes of the undo-block</p>

      </parameter>
      <parameter id="3" datatype="extraflags" parmname="extraflags">
<p>-1, all undo states 1, track/master vol/pan/routing, routing/hwout envelopes too 2, track/master fx 4, track items 8, loop selection, markers, regions, extensions 16, freeze state 32, non-FX envelopes only 64, FX envelopes, implied by UNDO_STATE_FX too 128, contents of automation items – not position, length, rate etc of automation items, which is part of envelope state 256, ARA state</p>

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_OnStateChange</slug>
    <functioncall prog_lang="cpp">void Undo_OnStateChange(const char* descchange)</functioncall>
    <functioncall prog_lang="eel">Undo_OnStateChange(&quot;descchange&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.Undo_OnStateChange(string descchange)</functioncall>
    <functioncall prog_lang="python">RPR_Undo_OnStateChange(String descchange)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
limited state change to items
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="descchange" parmname="descchange">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_OnStateChange2</slug>
    <functioncall prog_lang="cpp">void Undo_OnStateChange2(ReaProject* proj, const char* descchange)</functioncall>
    <functioncall prog_lang="eel">Undo_OnStateChange2(ReaProject proj, &quot;descchange&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.Undo_OnStateChange2(ReaProject proj, string descchange)</functioncall>
    <functioncall prog_lang="python">RPR_Undo_OnStateChange2(ReaProject proj, String descchange)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
limited state change to items
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="descchange" parmname="descchange">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_OnStateChange_Item</slug>
    <functioncall prog_lang="cpp">void Undo_OnStateChange_Item(ReaProject* proj, const char* name, MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">Undo_OnStateChange_Item(ReaProject proj, &quot;name&quot;, MediaItem item)</functioncall>
    <functioncall prog_lang="lua">reaper.Undo_OnStateChange_Item(ReaProject proj, string name, MediaItem item)</functioncall>
    <functioncall prog_lang="python">RPR_Undo_OnStateChange_Item(ReaProject proj, String name, MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="name" parmname="name">


      </parameter>
      <parameter id="3" datatype="item" parmname="item">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_OnStateChangeEx</slug>
    <functioncall prog_lang="cpp">void Undo_OnStateChangeEx(const char* descchange, int whichStates, int trackparm)</functioncall>
    <functioncall prog_lang="eel">Undo_OnStateChangeEx(&quot;descchange&quot;, int whichStates, int trackparm)</functioncall>
    <functioncall prog_lang="lua">reaper.Undo_OnStateChangeEx(string descchange, integer whichStates, integer trackparm)</functioncall>
    <functioncall prog_lang="python">RPR_Undo_OnStateChangeEx(String descchange, Int whichStates, Int trackparm)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
trackparm=-1 by default,or if updating one fx chain,you can specify track index
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="descchange" parmname="descchange">

      </parameter>
      <parameter id="2" datatype="whichStates" parmname="whichStates">

      </parameter>
      <parameter id="3" datatype="trackparm" parmname="trackparm">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Undo_OnStateChangeEx2</slug>
    <functioncall prog_lang="cpp">void Undo_OnStateChangeEx2(ReaProject* proj, const char* descchange, int whichStates, int trackparm)</functioncall>
    <functioncall prog_lang="eel">Undo_OnStateChangeEx2(ReaProject proj, &quot;descchange&quot;, int whichStates, int trackparm)</functioncall>
    <functioncall prog_lang="lua">reaper.Undo_OnStateChangeEx2(ReaProject proj, string descchange, integer whichStates, integer trackparm)</functioncall>
    <functioncall prog_lang="python">RPR_Undo_OnStateChangeEx2(ReaProject proj, String descchange, Int whichStates, Int trackparm)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
trackparm=-1 by default,or if updating one fx chain,you can specify track index
    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="descchange" parmname="descchange">


      </parameter>
      <parameter id="3" datatype="whichStates" parmname="whichStates">


      </parameter>
      <parameter id="4" datatype="trackparm" parmname="trackparm">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>UpdateArrange</slug>
    <functioncall prog_lang="cpp">void UpdateArrange()</functioncall>
    <functioncall prog_lang="eel">UpdateArrange()</functioncall>
    <functioncall prog_lang="lua">reaper.UpdateArrange()</functioncall>
    <functioncall prog_lang="python">RPR_UpdateArrange()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Redraw the arrange view
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <tags>
     arrangeviewmanagement
     update
     arrangeview
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>UpdateItemInProject</slug>
    <functioncall prog_lang="cpp">void UpdateItemInProject(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">UpdateItemInProject(MediaItem item)</functioncall>
    <functioncall prog_lang="lua">reaper.UpdateItemInProject(MediaItem item)</functioncall>
    <functioncall prog_lang="python">RPR_UpdateItemInProject(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>UpdateTimeline</slug>
    <functioncall prog_lang="cpp">void UpdateTimeline()</functioncall>
    <functioncall prog_lang="eel">UpdateTimeline()</functioncall>
    <functioncall prog_lang="lua">reaper.UpdateTimeline()</functioncall>
    <functioncall prog_lang="python">RPR_UpdateTimeline()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Redraw the arrange view and ruler
    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <tags>
     arrangeviewmanagement
     update
     timeline
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ValidatePtr</slug>
    <functioncall prog_lang="cpp">bool ValidatePtr(void* pointer, const char* ctypename)</functioncall>
    <functioncall prog_lang="eel">bool ValidatePtr(void* pointer, &quot;ctypename&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.ValidatePtr(identifier pointer, string ctypename)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_ValidatePtr(void pointer, String ctypename)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.</p>
<p>see <a href="#ValidatePtr2">ValidatePtr2</a></p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, the object/pointer is of ctypename; false, it is not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="pointer" parmname="pointer">
a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter.
      </parameter>
      <parameter id="2" datatype="ctypename" parmname="ctypename">
the type of project to check for(given as a pointer)
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     validate
     objects
     project
     track
     item
     take
     envelope
     pcmsource
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ValidatePtr2</slug>
    <functioncall prog_lang="cpp">bool ValidatePtr2(ReaProject* proj, void* pointer, const char* ctypename)</functioncall>
    <functioncall prog_lang="eel">bool ValidatePtr2(ReaProject proj, void* pointer, &quot;ctypename&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.ValidatePtr2(ReaProject proj, identifier pointer, string ctypename)</functioncall>
    <functioncall prog_lang="python">Boolean RPR_ValidatePtr2(ReaProject proj, void pointer, String ctypename)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, the object/pointer is of ctypename; false, it is not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="pointer" parmname="pointer">
<p>a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter.</p>

      </parameter>
      <parameter id="3" datatype="ctypename" parmname="ctypename">
<p>the type of project to check for(given as a pointer)</p>

      </parameter>
    </parameters>
    <tags>
     helperfunctions
     validate
     objects
     project
     track
     item
     take
     envelope
     pcmsource
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ViewPrefs</slug>
    <functioncall prog_lang="cpp">void ViewPrefs(int page, const char* pageByName)</functioncall>
    <functioncall prog_lang="eel">ViewPrefs(int page, &quot;pageByName&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.ViewPrefs(integer page, string pageByName)</functioncall>
    <functioncall prog_lang="python">RPR_ViewPrefs(Int page, String pageByName)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Opens the prefs to a page, use pageByName if page is 0.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="page" parmname="page">
the idx of the preferences-page. The following are valid:<br/>
139, General <br/>
474, Paths <br/>
219, Keyboard/Multitouch <br/>
212, Project <br/>
178, Track/Send Defaults <br/>
477, Media Item Defaults <br/>
156, Audio <br/>
118, Device <br/>
153, MIDI Devices <br/>
203, Buffering <br/>
584, Mute/Solo <br/>
136, Playback <br/>
517, Seeking <br/>
137, Recording <br/>
518, Loop Recording <br/>
478, Rendering <br/>
213, Appearance <br/>
236, Media(Appearance) <br/>
459, Peaks/Waveforms <br/>
524, Fades/Crossfades <br/>
458, Track Control Panels <br/>
172, Editing Behavior <br/>
447, Envelope Display <br/>
519, Automation <br/>
215, Mouse <br/>
466, Mouse Modifiers <br/>
490, MIDI Editor <br/>
138, Media <br/>
257, MIDI <br/>
449, Video/REX/Misc <br/>
154, Plug-ins<br/>
505, Compatibility <br/>
210, VST <br/>
209, ReWire/DX <br/>
515, ReaScript <br/>
227, ReaMote <br/>
257, Control/OSC/web <br/>
160, External Editors 
      </parameter>
      <parameter id="2" datatype="pageByName" parmname="pageByName">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetTrackGroupMembershipHigh</slug>
    <functioncall prog_lang="cpp">unsigned int GetSetTrackGroupMembershipHigh(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</functioncall>
    <functioncall prog_lang="eel">uint GetSetTrackGroupMembershipHigh(MediaTrack tr, &quot;groupname&quot;, uint setmask, uint setvalue)</functioncall>
    <functioncall prog_lang="lua">integer groupstate = reaper.GetSetTrackGroupMembershipHigh(MediaTrack tr, string groupname, integer setmask, integer setvalue)</functioncall>
    <functioncall prog_lang="python">Unknown RPR_GetSetTrackGroupMembershipHigh(MediaTrack tr, String groupname, Unknown setmask, Unknown setvalue)</functioncall>
    <requires>
      Reaper=5.70
      Lua=5.3
    </requires>
    <description>
Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:<br/>
VOLUME_MASTER<br/>
VOLUME_SLAVE<br/>
VOLUME_VCA_MASTER<br/>
VOLUME_VCA_SLAVE<br/>
PAN_MASTER<br/>
PAN_SLAVE<br/>
WIDTH_MASTER<br/>
WIDTH_SLAVE<br/>
MUTE_MASTER<br/>
MUTE_SLAVE<br/>
SOLO_MASTER<br/>
SOLO_SLAVE<br/>
RECARM_MASTER<br/>
RECARM_SLAVE<br/>
POLARITY_MASTER<br/>
POLARITY_SLAVE<br/>
AUTOMODE_MASTER<br/>
AUTOMODE_SLAVE<br/>
VOLUME_REVERSE<br/>
PAN_REVERSE<br/>
WIDTH_REVERSE<br/>
NO_MASTER_WHEN_SLAVE<br/>
VOLUME_VCA_SLAVE_ISPREFX
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="groupstate" retvalname="groupstate">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="groupname" parmname="groupname">

      </parameter>
      <parameter id="3" datatype="setmask" parmname="setmask">

      </parameter>
      <parameter id="4" datatype="setvalue" parmname="setvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetTrackSendInfo_String</slug>
    <functioncall prog_lang="cpp">bool GetSetTrackSendInfo_String(MediaTrack* tr, int category, int sendidx, const char* parmname, char* stringNeedBig, bool setNewValue)</functioncall>
    <functioncall prog_lang="eel">bool GetSetTrackSendInfo_String(MediaTrack tr, int category, int sendidx, &quot;parmname&quot;, #stringNeedBig, bool setNewValue)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string stringNeedBig = reaper.GetSetTrackSendInfo_String(MediaTrack tr, integer category, integer sendidx, string parmname, string stringNeedBig, boolean setNewValue)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack tr, Int category, Int sendidx, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetTrackSendInfo_String(tr, category, sendidx, parmname, stringNeedBig, setNewValue)</functioncall>
    <requires>
      Reaper=5.975
      Lua=5.3
    </requires>
    <description>
Gets/sets a send attribute string:<br/>
    P_EXT:xyz : char * : extension-specific persistent data
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="stringNeedBig">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="tr">

      </parameter>
      <parameter id="2" datatype="integer" parmname="category">

      </parameter>
      <parameter id="3" datatype="integer" parmname="sendidx">

      </parameter>
      <parameter id="4" datatype="string" parmname="parmname">

      </parameter>
      <parameter id="5" datatype="string" parmname="stringNeedBig">

      </parameter>
      <parameter id="6" datatype="boolean" parmname="setNewValue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvAlloc</slug>
    <functioncall prog_lang="cpp">BR_Envelope* BR_EnvAlloc(TrackEnvelope* envelope, bool takeEnvelopesUseProjectTime)</functioncall>
    <functioncall prog_lang="eel">BR_Envelope extension_api(&quot;BR_EnvAlloc&quot;, TrackEnvelope envelope, bool takeEnvelopesUseProjectTime)</functioncall>
    <functioncall prog_lang="lua">BR_Envelope = reaper.BR_EnvAlloc(TrackEnvelope envelope, boolean takeEnvelopesUseProjectTime)</functioncall>
    <functioncall prog_lang="python">BR_Envelope BR_EnvAlloc(TrackEnvelope envelope, Boolean takeEnvelopesUseProjectTime)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Create a BR_Envelope-object from a track-envelope pointer or take-envelope pointer. To apply changes to a BR_Envelope-object, always call <a href="#BR_EnvFree">BR_EnvFree</a> to release the object and commit changes if needed. A BR_Envelope is not a TrackEnvelope-object and therefore can’t be used as TrackEnvelope-object!</p>
<p>For manipulation see <a href="#BR_EnvCountPoints">BR_EnvCountPoints</a>, <a href="#BR_EnvDeletePoint">BR_EnvDeletePoint</a>, <a href="#BR_EnvFind">BR_EnvFind</a>, <a href="#BR_EnvFindNext">BR_EnvFindNext</a>, <a href="#BR_EnvFindPrevious">BR_EnvFindPrevious</a>, <a href="#BR_EnvGetParentTake">BR_EnvGetParentTake</a>, <a href="#BR_EnvGetParentTrack">BR_EnvGetParentTrack</a>, <a href="#BR_EnvGetPoint">BR_EnvGetPoint</a>, <a href="#BR_EnvGetProperties">BR_EnvGetProperties</a>, <a href="#BR_EnvSetPoint">BR_EnvSetPoint</a>, <a href="#BR_EnvSetProperties">BR_EnvSetProperties</a>, <a href="#BR_EnvValueAtPos">BR_EnvValueAtPos</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="BR_Envelope" retvalname="BR_Envelope">
the requested Envelope as a BR_Envelope-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">
a TrackEnvelope-object of the envelope, that you want to have as a BR_Envelope
      </parameter>
      <parameter id="2" datatype="takeEnvelopesUseProjectTime" parmname="takeEnvelopesUseProjectTime">
false, take envelope points' positions are counted from take position, not project start time; true, work with project time instead
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     br
     br_envelope
     create
     get
     envelope
     allocate
     sws
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvCountPoints</slug>
    <functioncall prog_lang="cpp">int BR_EnvCountPoints(BR_Envelope* envelope)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_EnvCountPoints&quot;, BR_Envelope envelope)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.BR_EnvCountPoints(BR_Envelope envelope)</functioncall>
    <functioncall prog_lang="python">Int BR_EnvCountPoints(BR_Envelope envelope)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Count envelope points in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
the number of envelope-points in the BR_Envelope-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">
the BR_Envelope-object, whose points you want to count
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     br
     br_envelope
     sws
     envelope
     count
     point
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvDeletePoint</slug>
    <functioncall prog_lang="cpp">bool BR_EnvDeletePoint(BR_Envelope* envelope, int id)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_EnvDeletePoint&quot;, BR_Envelope envelope, int id)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_EnvDeletePoint(BR_Envelope envelope, integer id)</functioncall>
    <functioncall prog_lang="python">Boolean BR_EnvDeletePoint(BR_Envelope envelope, Int id)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Delete envelope point by index (zero-based) in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, deleting was successful; false, deleting was unsuccessful
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">
the BR_Envelope-object, where you want to delete an envelope-point
      </parameter>
      <parameter id="2" datatype="id" parmname="id">
the envelope-point-idx, that you want to delete. 0, first envelope-point; 1, second envelope-point, etc
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     br
     br_envelope
     sws
     envelope
     delete
     point
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>BR_EnvFind</slug>
    <functioncall prog_lang="cpp">int BR_EnvFind(BR_Envelope* envelope, double position, double delta)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_EnvFind&quot;, BR_Envelope envelope, position, delta)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.BR_EnvFind(BR_Envelope envelope, number position, number delta)</functioncall>
    <functioncall prog_lang="python">Int BR_EnvFind(BR_Envelope envelope, Float position, Float delta)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Find envelope point at time position in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. Pass delta &amp;gt; 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
envelope-point-id or -1 on failure
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">
the BR_Envelope-object, in which you want to find an envelope-point
      </parameter>
      <parameter id="2" datatype="position" parmname="position">
the position in seconds, where you want to find from
      </parameter>
      <parameter id="3" datatype="delta" parmname="delta">
delta &amp;gt; 0 to search surrounding range
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     br
     br_envelope
     sws
     envelope
     find
     point
     delta
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvFindNext</slug>
    <functioncall prog_lang="cpp">int BR_EnvFindNext(BR_Envelope* envelope, double position)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_EnvFindNext&quot;, BR_Envelope envelope, position)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.BR_EnvFindNext(BR_Envelope envelope, number position)</functioncall>
    <functioncall prog_lang="python">Int BR_EnvFindNext(BR_Envelope envelope, Float position)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Find next envelope point after time position in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. Returns envelope point id (zero-based) on success or -1 on failure.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
envelope-point-id or -1 on failure
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">
the BR_Envelope-object, in which you want to find the next envelope-point
      </parameter>
      <parameter id="2" datatype="position" parmname="position">
the position in seconds, where you want to find the next envelope-point from
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     br
     br_envelope
     sws
     envelope
     find
     point
     next
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvFindPrevious</slug>
    <functioncall prog_lang="cpp">int BR_EnvFindPrevious(BR_Envelope* envelope, double position)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_EnvFindPrevious&quot;, BR_Envelope envelope, position)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.BR_EnvFindPrevious(BR_Envelope envelope, number position)</functioncall>
    <functioncall prog_lang="python">Int BR_EnvFindPrevious(BR_Envelope envelope, Float position)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Find previous envelope point before time position in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. Returns envelope point id (zero-based) on success or -1 on failure.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">
envelope-point-id or -1 on failure
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">
the BR_Envelope-object, in which you want to find the previous envelope-point
      </parameter>
      <parameter id="2" datatype="position" parmname="position">
the position in seconds, where you want to find the previous envelope-point from
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     br
     br_envelope
     sws
     envelope
     find
     point
     previous
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvFree</slug>
    <functioncall prog_lang="cpp">bool BR_EnvFree(BR_Envelope* envelope, bool commit)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_EnvFree&quot;, BR_Envelope envelope, bool commit)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_EnvFree(BR_Envelope envelope, boolean commit)</functioncall>
    <functioncall prog_lang="python">Boolean BR_EnvFree(BR_Envelope envelope, Boolean commit)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Free envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a> and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn’t modified nothing will get committed even if commit = true - in that case function returns false.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, committing was successful; false, committing was unsuccessful or no committing was necessary
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">
the BR_Envelope-object that you want to commit and be freed
      </parameter>
      <parameter id="2" datatype="commit" parmname="commit">
true, commit changes when freeing the BR\_Envelope-object; false, don't commit changes when freeing the BR\_Envelope-object
      </parameter>
    </parameters>
    <tags>
     envelopemanagement
     br
     br_envelope
     sws
     envelope
     free
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvGetParentTake</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* BR_EnvGetParentTake(BR_Envelope* envelope)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take extension_api(&quot;BR_EnvGetParentTake&quot;, BR_Envelope envelope)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take = reaper.BR_EnvGetParentTake(BR_Envelope envelope)</functioncall>
    <functioncall prog_lang="python">MediaItem_Take BR_EnvGetParentTake(BR_Envelope envelope)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] If envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a> is take envelope, returns parent media item take, otherwise NULL.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="MediaItem_Take">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvGetParentTrack</slug>
    <functioncall prog_lang="cpp">MediaItem* BR_EnvGetParentTrack(BR_Envelope* envelope)</functioncall>
    <functioncall prog_lang="eel">MediaItem extension_api(&quot;BR_EnvGetParentTrack&quot;, BR_Envelope envelope)</functioncall>
    <functioncall prog_lang="lua">MediaItem = reaper.BR_EnvGetParentTrack(BR_Envelope envelope)</functioncall>
    <functioncall prog_lang="python">MediaItem BR_EnvGetParentTrack(BR_Envelope envelope)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get parent track of envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. If take envelope, returns NULL.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="MediaItem">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvGetPoint</slug>
    <functioncall prog_lang="cpp">bool BR_EnvGetPoint(BR_Envelope* envelope, int id, double* positionOut, double* valueOut, int* shapeOut, bool* selectedOut, double* bezierOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_EnvGetPoint&quot;, BR_Envelope envelope, int id, &amp;amp;position, &amp;amp;value, int &amp;amp;shape, bool &amp;amp;selected, &amp;amp;bezier)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number position, number value, number shape, boolean selected, number bezier = reaper.BR_EnvGetPoint(BR_Envelope envelope, integer id)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, BR_Envelope envelope, Int id, Float positionOut, Float valueOut, Int shapeOut, Boolean selectedOut, Float bezierOut) = BR_EnvGetPoint(envelope, id, positionOut, valueOut, shapeOut, selectedOut, bezierOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get envelope point by id (zero-based) from the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. Returns true on success.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="position" retvalname="position">

      </retval>
      <retval id="3" datatype="value" retvalname="value">

      </retval>
      <retval id="4" datatype="shape" retvalname="shape">

      </retval>
      <retval id="5" datatype="selected" retvalname="selected">

      </retval>
      <retval id="6" datatype="bezier" retvalname="bezier">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="id" parmname="id">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvGetProperties</slug>
    <functioncall prog_lang="cpp">void BR_EnvGetProperties(BR_Envelope* envelope, bool* activeOut, bool* visibleOut, bool* armedOut, bool* inLaneOut, int* laneHeightOut, int* defaultShapeOut, double* minValueOut, double* maxValueOut, double* centerValueOut, int* typeOut, bool* faderScalingOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_EnvGetProperties&quot;, BR_Envelope envelope, bool &amp;amp;active, bool &amp;amp;visible, bool &amp;amp;armed, bool &amp;amp;inLane, int &amp;amp;laneHeight, int &amp;amp;defaultShape, &amp;amp;minValue, &amp;amp;maxValue, &amp;amp;centerValue, int &amp;amp;type, bool &amp;amp;faderScaling)</functioncall>
    <functioncall prog_lang="lua">boolean active retval, boolean visible, boolean armed, boolean inLane, number laneHeight, number defaultShape, number minValue, number maxValue, number centerValue, number type, boolean faderScaling = reaper.BR_EnvGetProperties(BR_Envelope envelope)</functioncall>
    <functioncall prog_lang="python">(BR_Envelope envelope, Boolean activeOut, Boolean visibleOut, Boolean armedOut, Boolean inLaneOut, Int laneHeightOut, Int defaultShapeOut, Float minValueOut, Float maxValueOut, Float centerValueOut, Int typeOut, Boolean faderScalingOut) = BR_EnvGetProperties(envelope, activeOut, visibleOut, armedOut, inLaneOut, laneHeightOut, defaultShapeOut, minValueOut, maxValueOut, centerValueOut, typeOut, faderScalingOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get envelope properties for the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>.</p>
<p>active: true if envelope is active visible: true if envelope is visible armed: true if envelope is armed inLane: true if envelope has it’s own envelope lane laneHeight: envelope lane override height. 0 for none, otherwise size in pixels defaultShape: default point shape: 0-&amp;gt;Linear, 1-&amp;gt;Square, 2-&amp;gt;Slow start/end, 3-&amp;gt;Fast start, 4-&amp;gt;Fast end, 5-&amp;gt;Bezier minValue: minimum envelope value maxValue: maximum envelope value type: envelope type: 0-&amp;gt;Volume, 1-&amp;gt;Volume (Pre-FX), 2-&amp;gt;Pan, 3-&amp;gt;Pan (Pre-FX), 4-&amp;gt;Width, 5-&amp;gt;Width (Pre-FX), 6-&amp;gt;Mute, 7-&amp;gt;Pitch, 8-&amp;gt;Playrate, 9-&amp;gt;Tempo map, 10-&amp;gt;Parameter faderScaling: true if envelope uses fader scaling</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="active" retvalname="retval">

      </retval>
      <retval id="2" datatype="visible" retvalname="visible">

      </retval>
      <retval id="3" datatype="armed" retvalname="armed">

      </retval>
      <retval id="4" datatype="inLane" retvalname="inLane">

      </retval>
      <retval id="5" datatype="laneHeight" retvalname="laneHeight">

      </retval>
      <retval id="6" datatype="defaultShape" retvalname="defaultShape">

      </retval>
      <retval id="7" datatype="minValue" retvalname="minValue">

      </retval>
      <retval id="8" datatype="maxValue" retvalname="maxValue">

      </retval>
      <retval id="9" datatype="centerValue" retvalname="centerValue">

      </retval>
      <retval id="10" datatype="type" retvalname="type">

      </retval>
      <retval id="11" datatype="faderScaling" retvalname="faderScaling">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvSetPoint</slug>
    <functioncall prog_lang="cpp">bool BR_EnvSetPoint(BR_Envelope* envelope, int id, double position, double value, int shape, bool selected, double bezier)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_EnvSetPoint&quot;, BR_Envelope envelope, int id, position, value, int shape, bool selected, bezier)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_EnvSetPoint(BR_Envelope envelope, integer id, number position, number value, integer shape, boolean selected, number bezier)</functioncall>
    <functioncall prog_lang="python">Boolean BR_EnvSetPoint(BR_Envelope envelope, Int id, Float position, Float value, Int shape, Boolean selected, Float bezier)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Set envelope point by id (zero-based) in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. To create point instead, pass id = -1. Note that if new point is inserted or existing point’s time position is changed, points won’t automatically get sorted. To do that, see <a href="#BR_EnvSortPoints">BR_EnvSortPoints</a>. Returns true on success.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="id" parmname="id">

      </parameter>
      <parameter id="3" datatype="position" parmname="position">

      </parameter>
      <parameter id="4" datatype="value" parmname="value">

      </parameter>
      <parameter id="5" datatype="shape" parmname="shape">

      </parameter>
      <parameter id="6" datatype="selected" parmname="selected">

      </parameter>
      <parameter id="7" datatype="bezier" parmname="bezier">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvSetProperties</slug>
    <functioncall prog_lang="cpp">void BR_EnvSetProperties(BR_Envelope* envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_EnvSetProperties&quot;, BR_Envelope envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling)</functioncall>
    <functioncall prog_lang="lua">reaper.BR_EnvSetProperties(BR_Envelope envelope, boolean active, boolean visible, boolean armed, boolean inLane, integer laneHeight, integer defaultShape, boolean faderScaling)</functioncall>
    <functioncall prog_lang="python">BR_EnvSetProperties(BR_Envelope envelope, Boolean active, Boolean visible, Boolean armed, Boolean inLane, Int laneHeight, Int defaultShape, Boolean faderScaling)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Set envelope properties for the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. For parameter description see <a href="#BR_EnvGetProperties">BR_EnvGetProperties</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="active" parmname="active">

      </parameter>
      <parameter id="3" datatype="visible" parmname="visible">

      </parameter>
      <parameter id="4" datatype="armed" parmname="armed">

      </parameter>
      <parameter id="5" datatype="inLane" parmname="inLane">

      </parameter>
      <parameter id="6" datatype="laneHeight" parmname="laneHeight">

      </parameter>
      <parameter id="7" datatype="defaultShape" parmname="defaultShape">

      </parameter>
      <parameter id="8" datatype="faderScaling" parmname="faderScaling">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvSortPoints</slug>
    <functioncall prog_lang="cpp">void BR_EnvSortPoints(BR_Envelope* envelope)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_EnvSortPoints&quot;, BR_Envelope envelope)</functioncall>
    <functioncall prog_lang="lua">reaper.BR_EnvSortPoints(BR_Envelope envelope)</functioncall>
    <functioncall prog_lang="python">BR_EnvSortPoints(BR_Envelope envelope)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with <a href="#BR_EnvSetPoint">BR_EnvSetPoint</a>. Note that you do not have to call this before doing <a href="#BR_EnvFree">BR_EnvFree</a> since it does handle unsorted points too.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_EnvValueAtPos</slug>
    <functioncall prog_lang="cpp">double BR_EnvValueAtPos(BR_Envelope* envelope, double position)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;BR_EnvValueAtPos&quot;, BR_Envelope envelope, position)</functioncall>
    <functioncall prog_lang="lua">number = reaper.BR_EnvValueAtPos(BR_Envelope envelope, number position)</functioncall>
    <functioncall prog_lang="python">Float BR_EnvValueAtPos(BR_Envelope envelope, Float position)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get envelope value at time position for the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>.</p>

    </description>
    <chapter_context>
      Envelope Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="envelope" parmname="envelope">

      </parameter>
      <parameter id="2" datatype="position" parmname="position">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetArrangeView</slug>
    <functioncall prog_lang="cpp">void BR_GetArrangeView(ReaProject* proj, double* startTimeOut, double* endTimeOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_GetArrangeView&quot;, ReaProject proj, &amp;amp;startTime, &amp;amp;endTime)</functioncall>
    <functioncall prog_lang="lua">number startTime retval, number endTime = reaper.BR_GetArrangeView(ReaProject proj)</functioncall>
    <functioncall prog_lang="python">(ReaProject proj, Float startTimeOut, Float endTimeOut) = BR_GetArrangeView(proj, startTimeOut, endTimeOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Deprecated, see <a href="#GetSet_ArrangeView2">GetSet_ArrangeView2</a> (REAPER v5.12pre4+) – Get start and end time position of arrange view. To set arrange view instead, see <a href="#BR_SetArrangeView">BR_SetArrangeView</a>.</p>

    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="startTime" retvalname="retval">
the current starttime in the arrangeview in seconds
      </retval>
      <retval id="2" datatype="endTime" retvalname="endTime">
the current endtime in the arrangeview in seconds
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
    </parameters>
    <tags>
     arrangeviewmanagement
     get
     start
     end
     seconds
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetClosestGridDivision</slug>
    <functioncall prog_lang="cpp">double BR_GetClosestGridDivision(double position)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;BR_GetClosestGridDivision&quot;, position)</functioncall>
    <functioncall prog_lang="lua">number = reaper.BR_GetClosestGridDivision(number position)</functioncall>
    <functioncall prog_lang="python">Float BR_GetClosestGridDivision(Float position)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get closest grid division to position. Note that this functions is different from <a href="#SnapToGrid">SnapToGrid</a> in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see <a href="#BR_GetNextGridDivision">BR_GetNextGridDivision</a> and <a href="#BR_GetPrevGridDivision">BR_GetPrevGridDivision</a>.</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="position" parmname="position">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetCurrentTheme</slug>
    <functioncall prog_lang="cpp">void BR_GetCurrentTheme(char* themePathOut, int themePathOut_sz, char* themeNameOut, int themeNameOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_GetCurrentTheme&quot;, #themePath, #themeName)</functioncall>
    <functioncall prog_lang="lua">string themePath retval, string themeName = reaper.BR_GetCurrentTheme()</functioncall>
    <functioncall prog_lang="python">(String themePathOut, Int themePathOut_sz, String themeNameOut, Int themeNameOut_sz) = BR_GetCurrentTheme(themePathOut, themePathOut_sz, themeNameOut, themeNameOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="themePath" retvalname="retval">

      </retval>
      <retval id="2" datatype="themeName" retvalname="themeName">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaItemByGUID</slug>
    <functioncall prog_lang="cpp">MediaItem* BR_GetMediaItemByGUID(ReaProject* proj, const char* guidStringIn)</functioncall>
    <functioncall prog_lang="eel">MediaItem extension_api(&quot;BR_GetMediaItemByGUID&quot;, ReaProject proj, &quot;guidStringIn&quot;)</functioncall>
    <functioncall prog_lang="lua">MediaItem = reaper.BR_GetMediaItemByGUID(ReaProject proj, string guidStringIn)</functioncall>
    <functioncall prog_lang="python">MediaItem BR_GetMediaItemByGUID(ReaProject proj, String guidStringIn)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item’s GUID as a string, see <a href="#BR_GetMediaItemGUID">BR_GetMediaItemGUID</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="MediaItem">
the requested MediaItem as a MediaItem-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="guidStringIn" parmname="guidStringIn">
<p>the guid of the MediaItem you want to request.</p>

      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     guid
     project
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaItemGUID</slug>
    <functioncall prog_lang="cpp">void BR_GetMediaItemGUID(MediaItem* item, char* guidStringOut, int guidStringOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_GetMediaItemGUID&quot;, MediaItem item, #guidString)</functioncall>
    <functioncall prog_lang="lua">string guidString = reaper.BR_GetMediaItemGUID(MediaItem item)</functioncall>
    <functioncall prog_lang="python">(MediaItem item, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemGUID(item, guidStringOut, guidStringOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see <a href="#BR_GetMediaItemByGUID">BR_GetMediaItemByGUID</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="guidString" retvalname="guidString">
the requested guid of the MediaItem
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">
the MediaItem, whose guid you want to request
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     get
     guid
     item
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaItemImageResource</slug>
    <functioncall prog_lang="cpp">bool BR_GetMediaItemImageResource(MediaItem* item, char* imageOut, int imageOut_sz, int* imageFlagsOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_GetMediaItemImageResource&quot;, MediaItem item, #image, int &amp;amp;imageFlags)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string image, number imageFlags = reaper.BR_GetMediaItemImageResource(MediaItem item)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem item, String imageOut, Int imageOut_sz, Int imageFlagsOut) = BR_GetMediaItemImageResource(item, imageOut, imageOut_sz, imageFlagsOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get currently loaded image resource and it’s flags for a given item. Returns false if there is no image resource set. To set image resource, see <a href="#BR_SetMediaItemImageResource">BR_SetMediaItemImageResource</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="image" retvalname="image">

      </retval>
      <retval id="3" datatype="imageFlags" retvalname="imageFlags">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaItemTakeGUID</slug>
    <functioncall prog_lang="cpp">void BR_GetMediaItemTakeGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_GetMediaItemTakeGUID&quot;, MediaItem_Take take, #guidString)</functioncall>
    <functioncall prog_lang="lua">string guidString = reaper.BR_GetMediaItemTakeGUID(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">(MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemTakeGUID(take, guidStringOut, guidStringOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see <a href="#SNM_GetMediaItemTakeByGUID">SNM_GetMediaItemTakeByGUID</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="guidString" retvalname="guidString">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaSourceProperties</slug>
    <functioncall prog_lang="cpp">bool BR_GetMediaSourceProperties(MediaItem_Take* take, bool* sectionOut, double* startOut, double* lengthOut, double* fadeOut, bool* reverseOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_GetMediaSourceProperties&quot;, MediaItem_Take take, bool &amp;amp;section, &amp;amp;start, &amp;amp;length, &amp;amp;fade, bool &amp;amp;reverse)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean section, number start, number length, number fade, boolean reverse = reaper.BR_GetMediaSourceProperties(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean sectionOut, Float startOut, Float lengthOut, Float fadeOut, Boolean reverseOut) = BR_GetMediaSourceProperties(take, sectionOut, startOut, lengthOut, fadeOut, reverseOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get take media source properties as they appear in Item properties. Returns false if take can’t have them (MIDI items etc.). To set source properties, see <a href="#BR_SetMediaSourceProperties">BR_SetMediaSourceProperties</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="section" retvalname="section">

      </retval>
      <retval id="3" datatype="start" retvalname="start">

      </retval>
      <retval id="4" datatype="length" retvalname="length">

      </retval>
      <retval id="5" datatype="fade" retvalname="fade">

      </retval>
      <retval id="6" datatype="reverse" retvalname="reverse">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaTrackByGUID</slug>
    <functioncall prog_lang="cpp">MediaTrack* BR_GetMediaTrackByGUID(ReaProject* proj, const char* guidStringIn)</functioncall>
    <functioncall prog_lang="eel">MediaTrack extension_api(&quot;BR_GetMediaTrackByGUID&quot;, ReaProject proj, &quot;guidStringIn&quot;)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.BR_GetMediaTrackByGUID(ReaProject proj, string guidStringIn)</functioncall>
    <functioncall prog_lang="python">MediaTrack BR_GetMediaTrackByGUID(ReaProject proj, String guidStringIn)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track’s GUID as a string, see <a href="#BR_GetMediaTrackGUID">BR_GetMediaTrackGUID</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">
the MediaTrack requested, as MediaTrack-object
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="guidStringIn" parmname="guidStringIn">
<p>the guid of the track you want to request</p>

      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     guid
     track
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaTrackFreezeCount</slug>
    <functioncall prog_lang="cpp">int BR_GetMediaTrackFreezeCount(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_GetMediaTrackFreezeCount&quot;, MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.BR_GetMediaTrackFreezeCount(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">Int BR_GetMediaTrackFreezeCount(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Get media track freeze count (if track isn't frozen at all, returns 0).
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaTrackGUID</slug>
    <functioncall prog_lang="cpp">void BR_GetMediaTrackGUID(MediaTrack* track, char* guidStringOut, int guidStringOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_GetMediaTrackGUID&quot;, MediaTrack track, #guidString)</functioncall>
    <functioncall prog_lang="lua">string guidString = reaper.BR_GetMediaTrackGUID(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">(MediaTrack track, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaTrackGUID(track, guidStringOut, guidStringOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see <a href="#BR_GetMediaTrackByGUID">BR_GetMediaTrackByGUID</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="guidString" retvalname="guidString">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaTrackLayouts</slug>
    <functioncall prog_lang="cpp">void BR_GetMediaTrackLayouts(MediaTrack* track, char* mcpLayoutNameOut, int mcpLayoutNameOut_sz, char* tcpLayoutNameOut, int tcpLayoutNameOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_GetMediaTrackLayouts&quot;, MediaTrack track, #mcpLayoutName, #tcpLayoutName)</functioncall>
    <functioncall prog_lang="lua">string mcpLayoutName retval, string tcpLayoutName = reaper.BR_GetMediaTrackLayouts(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">(MediaTrack track, String mcpLayoutNameOut, Int mcpLayoutNameOut_sz, String tcpLayoutNameOut, Int tcpLayoutNameOut_sz) = BR_GetMediaTrackLayouts(track, mcpLayoutNameOut, mcpLayoutNameOut_sz, tcpLayoutNameOut, tcpLayoutNameOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Deprecated, see <a href="#GetSetMediaTrackInfo">GetSetMediaTrackInfo</a> (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string ("") means that layout is set to the default layout. To set media track layouts, see <a href="#BR_SetMediaTrackLayouts">BR_SetMediaTrackLayouts</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="mcpLayoutName" retvalname="retval">

      </retval>
      <retval id="2" datatype="tcpLayoutName" retvalname="tcpLayoutName">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaTrackSendInfo_Envelope</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* BR_GetMediaTrackSendInfo_Envelope(MediaTrack* track, int category, int sendidx, int envelopeType)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope extension_api(&quot;BR_GetMediaTrackSendInfo_Envelope&quot;, MediaTrack track, int category, int sendidx, int envelopeType)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope = reaper.BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, integer category, integer sendidx, integer envelopeType)</functioncall>
    <functioncall prog_lang="python">TrackEnvelope BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, Int category, Int sendidx, Int envelopeType)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get track envelope for send/receive/hardware output.</p>
<p>category is &amp;lt;0 for receives, 0=sends, &amp;gt;0 for hardware outputs sendidx is zero-based (see <a href="#GetTrackNumSends">GetTrackNumSends</a> to count track sends/receives/hardware outputs) envelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)</p>
<p>Note: To get or set other send attributes, see <a href="#BR_GetSetTrackSendInfo">BR_GetSetTrackSendInfo</a> and <a href="#BR_GetMediaTrackSendInfo_Track">BR_GetMediaTrackSendInfo_Track</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="TrackEnvelope" retvalname="TrackEnvelope">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="category" parmname="category">

      </parameter>
      <parameter id="3" datatype="sendidx" parmname="sendidx">

      </parameter>
      <parameter id="4" datatype="envelopeType" parmname="envelopeType">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMediaTrackSendInfo_Track</slug>
    <functioncall prog_lang="cpp">MediaTrack* BR_GetMediaTrackSendInfo_Track(MediaTrack* track, int category, int sendidx, int trackType)</functioncall>
    <functioncall prog_lang="eel">MediaTrack extension_api(&quot;BR_GetMediaTrackSendInfo_Track&quot;, MediaTrack track, int category, int sendidx, int trackType)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.BR_GetMediaTrackSendInfo_Track(MediaTrack track, integer category, integer sendidx, integer trackType)</functioncall>
    <functioncall prog_lang="python">MediaTrack BR_GetMediaTrackSendInfo_Track(MediaTrack track, Int category, Int sendidx, Int trackType)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get source or destination media track for send/receive.</p>
<p>category is &amp;lt;0 for receives, 0=sends sendidx is zero-based (see <a href="#GetTrackNumSends">GetTrackNumSends</a> to count track sends/receives) trackType determines which track is returned (0=source track, 1=destination track)</p>
<p>Note: To get or set other send attributes, see <a href="#BR_GetSetTrackSendInfo">BR_GetSetTrackSendInfo</a> and <a href="#BR_GetMediaTrackSendInfo_Envelope">BR_GetMediaTrackSendInfo_Envelope</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="category" parmname="category">

      </parameter>
      <parameter id="3" datatype="sendidx" parmname="sendidx">

      </parameter>
      <parameter id="4" datatype="trackType" parmname="trackType">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMidiSourceLenPPQ</slug>
    <functioncall prog_lang="cpp">double BR_GetMidiSourceLenPPQ(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;BR_GetMidiSourceLenPPQ&quot;, MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">number = reaper.BR_GetMidiSourceLenPPQ(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">Float BR_GetMidiSourceLenPPQ(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMidiTakePoolGUID</slug>
    <functioncall prog_lang="cpp">bool BR_GetMidiTakePoolGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_GetMidiTakePoolGUID&quot;, MediaItem_Take take, #guidString)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string guidString = reaper.BR_GetMidiTakePoolGUID(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMidiTakePoolGUID(take, guidStringOut, guidStringOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="guidString" retvalname="guidString">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMidiTakeTempoInfo</slug>
    <functioncall prog_lang="cpp">bool BR_GetMidiTakeTempoInfo(MediaItem_Take* take, bool* ignoreProjTempoOut, double* bpmOut, int* numOut, int* denOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_GetMidiTakeTempoInfo&quot;, MediaItem_Take take, bool &amp;amp;ignoreProjTempo, &amp;amp;bpm, int &amp;amp;num, int &amp;amp;den)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean ignoreProjTempo, number bpm, number num, number den = reaper.BR_GetMidiTakeTempoInfo(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean ignoreProjTempoOut, Float bpmOut, Int numOut, Int denOut) = BR_GetMidiTakeTempoInfo(take, ignoreProjTempoOut, bpmOut, numOut, denOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Get &quot;ignore project tempo&quot; information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="ignoreProjTempo" retvalname="ignoreProjTempo">

      </retval>
      <retval id="3" datatype="bpm" retvalname="bpm">

      </retval>
      <retval id="4" datatype="num" retvalname="num">

      </retval>
      <retval id="5" datatype="den" retvalname="den">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMouseCursorContext</slug>
    <functioncall prog_lang="cpp">void BR_GetMouseCursorContext(char* windowOut, int windowOut_sz, char* segmentOut, int segmentOut_sz, char* detailsOut, int detailsOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_GetMouseCursorContext&quot;, #window, #segment, #details)</functioncall>
    <functioncall prog_lang="lua">string window retval, string segment, string details = reaper.BR_GetMouseCursorContext()</functioncall>
    <functioncall prog_lang="python">(String windowOut, Int windowOut_sz, String segmentOut, Int segmentOut_sz, String detailsOut, Int detailsOut_sz) = BR_GetMouseCursorContext(windowOut, windowOut_sz, segmentOut, segmentOut_sz, detailsOut, detailsOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.</p>
<p>To get more info on stuff that was found under mouse cursor see <a href="#BR_GetMouseCursorContext_Envelope">BR_GetMouseCursorContext_Envelope</a>, <a href="#BR_GetMouseCursorContext_Item">BR_GetMouseCursorContext_Item</a>, <a href="#BR_GetMouseCursorContext_MIDI">BR_GetMouseCursorContext_MIDI</a>, <a href="#BR_GetMouseCursorContext_Position">BR_GetMouseCursorContext_Position</a>, <a href="#BR_GetMouseCursorContext_Take">BR_GetMouseCursorContext_Take</a>, <a href="#BR_GetMouseCursorContext_Track">BR_GetMouseCursorContext_Track</a> &lt;table border=‘2’&gt; &lt;tr&gt;&lt;th style=‘width:100px’&gt;Window&lt;/th&gt;&lt;th style=‘width:100px’&gt;Segment&lt;/th&gt;&lt;th style=‘width:300px’&gt;Details&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th rowspan=‘1’ align = ‘center’&gt;unknown&lt;/th&gt;&lt;td&gt;"“&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th rowspan=‘4’ align = ‘center’&gt;ruler&lt;/th&gt;&lt;td&gt;region_lane &lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;marker_lane &lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;tempo_lane &lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;timeline&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th rowspan=‘1’ align = ‘center’&gt;transport&lt;/th&gt;&lt;td&gt;”“&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th rowspan=‘3’ align = ‘center’&gt;tcp &lt;/th&gt;&lt;td&gt;track&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;envelope&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;empty&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th rowspan=‘2’ align = ‘center’&gt;mcp &lt;/th&gt;&lt;td&gt;track&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;empty&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th rowspan=‘3’ align = ‘center’&gt;arrange&lt;/th&gt;&lt;td&gt;track&lt;/td&gt;&lt;td&gt;empty,item, item_stretch_marker,env_point, env_segment &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;envelope&lt;/td&gt;&lt;td&gt;empty, env_point, env_segment&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;empty&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;th rowspan=‘5’ align = ‘center’&gt;midi_editor &lt;/th&gt;&lt;td&gt;unknown&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;ruler&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;piano&lt;/td&gt;&lt;td&gt;”“&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;notes&lt;/td&gt;&lt;td&gt;”"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;cc_lane&lt;/td&gt;&lt;td&gt;cc_selector, cc_lane&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="window" retvalname="retval">
the window, in which the mouse-cursor was, at time of calling BR_GetMouseCursorContext
      </retval>
      <retval id="2" datatype="segment" retvalname="segment">
the segment within the window                
      </retval>
      <retval id="3" datatype="details" retvalname="details">
details with the segment of the window
      </retval>
    </retvals>
    <tags>
     userinterface
     get
     mouse
     cursor
     context
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMouseCursorContext_Envelope</slug>
    <functioncall prog_lang="cpp">TrackEnvelope* BR_GetMouseCursorContext_Envelope(bool* takeEnvelopeOut)</functioncall>
    <functioncall prog_lang="eel">TrackEnvelope extension_api(&quot;BR_GetMouseCursorContext_Envelope&quot;, bool &amp;amp;takeEnvelope)</functioncall>
    <functioncall prog_lang="lua">TrackEnvelope retval, boolean takeEnvelope = reaper.BR_GetMouseCursorContext_Envelope()</functioncall>
    <functioncall prog_lang="python">(TrackEnvelope retval, Boolean takeEnvelopeOut) = BR_GetMouseCursorContext_Envelope(takeEnvelopeOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Returns envelope that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>. In case the envelope belongs to take, takeEnvelope will be true.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="takeEnvelope" retvalname="takeEnvelope">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMouseCursorContext_Item</slug>
    <functioncall prog_lang="cpp">MediaItem* BR_GetMouseCursorContext_Item()</functioncall>
    <functioncall prog_lang="eel">MediaItem extension_api(&quot;BR_GetMouseCursorContext_Item&quot;)</functioncall>
    <functioncall prog_lang="lua">MediaItem = reaper.BR_GetMouseCursorContext_Item()</functioncall>
    <functioncall prog_lang="python">MediaItem BR_GetMouseCursorContext_Item()</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Returns item under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem" retvalname="MediaItem">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMouseCursorContext_MIDI</slug>
    <functioncall prog_lang="cpp">void* BR_GetMouseCursorContext_MIDI(bool* inlineEditorOut, int* noteRowOut, int* ccLaneOut, int* ccLaneValOut, int* ccLaneIdOut)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_GetMouseCursorContext_MIDI&quot;, bool &amp;amp;inlineEditor, int &amp;amp;noteRow, int &amp;amp;ccLane, int &amp;amp;ccLaneVal, int &amp;amp;ccLaneId)</functioncall>
    <functioncall prog_lang="lua">identifier retval, boolean inlineEditor, number noteRow, number ccLane, number ccLaneVal, number ccLaneId = reaper.BR_GetMouseCursorContext_MIDI()</functioncall>
    <functioncall prog_lang="python">(void retval, Boolean inlineEditorOut, Int noteRowOut, Int ccLaneOut, Int ccLaneValOut, Int ccLaneIdOut) = BR_GetMouseCursorContext_MIDI(inlineEditorOut, noteRowOut, ccLaneOut, ccLaneValOut, ccLaneIdOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>[BR] Returns midi editor under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.</p>
<p>inlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL) noteRow: note row or piano key under mouse cursor (0-127) ccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events) ccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383) ccLaneId: lane position, counting from the top (0 based)</p>
<p>Note: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="inlineEditor" retvalname="inlineEditor">

      </retval>
      <retval id="3" datatype="noteRow" retvalname="noteRow">

      </retval>
      <retval id="4" datatype="ccLane" retvalname="ccLane">

      </retval>
      <retval id="5" datatype="ccLaneVal" retvalname="ccLaneVal">

      </retval>
      <retval id="6" datatype="ccLaneId" retvalname="ccLaneId">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMouseCursorContext_Position</slug>
    <functioncall prog_lang="cpp">double BR_GetMouseCursorContext_Position()</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;BR_GetMouseCursorContext_Position&quot;)</functioncall>
    <functioncall prog_lang="lua">number = reaper.BR_GetMouseCursorContext_Position()</functioncall>
    <functioncall prog_lang="python">Float BR_GetMouseCursorContext_Position()</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMouseCursorContext_StretchMarker</slug>
    <functioncall prog_lang="cpp">int BR_GetMouseCursorContext_StretchMarker()</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_GetMouseCursorContext_StretchMarker&quot;)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.BR_GetMouseCursorContext_StretchMarker()</functioncall>
    <functioncall prog_lang="python">Int BR_GetMouseCursorContext_StretchMarker()</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>BR_GetMouseCursorContext_Take</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* BR_GetMouseCursorContext_Take()</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take extension_api(&quot;BR_GetMouseCursorContext_Take&quot;)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take = reaper.BR_GetMouseCursorContext_Take()</functioncall>
    <functioncall prog_lang="python">MediaItem_Take BR_GetMouseCursorContext_Take()</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Returns take under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="MediaItem_Take">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetMouseCursorContext_Track</slug>
    <functioncall prog_lang="cpp">MediaTrack* BR_GetMouseCursorContext_Track()</functioncall>
    <functioncall prog_lang="eel">MediaTrack extension_api(&quot;BR_GetMouseCursorContext_Track&quot;)</functioncall>
    <functioncall prog_lang="lua">MediaTrack = reaper.BR_GetMouseCursorContext_Track()</functioncall>
    <functioncall prog_lang="python">MediaTrack BR_GetMouseCursorContext_Track()</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Returns track under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaTrack" retvalname="MediaTrack">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetNextGridDivision</slug>
    <functioncall prog_lang="cpp">double BR_GetNextGridDivision(double position)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;BR_GetNextGridDivision&quot;, position)</functioncall>
    <functioncall prog_lang="lua">number = reaper.BR_GetNextGridDivision(number position)</functioncall>
    <functioncall prog_lang="python">Float BR_GetNextGridDivision(Float position)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get next grid division after the time position. For more grid divisions function, see <a href="#BR_GetClosestGridDivision">BR_GetClosestGridDivision</a> and <a href="#BR_GetPrevGridDivision">BR_GetPrevGridDivision</a>.</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="position" parmname="position">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetPrevGridDivision</slug>
    <functioncall prog_lang="cpp">double BR_GetPrevGridDivision(double position)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;BR_GetPrevGridDivision&quot;, position)</functioncall>
    <functioncall prog_lang="lua">number = reaper.BR_GetPrevGridDivision(number position)</functioncall>
    <functioncall prog_lang="python">Float BR_GetPrevGridDivision(Float position)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get previous grid division before the time position. For more grid division functions, see <a href="#BR_GetClosestGridDivision">BR_GetClosestGridDivision</a> and <a href="#BR_GetNextGridDivision">BR_GetNextGridDivision</a>.</p>

    </description>
    <chapter_context>
      Project Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="position" parmname="position">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetSetTrackSendInfo</slug>
    <functioncall prog_lang="cpp">double BR_GetSetTrackSendInfo(MediaTrack* track, int category, int sendidx, const char* parmname, bool setNewValue, double newValue)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;BR_GetSetTrackSendInfo&quot;, MediaTrack track, int category, int sendidx, &quot;parmname&quot;, bool setNewValue, newValue)</functioncall>
    <functioncall prog_lang="lua">number = reaper.BR_GetSetTrackSendInfo(MediaTrack track, integer category, integer sendidx, string parmname, boolean setNewValue, number newValue)</functioncall>
    <functioncall prog_lang="python">Float BR_GetSetTrackSendInfo(MediaTrack track, Int category, Int sendidx, String parmname, Boolean setNewValue, Float newValue)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Get or set send attributes.</p>
<p>category is &amp;lt;0 for receives, 0=sends, &amp;gt;0 for hardware outputs sendidx is zero-based (see <a href="#GetTrackNumSends">GetTrackNumSends</a> to count track sends/receives/hardware outputs) To set attribute, pass setNewValue as true</p>
<p>List of possible parameters:</p>
<pre><code>B\_MUTE : send mute state (1.0 if muted, otherwise 0.0)
B\_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)
B\_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)
D\_VOL : send volume (1.0=+0dB etc...)
D\_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)
D\_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)
I\_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)
I\_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&amp;amp;amp;1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)
I\_DSTCHAN : audio destination starting channel index (&amp;amp;amp;1024=mono (and in case of hardware output &amp;amp;amp;512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)
I\_MIDI\_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)
I\_MIDI\_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)
I\_MIDI\_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I\_MIDI\_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I\_MIDI\_LINK\_VOLPAN : link volume/pan controls to MIDI</code></pre>
<p>Note: To get or set other send attributes, see <a href="#BR_GetMediaTrackSendInfo_Envelope">BR_GetMediaTrackSendInfo_Envelope</a> and <a href="#BR_GetMediaTrackSendInfo_Track">BR_GetMediaTrackSendInfo_Track</a>.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="category" parmname="category">

      </parameter>
      <parameter id="3" datatype="sendidx" parmname="sendidx">

      </parameter>
      <parameter id="4" datatype="parmname" parmname="parmname">

      </parameter>
      <parameter id="5" datatype="setNewValue" parmname="setNewValue">

      </parameter>
      <parameter id="6" datatype="newValue" parmname="newValue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_GetTakeFXCount</slug>
    <functioncall prog_lang="cpp">int BR_GetTakeFXCount(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_GetTakeFXCount&quot;, MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.BR_GetTakeFXCount(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">Int BR_GetTakeFXCount(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Returns FX count for supplied take
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_IsMidiOpenInInlineEditor</slug>
    <functioncall prog_lang="cpp">bool BR_IsMidiOpenInInlineEditor(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_IsMidiOpenInInlineEditor&quot;, MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_IsMidiOpenInInlineEditor(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">Boolean BR_IsMidiOpenInInlineEditor(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[SWS] Check if take has MIDI inline editor open and returns true or false.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_IsTakeMidi</slug>
    <functioncall prog_lang="cpp">bool BR_IsTakeMidi(MediaItem_Take* take, bool* inProjectMidiOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_IsTakeMidi&quot;, MediaItem_Take take, bool &amp;amp;inProjectMidi)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean inProjectMidi = reaper.BR_IsTakeMidi(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean inProjectMidiOut) = BR_IsTakeMidi(take, inProjectMidiOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="inProjectMidi" retvalname="inProjectMidi">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_ItemAtMouseCursor</slug>
    <functioncall prog_lang="cpp">MediaItem* BR_ItemAtMouseCursor(double* positionOut)</functioncall>
    <functioncall prog_lang="eel">MediaItem extension_api(&quot;BR_ItemAtMouseCursor&quot;, &amp;amp;position)</functioncall>
    <functioncall prog_lang="lua">MediaItem retval, number position = reaper.BR_ItemAtMouseCursor()</functioncall>
    <functioncall prog_lang="python">(MediaItem retval, Float positionOut) = BR_ItemAtMouseCursor(positionOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="position" retvalname="position">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_MIDI_CCLaneRemove</slug>
    <functioncall prog_lang="cpp">bool BR_MIDI_CCLaneRemove(vpid* midiEditor, int laneId)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_MIDI_CCLaneRemove&quot;, void* midiEditor, int laneId)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_MIDI_CCLaneRemove(identifier midiEditor, integer laneId)</functioncall>
    <functioncall prog_lang="python">Boolean BR_MIDI_CCLaneRemove(void midiEditor, Int laneId)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midiEditor" parmname="midiEditor">

      </parameter>
      <parameter id="2" datatype="laneId" parmname="laneId">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_MIDI_CCLaneReplace</slug>
    <functioncall prog_lang="cpp">bool BR_MIDI_CCLaneReplace(void* midiEditor, int laneId, int newCC)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_MIDI_CCLaneReplace&quot;, void* midiEditor, int laneId, int newCC)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_MIDI_CCLaneReplace(identifier midiEditor, integer laneId, integer newCC)</functioncall>
    <functioncall prog_lang="python">Boolean BR_MIDI_CCLaneReplace(void midiEditor, Int laneId, Int newCC)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.<br/>
Valid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midiEditor" parmname="midiEditor">

      </parameter>
      <parameter id="2" datatype="laneId" parmname="laneId">

      </parameter>
      <parameter id="3" datatype="newCC" parmname="newCC">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_PositionAtMouseCursor</slug>
    <functioncall prog_lang="cpp">double BR_PositionAtMouseCursor(bool checkRuler)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;BR_PositionAtMouseCursor&quot;, bool checkRuler)</functioncall>
    <functioncall prog_lang="lua">number = reaper.BR_PositionAtMouseCursor(boolean checkRuler)</functioncall>
    <functioncall prog_lang="python">Float BR_PositionAtMouseCursor(Boolean checkRuler)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="checkRuler" parmname="checkRuler">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_SetArrangeView</slug>
    <functioncall prog_lang="cpp">void BR_SetArrangeView(ReaProject* proj, double startTime, double endTime)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_SetArrangeView&quot;, ReaProject proj, startTime, endTime)</functioncall>
    <functioncall prog_lang="lua">reaper.BR_SetArrangeView(ReaProject proj, number startTime, number endTime)</functioncall>
    <functioncall prog_lang="python">BR_SetArrangeView(ReaProject proj, Float startTime, Float endTime)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Deprecated, see <a href="#GetSet_ArrangeView2">GetSet_ArrangeView2</a> (REAPER v5.12pre4+) – Set start and end time position of arrange view. To get arrange view instead, see <a href="#BR_GetArrangeView">BR_GetArrangeView</a>.</p>

    </description>
    <chapter_context>
      Arrangeview Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="startTime" parmname="startTime">
<p>the new starttime of the arrangewview in seconds</p>

      </parameter>
      <parameter id="3" datatype="endTime" parmname="endTime">
<p>the new endtime of the arrangewview in seconds</p>

      </parameter>
    </parameters>
    <tags>
     arrangeviewmanagement
     set
     starttime
     endtime
     arrangeview
     seconds
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_SetItemEdges</slug>
    <functioncall prog_lang="cpp">bool BR_SetItemEdges(MediaItem* item, double startTime, double endTime)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_SetItemEdges&quot;, MediaItem item, startTime, endTime)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_SetItemEdges(MediaItem item, number startTime, number endTime)</functioncall>
    <functioncall prog_lang="python">Boolean BR_SetItemEdges(MediaItem item, Float startTime, Float endTime)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Set item start and end edges' position - returns true in case of any changes
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="startTime" parmname="startTime">

      </parameter>
      <parameter id="3" datatype="endTime" parmname="endTime">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_SetMediaItemImageResource</slug>
    <functioncall prog_lang="cpp">void BR_SetMediaItemImageResource(MediaItem* item, const char* imageIn, int imageFlags)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_SetMediaItemImageResource&quot;, MediaItem item, &quot;imageIn&quot;, int imageFlags)</functioncall>
    <functioncall prog_lang="lua">reaper.BR_SetMediaItemImageResource(MediaItem item, string imageIn, integer imageFlags)</functioncall>
    <functioncall prog_lang="python">BR_SetMediaItemImageResource(MediaItem item, String imageIn, Int imageFlags)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Set image resource and it’s flags for a given item. To clear current image resource, pass imageIn as . To get image resource, see <a href="#BR_GetMediaItemImageResource">BR_GetMediaItemImageResource</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="imageIn" parmname="imageIn">

      </parameter>
      <parameter id="3" datatype="imageFlags" parmname="imageFlags">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_SetMediaSourceProperties</slug>
    <functioncall prog_lang="cpp">bool BR_SetMediaSourceProperties(MediaItem_Take* take, bool section, double start, double length, double fade, bool reverse)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_SetMediaSourceProperties&quot;, MediaItem_Take take, bool section, start, length, fade, bool reverse)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_SetMediaSourceProperties(MediaItem_Take take, boolean section, number start, number length, number fade, boolean reverse)</functioncall>
    <functioncall prog_lang="python">Boolean BR_SetMediaSourceProperties(MediaItem_Take take, Boolean section, Float start, Float length, Float fade, Boolean reverse)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Set take media source properties. Returns false if take can’t have them (MIDI items etc.). Section parameters have to be valid only when passing section=true. To get source properties, see <a href="#BR_GetMediaSourceProperties">BR_GetMediaSourceProperties</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="section" parmname="section">

      </parameter>
      <parameter id="3" datatype="start" parmname="start">

      </parameter>
      <parameter id="4" datatype="length" parmname="length">

      </parameter>
      <parameter id="5" datatype="fade" parmname="fade">

      </parameter>
      <parameter id="6" datatype="reverse" parmname="reverse">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_SetMediaTrackLayouts</slug>
    <functioncall prog_lang="cpp">bool BR_SetMediaTrackLayouts(MediaTrack* track, const char* mcpLayoutNameIn, const char* tcpLayoutNameIn)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_SetMediaTrackLayouts&quot;, MediaTrack track, &quot;mcpLayoutNameIn&quot;, &quot;tcpLayoutNameIn&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_SetMediaTrackLayouts(MediaTrack track, string mcpLayoutNameIn, string tcpLayoutNameIn)</functioncall>
    <functioncall prog_lang="python">Boolean BR_SetMediaTrackLayouts(MediaTrack track, String mcpLayoutNameIn, String tcpLayoutNameIn)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Deprecated, see <a href="#GetSetMediaTrackInfo">GetSetMediaTrackInfo</a> (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string ("") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made). To get media track layouts, see <a href="#BR_GetMediaTrackLayouts">BR_GetMediaTrackLayouts</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="mcpLayoutNameIn" parmname="mcpLayoutNameIn">

      </parameter>
      <parameter id="3" datatype="tcpLayoutNameIn" parmname="tcpLayoutNameIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_SetMidiTakeTempoInfo</slug>
    <functioncall prog_lang="cpp">bool BR_SetMidiTakeTempoInfo(MediaItem_Take* take, bool ignoreProjTempo, double bpm, int num, int den)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_SetMidiTakeTempoInfo&quot;, MediaItem_Take take, bool ignoreProjTempo, bpm, int num, int den)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_SetMidiTakeTempoInfo(MediaItem_Take take, boolean ignoreProjTempo, number bpm, integer num, integer den)</functioncall>
    <functioncall prog_lang="python">Boolean BR_SetMidiTakeTempoInfo(MediaItem_Take take, Boolean ignoreProjTempo, Float bpm, Int num, Int den)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Set &quot;ignore project tempo&quot; information for MIDI take. Returns true in case the take was successfully updated.
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="ignoreProjTempo" parmname="ignoreProjTempo">

      </parameter>
      <parameter id="3" datatype="bpm" parmname="bpm">

      </parameter>
      <parameter id="4" datatype="num" parmname="num">

      </parameter>
      <parameter id="5" datatype="den" parmname="den">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_SetTakeSourceFromFile</slug>
    <functioncall prog_lang="cpp">bool BR_SetTakeSourceFromFile(MediaItem_Take* take, const char* filenameIn, bool inProjectData)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_SetTakeSourceFromFile&quot;, MediaItem_Take take, &quot;filenameIn&quot;, bool inProjectData)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_SetTakeSourceFromFile(MediaItem_Take take, string filenameIn, boolean inProjectData)</functioncall>
    <functioncall prog_lang="python">Boolean BR_SetTakeSourceFromFile(MediaItem_Take take, String filenameIn, Boolean inProjectData)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed. Any take source properties from the previous source will be lost - to preserve them, see <a href="#BR_SetTakeSourceFromFile2">BR_SetTakeSourceFromFile2</a>. Note: To set source from existing take, see <a href="#SNM_GetSetSourceState2">SNM_GetSetSourceState2</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="filenameIn" parmname="filenameIn">

      </parameter>
      <parameter id="3" datatype="inProjectData" parmname="inProjectData">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_SetTakeSourceFromFile2</slug>
    <functioncall prog_lang="cpp">bool BR_SetTakeSourceFromFile2(MediaItem_Take* take, const char* filenameIn, bool inProjectData, bool keepSourceProperties)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_SetTakeSourceFromFile2&quot;, MediaItem_Take take, &quot;filenameIn&quot;, bool inProjectData, bool keepSourceProperties)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_SetTakeSourceFromFile2(MediaItem_Take take, string filenameIn, boolean inProjectData, boolean keepSourceProperties)</functioncall>
    <functioncall prog_lang="python">Boolean BR_SetTakeSourceFromFile2(MediaItem_Take take, String filenameIn, Boolean inProjectData, Boolean keepSourceProperties)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Differs from <a href="#BR_SetTakeSourceFromFile">BR_SetTakeSourceFromFile</a> only that it can also preserve existing take media source properties.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="filenameIn" parmname="filenameIn">

      </parameter>
      <parameter id="3" datatype="inProjectData" parmname="inProjectData">

      </parameter>
      <parameter id="4" datatype="keepSourceProperties" parmname="keepSourceProperties">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_TakeAtMouseCursor</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* BR_TakeAtMouseCursor(double* positionOut)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take extension_api(&quot;BR_TakeAtMouseCursor&quot;, &amp;amp;position)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take retval, number position = reaper.BR_TakeAtMouseCursor()</functioncall>
    <functioncall prog_lang="python">(MediaItem_Take retval, Float positionOut) = BR_TakeAtMouseCursor(positionOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="position" retvalname="position">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_TrackAtMouseCursor</slug>
    <functioncall prog_lang="cpp">MediaTrack* BR_TrackAtMouseCursor(int* contextOut, double* positionOut)</functioncall>
    <functioncall prog_lang="eel">MediaTrack extension_api(&quot;BR_TrackAtMouseCursor&quot;, int &amp;amp;context, &amp;amp;position)</functioncall>
    <functioncall prog_lang="lua">MediaTrack retval, number context, number position = reaper.BR_TrackAtMouseCursor()</functioncall>
    <functioncall prog_lang="python">(MediaTrack retval, Int contextOut, Float positionOut) = BR_TrackAtMouseCursor(contextOut, positionOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Get track under mouse cursor.<br/>
Context signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.<br/>
Position will hold mouse cursor position in arrange if applicable.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="context" retvalname="context">

      </retval>
      <retval id="3" datatype="position" retvalname="position">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_TrackFX_GetFXModuleName</slug>
    <functioncall prog_lang="cpp">bool BR_TrackFX_GetFXModuleName(MediaTrack* track, int fx, char* nameOut, int nameOutSz)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_TrackFX_GetFXModuleName&quot;, MediaTrack track, int fx, # name, int name)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string name = reaper.BR_TrackFX_GetFXModuleName(MediaTrack track, integer fx)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaTrack track, Int fx, String nameOut, Int nameOutSz) = BR_TrackFX_GetFXModuleName(track, fx, nameOut, nameOutSz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="name" retvalname="name">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">

      </parameter>
      <parameter id="2" datatype="fx" parmname="fx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetPrivateProfileString</slug>
    <functioncall prog_lang="cpp">int BR_Win32_GetPrivateProfileString(const char* sectionName, const char* keyName, const char* defaultString, const char* filePath, char* stringOut, int stringOut_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_GetPrivateProfileString&quot;, &quot;sectionName&quot;, &quot;keyName&quot;, &quot;defaultString&quot;, &quot;filePath&quot;, #string)</functioncall>
    <functioncall prog_lang="lua">integer retval, string string = reaper.BR_Win32_GetPrivateProfileString(string sectionName, string keyName, string defaultString, string filePath)</functioncall>
    <functioncall prog_lang="python">(Int retval, String sectionName, String keyName, String defaultString, String filePath, String stringOut, Int stringOut_sz) = BR_Win32_GetPrivateProfileString(sectionName, keyName, defaultString, filePath, stringOut, stringOut_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini</p>
<p>If you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper. If you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper. You can get the paths using <a href="#GetExePath">GetExePath</a> for the Reaper-application-folder, <a href="#GetResourcePath">GetResourcePath</a> for the ressources-folder or get_ini_file for the path+filename of the Reaper.ini-file.</p>

    </description>
    <chapter_context>
      File Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">
number of characters of the value
      </retval>
      <retval id="2" datatype="string" retvalname="string">
the value of that key
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="sectionName" parmname="sectionName">
the [section] in which the key is stored, you'd like to get
      </parameter>
      <parameter id="2" datatype="keyName" parmname="keyName">
the key from the [section], whose value you'd like to get
      </parameter>
      <parameter id="3" datatype="defaultString" parmname="defaultString">
a default value that will be returned, if the [section] and/or key does not exist in the ini-file yet.
      </parameter>
      <parameter id="4" datatype="filePath" parmname="filePath">
the path+filename, where the [section] and key are stored
      </parameter>
    </parameters>
    <tags>
     filemanagement
     ini
     get
     value
     section
     key
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_ShellExecute</slug>
    <functioncall prog_lang="cpp">int BR_Win32_ShellExecute(const char* operation, const char* file, const char* parameters, const char* directory, int showFlags)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_ShellExecute&quot;, &quot;operation&quot;, &quot;file&quot;, &quot;parameters&quot;, &quot;directory&quot;, int showFlags)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.BR_Win32_ShellExecute(string operation, string file, string parameters, string directory, integer showFlags)</functioncall>
    <functioncall prog_lang="python">Int BR_Win32_ShellExecute(String operation, String file, String parameters, String directory, Int showFlags)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API ShellExecute() with HWND set to main window
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="operation" parmname="operation">

      </parameter>
      <parameter id="2" datatype="file" parmname="file">

      </parameter>
      <parameter id="3" datatype="parameters" parmname="parameters">

      </parameter>
      <parameter id="4" datatype="directory" parmname="directory">

      </parameter>
      <parameter id="5" datatype="showFlags" parmname="showFlags">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_WritePrivateProfileString</slug>
    <functioncall prog_lang="cpp">bool BR_Win32_WritePrivateProfileString(const char* sectionName, const char* keyName, const char* value, const char* filePath)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_Win32_WritePrivateProfileString&quot;, &quot;sectionName&quot;, &quot;keyName&quot;, &quot;value&quot;, &quot;filePath&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.BR_Win32_WritePrivateProfileString(string sectionName, string keyName, string value, string filePath)</functioncall>
    <functioncall prog_lang="python">Boolean BR_Win32_WritePrivateProfileString(String sectionName, String keyName, String value, String filePath)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini</p>
<p>If you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper. If you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper. You can get the paths using <a href="#GetExePath">GetExePath</a> for the Reaper-application-folder, <a href="#GetResourcePath">GetResourcePath</a> for the ressources-folder or <a href="#get_ini_file">get_ini_file</a> for the path+filename of the Reaper.ini-file.</p>

    </description>
    <chapter_context>
      File Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if it worked
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="sectionName" parmname="sectionName">
the [section] in which the key is stored, you'd like to set
      </parameter>
      <parameter id="2" datatype="keyName" parmname="keyName">
the key from the [section], whose value you'd like to set
      </parameter>
      <parameter id="3" datatype="value" parmname="value">
the value you want to have set to the key
      </parameter>
      <parameter id="4" datatype="filePath" parmname="filePath">
the path+filename, where the [section] and key are going to be stored
      </parameter>
    </parameters>
    <tags>
     filemanagement
     ini
     write
     value
     section
     key
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetClipboard</slug>
    <functioncall prog_lang="cpp">void CF_GetClipboard(char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;CF_GetClipboard&quot;, #buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.CF_GetClipboard(string buf)</functioncall>
    <functioncall prog_lang="python">(String buf, Int buf_sz) = CF_GetClipboard(buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
Read the contents of the system clipboard (limited to 1023 characters in Lua).
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="buf" retvalname="buf">
the content of the clipboard
      </retval>
    </retvals>
    <tags>
     helperfunctions
     clipboard
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetClipboardBig</slug>
    <functioncall prog_lang="cpp">const char* CF_GetClipboardBig(WDL_FastString* output)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;CF_GetClipboardBig&quot;, #retval, WDL_FastString output)</functioncall>
    <functioncall prog_lang="lua">string = reaper.CF_GetClipboardBig(WDL_FastString output)</functioncall>
    <functioncall prog_lang="python">String CF_GetClipboardBig(WDL_FastString output)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>Read the contents of the system clipboard. See <a href="#SNM_CreateFastString">SNM_CreateFastString</a> and <a href="#SNM_DeleteFastString">SNM_DeleteFastString</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the content of the clipboard
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="output" parmname="output">
a faststring used by this 
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     clipboard
     get
     faststring
     big
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_SetClipboard</slug>
    <functioncall prog_lang="cpp">void CF_SetClipboard(const char* str)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;CF_SetClipboard&quot;, &quot;str&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.CF_SetClipboard(string str)</functioncall>
    <functioncall prog_lang="python">CF_SetClipboard(String str)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
Write the given string into the system clipboard.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">
the string to put into the clipboard
      </parameter>
    </parameters>
    <tags>
     helperfunctions
     clipboard
     put
     set
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>FNG_AddMidiNote</slug>
    <functioncall prog_lang="cpp">RprMidiNote* FNG_AddMidiNote(RprMidiTake* midiTake)</functioncall>
    <functioncall prog_lang="eel">RprMidiNote extension_api(&quot;FNG_AddMidiNote&quot;, RprMidiTake midiTake)</functioncall>
    <functioncall prog_lang="lua">RprMidiNote = reaper.FNG_AddMidiNote(RprMidiTake midiTake)</functioncall>
    <functioncall prog_lang="python">RprMidiNote FNG_AddMidiNote(RprMidiTake midiTake)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[FNG]Add MIDI note to MIDI take
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="RprMidiNote" retvalname="RprMidiNote">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midiTake" parmname="midiTake">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>FNG_AllocMidiTake</slug>
    <functioncall prog_lang="cpp">RprMidiTake* FNG_AllocMidiTake(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">RprMidiTake extension_api(&quot;FNG_AllocMidiTake&quot;, MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">RprMidiTake = reaper.FNG_AllocMidiTake(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">RprMidiTake FNG_AllocMidiTake(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[FNG]Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="RprMidiTake" retvalname="RprMidiTake">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>FNG_CountMidiNotes</slug>
    <functioncall prog_lang="cpp">int FNG_CountMidiNotes(RprMidiTake* midiTake)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;FNG_CountMidiNotes&quot;, RprMidiTake midiTake)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.FNG_CountMidiNotes(RprMidiTake midiTake)</functioncall>
    <functioncall prog_lang="python">Int FNG_CountMidiNotes(RprMidiTake midiTake)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[FNG]Count of how many MIDI notes are in the MIDI take
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midiTake" parmname="midiTake">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>FNG_FreeMidiTake</slug>
    <functioncall prog_lang="cpp">void FNG_FreeMidiTake(RprMidiTake* midiTake)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;FNG_FreeMidiTake&quot;, RprMidiTake midiTake)</functioncall>
    <functioncall prog_lang="lua">reaper.FNG_FreeMidiTake(RprMidiTake midiTake)</functioncall>
    <functioncall prog_lang="python">FNG_FreeMidiTake(RprMidiTake midiTake)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[FNG]Commit changes to MIDI take and free allocated memory
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="midiTake" parmname="midiTake">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>FNG_GetMidiNote</slug>
    <functioncall prog_lang="cpp">RprMidiNote* FNG_GetMidiNote(RprMidiTake* midiTake, int index)</functioncall>
    <functioncall prog_lang="eel">RprMidiNote extension_api(&quot;FNG_GetMidiNote&quot;, RprMidiTake midiTake, int index)</functioncall>
    <functioncall prog_lang="lua">RprMidiNote = reaper.FNG_GetMidiNote(RprMidiTake midiTake, integer index)</functioncall>
    <functioncall prog_lang="python">RprMidiNote FNG_GetMidiNote(RprMidiTake midiTake, Int index)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[FNG]Get a MIDI note from a MIDI take at specified index
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="RprMidiNote" retvalname="RprMidiNote">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midiTake" parmname="midiTake">

      </parameter>
      <parameter id="2" datatype="index" parmname="index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>FNG_GetMidiNoteIntProperty</slug>
    <functioncall prog_lang="cpp">int FNG_GetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;FNG_GetMidiNoteIntProperty&quot;, RprMidiNote midiNote, &quot;property&quot;)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, string property)</functioncall>
    <functioncall prog_lang="python">Int FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, String property)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[FNG]Get MIDI note property
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="midiNote" parmname="midiNote">

      </parameter>
      <parameter id="2" datatype="property" parmname="property">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>FNG_SetMidiNoteIntProperty</slug>
    <functioncall prog_lang="cpp">void FNG_SetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property, int value)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;FNG_SetMidiNoteIntProperty&quot;, RprMidiNote midiNote, &quot;property&quot;, int value)</functioncall>
    <functioncall prog_lang="lua">reaper.FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, string property, integer value)</functioncall>
    <functioncall prog_lang="python">FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, String property, Int value)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[FNG]Set MIDI note property
    </description>
    <chapter_context>
      MIDI Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="midiNote" parmname="midiNote">

      </parameter>
      <parameter id="2" datatype="property" parmname="property">

      </parameter>
      <parameter id="3" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_AnalyzeTakeLoudness</slug>
    <functioncall prog_lang="cpp">bool NF_AnalyzeTakeLoudness(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;NF_AnalyzeTakeLoudness&quot;, MediaItem_Take take, bool analyzeTruePeak, &amp;amp;lufsIntegrated, &amp;amp;range, &amp;amp; truePeak, &amp;amp;truePeakPos, &amp;amp;shortTermMax, &amp;amp;momentaryMax)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax = reaper.NF_AnalyzeTakeLoudness(MediaItem_Take take, boolean analyzeTruePeak)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut) = NF_AnalyzeTakeLoudness(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="lufsIntegrated" retvalname="lufsIntegrated">

      </retval>
      <retval id="3" datatype="range" retvalname="range">

      </retval>
      <retval id="4" datatype="truePeak" retvalname="truePeak">

      </retval>
      <retval id="5" datatype="truePeakPos" retvalname="truePeakPos">

      </retval>
      <retval id="6" datatype="shortTermMax" retvalname="shortTermMax">

      </retval>
      <retval id="7" datatype="momentaryMax" retvalname="momentaryMax">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="analyzeTruePeak" parmname="analyzeTruePeak">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_AnalyzeTakeLoudness2</slug>
    <functioncall prog_lang="cpp">bool NF_AnalyzeTakeLoudness2(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut, double* shortTermMaxPosOut, double* momentaryMaxPosOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;NF_AnalyzeTakeLoudness2&quot;, MediaItem_Take take, bool analyzeTruePeak, &amp;amp;lufsIntegrated, &amp;amp;range, &amp;amp; truePeak, &amp;amp;truePeakPos, &amp;amp;shortTermMax, &amp;amp;momentaryMax, &amp;amp;shortTermMaxPos, &amp;amp;momentaryMaxPos)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax, number shortTermMaxPos, number momentaryMaxPos = reaper.NF_AnalyzeTakeLoudness2(MediaItem_Take take, boolean analyzeTruePeak)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut, Float shortTermMaxPosOut, Float momentaryMaxPosOut) = NF_AnalyzeTakeLoudness2(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut, shortTermMaxPosOut, momentaryMaxPosOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>Same as <a href="#NF_AnalyzeTakeLoudness">NF_AnalyzeTakeLoudness</a> but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos actually indicate the beginning of time <em>intervalls</em>, (3 sec. and 0.4 sec. resp.).</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="lufsIntegrated" retvalname="lufsIntegrated">

      </retval>
      <retval id="3" datatype="range" retvalname="range">

      </retval>
      <retval id="4" datatype="truePeak" retvalname="truePeak">

      </retval>
      <retval id="5" datatype="truePeakPos" retvalname="truePeakPos">

      </retval>
      <retval id="6" datatype="shortTermMax" retvalname="shortTermMax">

      </retval>
      <retval id="7" datatype="momentaryMax" retvalname="momentaryMax">

      </retval>
      <retval id="8" datatype="shortTermMaxPos" retvalname="shortTermMaxPos">

      </retval>
      <retval id="9" datatype="momentaryMaxPos" retvalname="momentaryMaxPos">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="analyzeTruePeak" parmname="analyzeTruePeak">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_AnalyzeTakeLoudness_IntegratedOnly</slug>
    <functioncall prog_lang="cpp">bool NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take* take, double* lufsIntegratedOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;NF_AnalyzeTakeLoudness_IntegratedOnly&quot;, MediaItem_Take take, &amp;amp;lufsIntegrated)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number lufsIntegrated = reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, MediaItem_Take take, Float lufsIntegratedOut) = NF_AnalyzeTakeLoudness_IntegratedOnly(take, lufsIntegratedOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>Does LUFS integrated analysis only. Faster than full loudness analysis (<a href="#NF_AnalyzeTakeLoudness">NF_AnalyzeTakeLoudness</a>) . Use this if only LUFS integrated is required. Take vol. env. is taken into account.</p>
<p>See: <a href="http://wiki.cockos.com/wiki/index.php/Measure_and_normalize_loudness_with_SWS">Signal flow</a>.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="lufsIntegrated" retvalname="lufsIntegrated">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_GetMediaItemAverageRMS</slug>
    <functioncall prog_lang="cpp">double NF_GetMediaItemAverageRMS(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;NF_GetMediaItemAverageRMS&quot;, MediaItem item)</functioncall>
    <functioncall prog_lang="lua">number = reaper.NF_GetMediaItemAverageRMS(MediaItem item)</functioncall>
    <functioncall prog_lang="python">Float NF_GetMediaItemAverageRMS(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
Returns the average overall (non-windowed) RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. <br/>
Returns -150.0 if MIDI take or empty item.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_GetMediaItemMaxPeak</slug>
    <functioncall prog_lang="cpp">double NF_GetMediaItemMaxPeak(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;NF_GetMediaItemMaxPeak&quot;, MediaItem item)</functioncall>
    <functioncall prog_lang="lua">number = reaper.NF_GetMediaItemMaxPeak(MediaItem item)</functioncall>
    <functioncall prog_lang="python">Float NF_GetMediaItemMaxPeak(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
Returns the greatest max. peak value of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. <br/>
Returns -150.0 if MIDI take or empty item.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_GetMediaItemPeakRMS_NonWindowed</slug>
    <functioncall prog_lang="cpp">double NF_GetMediaItemPeakRMS_NonWindowed(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;NF_GetMediaItemPeakRMS_NonWindowed&quot;, MediaItem item)</functioncall>
    <functioncall prog_lang="lua">number = reaper.NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)</functioncall>
    <functioncall prog_lang="python">Float NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
Returns the greatest overall (non-windowed) RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. <br/>
Returns -150.0 if MIDI take or empty item.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_GetMediaItemPeakRMS_Windowed</slug>
    <functioncall prog_lang="cpp">double NF_GetMediaItemPeakRMS_Windowed(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;NF_GetMediaItemPeakRMS_Windowed&quot;, MediaItem item)</functioncall>
    <functioncall prog_lang="lua">number = reaper.NF_GetMediaItemPeakRMS_Windowed(MediaItem item)</functioncall>
    <functioncall prog_lang="python">Float NF_GetMediaItemPeakRMS_Windowed(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
Returns the average RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. <br/>
Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_AddReceive</slug>
    <functioncall prog_lang="cpp">bool SNM_AddReceive(MediaTrack* src, MediaTrack* dest, int type)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_AddReceive&quot;, MediaTrack src, MediaTrack dest, int type)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_AddReceive(MediaTrack src, MediaTrack dest, integer type)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_AddReceive(MediaTrack src, MediaTrack dest, Int type)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[S&amp;amp;M] Deprecated, see <a href="#CreateTrackSend">CreateTrackSend</a> (v5.15pre1+). Adds a receive. Returns false if nothing updated. type -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX). Note: obeys default sends preferences, supports frozen tracks, etc..</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
      <parameter id="2" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="3" datatype="type" parmname="type">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_AddTCPFXParm</slug>
    <functioncall prog_lang="cpp">bool SNM_AddTCPFXParm(MediaTrack* tr, int fxId, int prmId)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_AddTCPFXParm&quot;, MediaTrack tr, int fxId, int prmId)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_AddTCPFXParm(MediaTrack tr, integer fxId, integer prmId)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_AddTCPFXParm(MediaTrack tr, Int fxId, Int prmId)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="fxId" parmname="fxId">

      </parameter>
      <parameter id="3" datatype="prmId" parmname="prmId">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_CreateFastString</slug>
    <functioncall prog_lang="cpp">WDL_FastString* SNM_CreateFastString(const char* str)</functioncall>
    <functioncall prog_lang="eel">WDL_FastString extension_api(&quot;SNM_CreateFastString&quot;, &quot;str&quot;)</functioncall>
    <functioncall prog_lang="lua">WDL_FastString = reaper.SNM_CreateFastString(string str)</functioncall>
    <functioncall prog_lang="python">WDL_FastString SNM_CreateFastString(String str)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[S&amp;amp;M] Instantiates a new “fast string”. You must delete this string, see <a href="#SNM_DeleteFastString">SNM_DeleteFastString</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="WDL_FastString" retvalname="WDL_FastString">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_DeleteFastString</slug>
    <functioncall prog_lang="cpp">void SNM_DeleteFastString(WDL_FastString* str)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;SNM_DeleteFastString&quot;, WDL_FastString str)</functioncall>
    <functioncall prog_lang="lua">reaper.SNM_DeleteFastString(WDL_FastString str)</functioncall>
    <functioncall prog_lang="python">SNM_DeleteFastString(WDL_FastString str)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Deletes a &quot;fast string&quot; instance.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetDoubleConfigVar</slug>
    <functioncall prog_lang="cpp">double SNM_GetDoubleConfigVar(const char* varname, double errvalue)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;SNM_GetDoubleConfigVar&quot;, &quot;varname&quot;, errvalue)</functioncall>
    <functioncall prog_lang="lua">number = reaper.SNM_GetDoubleConfigVar(string varname, number errvalue)</functioncall>
    <functioncall prog_lang="python">Float SNM_GetDoubleConfigVar(String varname, Float errvalue)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Returns a double preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).<br/>
<br/>
The settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.<br/>
Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.            
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="number">
the returned number/doublefloat-value of varname
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="varname">
<p>the name of the config-variable to be read; not case sensitive see <a href="Reaper_Config_Variables.html">Reaper Config Variables</a> for valid config-vars</p>

      </parameter>
      <parameter id="2" datatype="number" parmname="errvalue">
<p>the errorvalue that will be returned, if varname isn’t a valid one</p>

      </parameter>
    </parameters>
    <tags>
     reaper
     project
     config
     preferences
     variables
     get
     internal
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetFastString</slug>
    <functioncall prog_lang="cpp">const char* SNM_GetFastString(WDL_FastString* str)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_GetFastString&quot;, #retval, WDL_FastString str)</functioncall>
    <functioncall prog_lang="lua">string = reaper.SNM_GetFastString(WDL_FastString str)</functioncall>
    <functioncall prog_lang="python">String SNM_GetFastString(WDL_FastString str)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Gets the &quot;fast string&quot; content.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetFastStringLength</slug>
    <functioncall prog_lang="cpp">int SNM_GetFastStringLength(WDL_FastString* str)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;SNM_GetFastStringLength&quot;, WDL_FastString str)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.SNM_GetFastStringLength(WDL_FastString str)</functioncall>
    <functioncall prog_lang="python">Int SNM_GetFastStringLength(WDL_FastString str)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Gets the &quot;fast string&quot; length.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetIntConfigVar</slug>
    <functioncall prog_lang="cpp">int SNM_GetIntConfigVar(const char* varname, int errvalue)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;SNM_GetIntConfigVar&quot;, &quot;varname&quot;, int errvalue)</functioncall>
    <functioncall prog_lang="lua">integer retval = reaper.SNM_GetIntConfigVar(string varname, integer errvalue)</functioncall>
    <functioncall prog_lang="python">Int SNM_GetIntConfigVar(String varname, Int errvalue)</functioncall>
    <requires>
      Reaper=5.80
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).<br/>
<br/>
The settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.<br/>
Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
the returned integer-value of varname
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="varname">
<p>the name of the config-variable to be read; not case sensitive see <a href="Reaper_Config_Variables.html">Reaper_Config_Variables.html</a> for valid config-vars</p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="errvalue">
<p>the errorvalue that will be returned, if varname isn’t a valid one</p>

      </parameter>
    </parameters>
    <tags>
     reaper
     project
     config
     preferences
     variables
     get
     internal
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetMediaItemTakeByGUID</slug>
    <functioncall prog_lang="cpp">MediaItem_Take* SNM_GetMediaItemTakeByGUID(ReaProject* project, const char* guid)</functioncall>
    <functioncall prog_lang="eel">MediaItem_Take extension_api(&quot;SNM_GetMediaItemTakeByGUID&quot;, ReaProject project, &quot;guid&quot;)</functioncall>
    <functioncall prog_lang="lua">MediaItem_Take = reaper.SNM_GetMediaItemTakeByGUID(ReaProject project, string guid)</functioncall>
    <functioncall prog_lang="python">MediaItem_Take SNM_GetMediaItemTakeByGUID(ReaProject project, String guid)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[S&amp;amp;M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see <a href="#BR_GetMediaItemTakeGUID">BR_GetMediaItemTakeGUID</a></p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MediaItem_Take" retvalname="MediaItem_Take">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="project" parmname="project">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="guid" parmname="guid">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetProjectMarkerName</slug>
    <functioncall prog_lang="cpp">bool SNM_GetProjectMarkerName(ReaProject* proj, int num, bool isrgn, WDL_FastString* name)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_GetProjectMarkerName&quot;, ReaProject proj, int num, bool isrgn, WDL_FastString name)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_GetProjectMarkerName(ReaProject proj, integer num, boolean isrgn, WDL_FastString name)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_GetProjectMarkerName(ReaProject proj, Int num, Boolean isrgn, WDL_FastString name)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Gets a marker/region name. Returns true if marker/region found.
    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ReaProject" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="num">


      </parameter>
      <parameter id="3" datatype="boolean" parmname="isrgn">


      </parameter>
      <parameter id="4" datatype="WDL_FastString" parmname="name">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetSetObjectState</slug>
    <functioncall prog_lang="cpp">bool SNM_GetSetObjectState(void* obj, WDL_FastString* state, bool setnewvalue, bool wantminimalstate)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_GetSetObjectState&quot;, void* obj, WDL_FastString state, bool setnewvalue, bool wantminimalstate)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_GetSetObjectState(identifier obj, WDL_FastString state, boolean setnewvalue, boolean wantminimalstate)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_GetSetObjectState(void obj, WDL_FastString state, Boolean setnewvalue, Boolean wantminimalstate)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.<br/>
When getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!<br/>
Note: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="obj" parmname="obj">

      </parameter>
      <parameter id="2" datatype="WDL_FastString" parmname="state">

      </parameter>
      <parameter id="3" datatype="setnewvalue" parmname="setnewvalue">

      </parameter>
      <parameter id="4" datatype="wantminimalstate" parmname="wantminimalstate">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetSetSourceState</slug>
    <functioncall prog_lang="cpp">bool SNM_GetSetSourceState(MediaItem* item, int takeidx, WDL_FastString* state, bool setnewvalue)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_GetSetSourceState&quot;, MediaItem item, int takeidx, WDL_FastString state, bool setnewvalue)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_GetSetSourceState(MediaItem item, integer takeidxWDL_FastString state, boolean setnewvalue)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_GetSetSourceState(MediaItem item, Int takeidx, WDL_FastString state, Boolean setnewvalue)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[S&amp;amp;M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take. Note: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see <a href="#SNM_GetSetSourceState2">SNM_GetSetSourceState2</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">

      </parameter>
      <parameter id="2" datatype="takeidx" parmname="takeidx">

      </parameter>
      <parameter id="3" datatype="WDL_FastString" parmname="state">

      </parameter>
      <parameter id="4" datatype="setnewvalue" parmname="setnewvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetSetSourceState2</slug>
    <functioncall prog_lang="cpp">bool SNM_GetSetSourceState2(MediaItem_Take* take, WDL_FastString* state, bool setnewvalue)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_GetSetSourceState2&quot;, MediaItem_Take take, WDL_FastString state, bool setnewvalue)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_GetSetSourceState2(MediaItem_Take takeWDL_FastString state, boolean setnewvalue)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_GetSetSourceState2(MediaItem_Take take, WDL_FastString state, Boolean setnewvalue)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[S&amp;amp;M] Gets or sets a take source state. Returns false if failed. Note: this function cannot deal with empty takes, see <a href="#SNM_GetSetSourceState">SNM_GetSetSourceState</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="take" parmname="take">

      </parameter>
      <parameter id="2" datatype="WDL_FastString" parmname="state">

      </parameter>
      <parameter id="3" datatype="setnewvalue" parmname="setnewvalue">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_GetSourceType</slug>
    <functioncall prog_lang="cpp">bool SNM_GetSourceType(MediaItem_Take* take, WDL_FastString* type)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_GetSourceType&quot;, MediaItem_Take take, WDL_FastString type)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_GetSourceType(MediaItem_Take takeWDL_FastString type)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_GetSourceType(MediaItem_Take take, WDL_FastString type)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)
    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="takeWDL_FastString" parmname="type">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_MoveOrRemoveTrackFX</slug>
    <functioncall prog_lang="cpp">bool SNM_MoveOrRemoveTrackFX(MediaTrack* tr, int fxId, int what)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_MoveOrRemoveTrackFX&quot;, MediaTrack tr, int fxId, int what)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_MoveOrRemoveTrackFX(MediaTrack tr, integer fxId, integer what)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_MoveOrRemoveTrackFX(MediaTrack tr, Int fxId, Int what)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.<br/>
fxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="fxId" parmname="fxId">

      </parameter>
      <parameter id="3" datatype="what" parmname="what">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_ReadMediaFileTag</slug>
    <functioncall prog_lang="cpp">bool SNM_ReadMediaFileTag(const char* fn, const char* tag, char* tagval, int tagval_sz)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_ReadMediaFileTag&quot;, &quot;fn&quot;, &quot;tag&quot;, #tagval)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string tagval = reaper.SNM_ReadMediaFileTag(string fn, string tag, string tagval)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, String fn, String tag, String tagval, Int tagval_sz) = SNM_ReadMediaFileTag(fn, tag, tagval, tagval_sz)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[S&amp;amp;M] Reads a media file tag. Supported tags: “artist”, “album”, “genre”, “comment”, “title”, or “year”. Returns false if tag was not found. See <a href="#SNM_TagMediaFile">SNM_TagMediaFile</a>.</p>

    </description>
    <chapter_context>
      File Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
      <retval id="2" datatype="tagval" retvalname="tagval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="fn" parmname="fn">

      </parameter>
      <parameter id="2" datatype="tag" parmname="tag">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_RemoveReceive</slug>
    <functioncall prog_lang="cpp">bool SNM_RemoveReceive(MediaTrack* tr, int rcvidx)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_RemoveReceive&quot;, MediaTrack tr, int rcvidx)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_RemoveReceive(MediaTrack tr, integer rcvidx)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_RemoveReceive(MediaTrack tr, Int rcvidx)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[S&amp;amp;M] Deprecated, see <a href="#RemoveTrackSend">RemoveTrackSend</a> (v5.15pre1+). Removes a receive. Returns false if nothing updated.</p>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="rcvidx" parmname="rcvidx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_RemoveReceivesFrom</slug>
    <functioncall prog_lang="cpp">bool SNM_RemoveReceivesFrom(MediaTrack* tr, MediaTrack* srctr)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_RemoveReceivesFrom&quot;, MediaTrack tr, MediaTrack srctr)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Removes all receives from srctr. Returns false if nothing updated.
    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">

      </parameter>
      <parameter id="2" datatype="srctr" parmname="srctr">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_SelectResourceBookmark</slug>
    <functioncall prog_lang="cpp">int SNM_SelectResourceBookmark(const char* name)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;SNM_SelectResourceBookmark&quot;, &quot;name&quot;)</functioncall>
    <functioncall prog_lang="lua">integer = reaper.SNM_SelectResourceBookmark(string name)</functioncall>
    <functioncall prog_lang="python">Int SNM_SelectResourceBookmark(String name)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="name" parmname="name">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_SetDoubleConfigVar</slug>
    <functioncall prog_lang="cpp">bool SNM_SetDoubleConfigVar(const char* varname, double newvalue)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_SetDoubleConfigVar&quot;, &quot;varname&quot;, newvalue)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.SNM_SetDoubleConfigVar(string varname, number newvalue)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_SetDoubleConfigVar(String varname, Float newvalue)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Sets a double preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).<br/>
        <br/>
The settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.<br/>
Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.<br/>
<br/>
The changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, if setting was successful; false, if not 
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="varname">
<p>the name of the config-variable to be read; not case sensitive see <a href="Reaper_Config_Variables.html">Reaper_Config_Variables.html</a> for valid config-vars</p>

      </parameter>
      <parameter id="2" datatype="number" parmname="newvalue">
<p>the new value to be set into varname</p>

      </parameter>
    </parameters>
    <tags>
     reaper
     project
     config
     preferences
     variables
     set
     internal
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_SetFastString</slug>
    <functioncall prog_lang="cpp">WDL_FastString* SNM_SetFastString(WDL_FastString* str, const char* newstr)</functioncall>
    <functioncall prog_lang="eel">WDL_FastString extension_api(&quot;SNM_SetFastString&quot;, WDL_FastString str, &quot;newstr&quot;)</functioncall>
    <functioncall prog_lang="lua">WDL_FastString = reaper.SNM_SetFastString(WDL_FastString str, string newstr)</functioncall>
    <functioncall prog_lang="python">WDL_FastString SNM_SetFastString(WDL_FastString str, String newstr)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Sets the &quot;fast string&quot; content. Returns str for facility.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="WDL_FastString" retvalname="WDL_FastString">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
      <parameter id="2" datatype="newstr" parmname="newstr">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_SetIntConfigVar</slug>
    <functioncall prog_lang="cpp">bool SNM_SetIntConfigVar(const char* varname, int newvalue)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_SetIntConfigVar&quot;, &quot;varname&quot;, int newvalue)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.SNM_SetIntConfigVar(string varname, integer newvalue)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_SetIntConfigVar(String varname, Int newvalue)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).<br/>
<br/>
Some variables are bitfields, where each bit represents e.g a checkbox in the preferences.<br/>
The changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, if setting was successful, false if not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="varname">
<p>the name of the config-variable to be read; not case sensitive see <a href="Reaper_Config_Variables.html">Reaper_Config_Variables.html</a> for valid config-vars</p>

      </parameter>
      <parameter id="2" datatype="integer" parmname="newvalue">
<p>the newly set value for varname</p>

      </parameter>
    </parameters>
    <tags>
     reaper
     project
     config
     preferences
     variables
     set
     internal
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_SetProjectMarker</slug>
    <functioncall prog_lang="cpp">bool SNM_SetProjectMarker(ReaProject* proj, int num, bool isrgn, double pos, double rgnend, const char* name, int color)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_SetProjectMarker&quot;, ReaProject proj, int num, bool isrgn, pos, rgnend, &quot;name&quot;, int color)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_SetProjectMarker(ReaProject proj, integer num, boolean isrgn, number pos, number rgnend, string name, integer color)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_SetProjectMarker(ReaProject proj, Int num, Boolean isrgn, Float pos, Float rgnend, String name, Int color)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[S&amp;amp;M] Deprecated, see <a href="#SetProjectMarker4">SetProjectMarker4</a> – Same function as SetProjectMarker3() except it can set empty names "".</p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="num" parmname="num">


      </parameter>
      <parameter id="3" datatype="isrgn" parmname="isrgn">


      </parameter>
      <parameter id="4" datatype="pos" parmname="pos">


      </parameter>
      <parameter id="5" datatype="rgnend" parmname="rgnend">


      </parameter>
      <parameter id="6" datatype="name" parmname="name">


      </parameter>
      <parameter id="7" datatype="color" parmname="color">


      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_TagMediaFile</slug>
    <functioncall prog_lang="cpp">bool SNM_TagMediaFile(const char* fn, const char* tag, const char* tagval)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;SNM_TagMediaFile&quot;, &quot;fn&quot;, &quot;tag&quot;, &quot;tagval&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean = reaper.SNM_TagMediaFile(string fn, string tag, string tagval)</functioncall>
    <functioncall prog_lang="python">Boolean SNM_TagMediaFile(String fn, String tag, String tagval)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[S&amp;amp;M] Tags a media file thanks to <a href="https://taglib.github.io">TagLib</a>. Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See <a href="#SNM_ReadMediaFileTag">SNM_ReadMediaFileTag</a>.</p>

    </description>
    <chapter_context>
      File Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">
true, if adding the tag worked; false, if adding didn't work.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="fn" parmname="fn">
the mediafilename, in which to add the tag
      </parameter>
      <parameter id="2" datatype="tag" parmname="tag">
&quot;artist&quot;, &quot;album&quot;, &quot;genre&quot;, &quot;comment&quot;, &quot;title&quot;, or &quot;year&quot;
      </parameter>
      <parameter id="3" datatype="tagval" parmname="tagval">
the new value to be added
      </parameter>
    </parameters>
    <tags>
     filemanagement
     tag
     id3
     add
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SNM_TieResourceSlotActions</slug>
    <functioncall prog_lang="cpp">void SNM_TieResourceSlotActions(int bookmarkId)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;SNM_TieResourceSlotActions&quot;, int bookmarkId)</functioncall>
    <functioncall prog_lang="lua">reaper.SNM_TieResourceSlotActions(integer bookmarkId)</functioncall>
    <functioncall prog_lang="python">SNM_TieResourceSlotActions(Int bookmarkId)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
[S&amp;amp;M] Attach Resources slot actions to a given bookmark.
    </description>
    <chapter_context>
      Miscellaneous
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="bookmarkId" parmname="bookmarkId">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SN_FocusMIDIEditor</slug>
    <functioncall prog_lang="cpp">void SN_FocusMIDIEditor()</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;SN_FocusMIDIEditor&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.SN_FocusMIDIEditor()</functioncall>
    <functioncall prog_lang="python">SN_FocusMIDIEditor()</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
Focuses the active/open MIDI editor.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <tags>
     userinterface
     midi
     editor
     open
     active
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ULT_GetMediaItemNote</slug>
    <functioncall prog_lang="cpp">const char* ULT_GetMediaItemNote(MediaItem* item)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;ULT_GetMediaItemNote&quot;, #retval, MediaItem item)</functioncall>
    <functioncall prog_lang="lua">string = reaper.ULT_GetMediaItemNote(MediaItem item)</functioncall>
    <functioncall prog_lang="python">String ULT_GetMediaItemNote(MediaItem item)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[ULT]Get item notes.</p>
<p>Gets the information from the NOTES-tag, as stored by <a href="#ULT_SetMediaItemNote">ULT_SetMediaItemNote</a>.</p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">
the notes, as stored in the MediaItem. If no notes exist, it will return &quot;&quot;
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">
the MediaItem from which to get the notes from
      </parameter>
    </parameters>
    <tags>
     trackmanagement
     get
     notes
     sws
     mediaitem
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>ULT_SetMediaItemNote</slug>
    <functioncall prog_lang="cpp">void ULT_SetMediaItemNote(MediaItem* item, const char* note)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;ULT_SetMediaItemNote&quot;, MediaItem item, &quot;note&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.ULT_SetMediaItemNote(MediaItem item, string note)</functioncall>
    <functioncall prog_lang="python">ULT_SetMediaItemNote(MediaItem item, String note)</functioncall>
    <requires>
      Reaper=5.62
      SWS=2.9.7
      Lua=5.3
    </requires>
    <description>
<p>[ULT]Set item notes.</p>
<p>Will be added as new tag NOTES in the MediaItem-StateChunk. Can be read again with <a href="#ULT_GetMediaItemNote">ULT_GetMediaItemNote</a></p>

    </description>
    <chapter_context>
      Mediaitem Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">
the MediaItem in which to add the Notes
      </parameter>
      <parameter id="2" datatype="note" parmname="note">
the notes to be added. Newlines are allowed. Long strings may slow down Reaper!
      </parameter>
    </parameters>
    <tags>
     mediaitemmanagement
     set
     mediaitem
     notes
     sws
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Byte</slug>
    <functioncall prog_lang="cpp">void JS_Byte(void* pointer, int offset, int* byteOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Byte&quot;, void* pointer, int offset, int &amp;amp;byte)</functioncall>
    <functioncall prog_lang="lua">number byte = reaper.JS_Byte(identifier pointer, integer offset)</functioncall>
    <functioncall prog_lang="python">(void pointer, Int offset, Int byteOut) = JS_Byte(pointer, offset, byteOut)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.971
      Lua=5.3
    </requires>
    <description>
<p>Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number byte" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="address">

      </parameter>
      <parameter id="2" datatype="integer" parmname="offset">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Composite</slug>
    <functioncall prog_lang="cpp">int JS_Composite(void* windowHWND, int srcx, int srcy, int srcw, int srch, void* sysBitmap, int dstx, int dsty, int dstw, int dsth)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_Composite&quot;, void* windowHWND, int srcx, int srcy, int srcw, int srch, void* sysBitmap, int dstx, int dsty, int dstw, int dsth)</functioncall>
    <functioncall prog_lang="lua">integer retval = reaper.JS_Composite(identifier windowHWND, integer srcx, integer srcy, integer srcw, integer srch, identifier sysBitmap, integer dstx, integer dsty, integer dstw, integer dsth)</functioncall>
    <functioncall prog_lang="python">Int JS_Composite(void windowHWND, Int srcx, Int srcy, Int srcw, Int srch, void sysBitmap, Int dstx, Int dsty, Int dstw, Int dsth)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.986
      Lua=5.3
    </requires>
    <description>
<p>Composites a LICE bitmap with a REAPER window.</p>
<p>Each time that the window is re-drawn, the bitmap will be blitted over the window’s client area (with per-pixel alpha blending).</p>
<p>If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.</p>
<p>Notes:</p>
<p>* Re-drawing can also be induced by <a href="#JS_Window_InvalidateRect">JS_Window_InvalidateRect</a>. * This function should not be applied directly to top-level windows, but rather to child windows. * Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.</p>
<p>Returns: 1 if successful, otherwise -1 = windowHWND is not window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="srcx">

      </parameter>
      <parameter id="3" datatype="integer" parmname="srcy">

      </parameter>
      <parameter id="4" datatype="integer" parmname="srcw">

      </parameter>
      <parameter id="5" datatype="integer" parmname="srch">

      </parameter>
      <parameter id="6" datatype="identifier" parmname="sysBitmap">

      </parameter>
      <parameter id="7" datatype="integer" parmname="dstx">

      </parameter>
      <parameter id="8" datatype="integer" parmname="dsty">

      </parameter>
      <parameter id="9" datatype="integer" parmname="dstw">

      </parameter>
      <parameter id="10" datatype="integer" parmname="dsth">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Composite_ListBitmaps</slug>
    <functioncall prog_lang="cpp">int JS_Composite_ListBitmaps(void* windowHWND, char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_Composite_ListBitmaps&quot;, void* windowHWND, #list)</functioncall>
    <functioncall prog_lang="lua">integer retval, string list = reaper.JS_Composite_ListBitmaps(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">(Int retval, void windowHWND, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Composite_ListBitmaps(windowHWND, listOutNeedBig, listOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.980
      Lua=5.3
    </requires>
    <description>
<p>Returns all bitmaps composited to the given window.</p>
<p>The list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.</p>
<p>retval is the number of linked bitmaps found, or negative if an error occured.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="list">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Composite_Unlink</slug>
    <functioncall prog_lang="cpp">void JS_Composite_Unlink(void* windowHWND, void* bitmap)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Composite_Unlink&quot;, void* windowHWND, void* bitmap)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Composite_Unlink(identifier windowHWND, identifier bitmap)</functioncall>
    <functioncall prog_lang="python">JS_Composite_Unlink(void windowHWND, void bitmap)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.980
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="identifier" parmname="bitmap">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Double</slug>
    <functioncall prog_lang="cpp">void JS_Double(void* pointer, int offset, double* doubleOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Double&quot;, void* pointer, int offset, &amp;amp;double)</functioncall>
    <functioncall prog_lang="lua">number double = reaper.JS_Double(identifier address, integer pointer)</functioncall>
    <functioncall prog_lang="python">(void pointer, Int offset, Float doubleOut) = JS_Double(pointer, offset, doubleOut)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.971
      Lua=5.3
    </requires>
    <description>
<p>Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number double" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="address">

      </parameter>
      <parameter id="2" datatype="integer" parmname="offset">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_Blit</slug>
    <functioncall prog_lang="cpp">void JS_GDI_Blit(void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height, const char* modeOptional)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_Blit&quot;, void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height, optional &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_Blit(identifier destHDC, integer dstx, integer dsty, identifier sourceHDC, integer srcx, integer srxy, integer width, integer height, optional string mode)</functioncall>
    <functioncall prog_lang="python">JS_GDI_Blit(void destHDC, Int dstx, Int dsty, void sourceHDC, Int srcx, Int srxy, Int width, Int height, String modeOptional)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.988
      Lua=5.3
    </requires>
    <description>
<p>Blits between two device contexts, which may include LICE “system bitmaps”.</p>
<p>mode: Optional parameter. “SRCCOPY” by default, or specify “ALPHA” to enable per-pixel alpha blending.</p>
<p>WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a seperate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="destHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="dstx">

      </parameter>
      <parameter id="3" datatype="integer" parmname="dsty">

      </parameter>
      <parameter id="4" datatype="identifier" parmname="sourceHDC">

      </parameter>
      <parameter id="5" datatype="integer" parmname="srcx">

      </parameter>
      <parameter id="6" datatype="integer" parmname="srxy">

      </parameter>
      <parameter id="7" datatype="integer" parmname="width">

      </parameter>
      <parameter id="8" datatype="integer" parmname="height">

      </parameter>
      <parameter id="9" datatype="optional string" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_CreateFillBrush</slug>
    <functioncall prog_lang="cpp">void* JS_GDI_CreateFillBrush(int color)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_GDI_CreateFillBrush&quot;, int color)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_GDI_CreateFillBrush(integer color)</functioncall>
    <functioncall prog_lang="python">void  JS_GDI_CreateFillBrush(Int color)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="color">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_CreateFont</slug>
    <functioncall prog_lang="cpp">void* JS_GDI_CreateFont(int height, int weight, int angle, bool italic, bool underline, bool strikeOut, const char* fontName)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_GDI_CreateFont&quot;, int height, int weight, int angle, bool italic, bool underline, bool strike, &quot;fontName&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_GDI_CreateFont(integer height, integer weight, integer angle, boolean italic, boolean underline, boolean strike, string fontName)</functioncall>
    <functioncall prog_lang="python">void  JS_GDI_CreateFont(Int height, Int weight, Int angle, Boolean italic, Boolean underline, Boolean strikeOut, String fontName)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Parameters:</p>
<p>* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.</p>
<p>* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.</p>
<p>* fontName: If empty string "", uses first font that matches the other specified attributes.</p>
<pre><code>       Note: Text color must be set separately.</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="height">

      </parameter>
      <parameter id="2" datatype="integer" parmname="weight">

      </parameter>
      <parameter id="3" datatype="integer" parmname="angle">

      </parameter>
      <parameter id="4" datatype="boolean" parmname="italic">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="underline">

      </parameter>
      <parameter id="6" datatype="boolean" parmname="strike">

      </parameter>
      <parameter id="7" datatype="string" parmname="fontName">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_CreatePen</slug>
    <functioncall prog_lang="cpp">void* JS_GDI_CreatePen(int width, int color)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_GDI_CreatePen&quot;, int width, int color)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_GDI_CreatePen(integer width, integer color)</functioncall>
    <functioncall prog_lang="python">void  JS_GDI_CreatePen(Int width, Int color)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="width">

      </parameter>
      <parameter id="2" datatype="integer" parmname="color">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_DeleteObject</slug>
    <functioncall prog_lang="cpp">void JS_GDI_DeleteObject(void* GDIObject)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_DeleteObject&quot;, void* GDIObject)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_DeleteObject(identifier GDIObject)</functioncall>
    <functioncall prog_lang="python">JS_GDI_DeleteObject(void GDIObject)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="GDIObject">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_DrawText</slug>
    <functioncall prog_lang="cpp">int JS_GDI_DrawText(void* deviceHDC, const char* text, int len, int left, int top, int right, int bottom, const char* align))</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_GDI_DrawText&quot;, void* deviceHDC, &quot;text&quot;, int len, int left, int top, int right, int bottom, &quot;align)&quot;)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_GDI_DrawText(identifier deviceHDC, string text, integer len, integer left, integer top, integer right, integer bottom, string align))</functioncall>
    <functioncall prog_lang="python">Int  JS_GDI_DrawText(void deviceHDC, String text, Int len, Int left, Int top, Int right, Int bottom, String align))</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Parameters:</p>
<p>* align: Combination of: “TOP”, “VCENTER”, “LEFT”, “HCENTER”, “RIGHT”, “BOTTOM”, “WORDBREAK”, “SINGLELINE”, “NOCLIP”, “CALCRECT”, “NOPREFIX” or “ELLIPSIS”</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="string" parmname="text">

      </parameter>
      <parameter id="3" datatype="integer" parmname="len">

      </parameter>
      <parameter id="4" datatype="integer" parmname="left">

      </parameter>
      <parameter id="5" datatype="integer" parmname="top">

      </parameter>
      <parameter id="6" datatype="integer" parmname="right">

      </parameter>
      <parameter id="7" datatype="integer" parmname="bottom">

      </parameter>
      <parameter id="8" datatype="string" parmname="align">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_FillEllipse</slug>
    <functioncall prog_lang="cpp">void JS_GDI_FillEllipse(void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_FillEllipse&quot;, void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_FillEllipse(identifier deviceHDC, integer left, integer top, integer right, integer bottom)</functioncall>
    <functioncall prog_lang="python">JS_GDI_FillEllipse(void deviceHDC, Int left, Int top, Int right, Int bottom)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="left">

      </parameter>
      <parameter id="3" datatype="integer" parmname="top">

      </parameter>
      <parameter id="4" datatype="integer" parmname="right">

      </parameter>
      <parameter id="5" datatype="integer" parmname="bottom">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_FillPolygon</slug>
    <functioncall prog_lang="cpp">void JS_GDI_FillPolygon(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_FillPolygon&quot;, void* deviceHDC, &quot;packedX&quot;, &quot;packedY&quot;, int numPoints)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_FillPolygon(identifier deviceHDC, string packedX, string packedY, integer numPoints)</functioncall>
    <functioncall prog_lang="python">JS_GDI_FillPolygon(void deviceHDC, String packedX, String packedY, Int numPoints)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>packedX and packedY are strings of points, each packed as “&amp;lt;i4”.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="string" parmname="packedX">

      </parameter>
      <parameter id="3" datatype="string" parmname="packedY">

      </parameter>
      <parameter id="4" datatype="integer" parmname="numPoints">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_FillRect</slug>
    <functioncall prog_lang="cpp">void JS_GDI_FillRect(void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_FillRect&quot;, void* deviceHDC, int left, int top, int right, int bottom)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_FillRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom)</functioncall>
    <functioncall prog_lang="python">JS_GDI_FillRect(void deviceHDC, Int left, Int top, Int right, Int bottom)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="left">

      </parameter>
      <parameter id="3" datatype="integer" parmname="top">

      </parameter>
      <parameter id="4" datatype="integer" parmname="right">

      </parameter>
      <parameter id="5" datatype="integer" parmname="bottom">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_FillRoundRect</slug>
    <functioncall prog_lang="cpp">void JS_GDI_FillRoundRect(void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_FillRoundRect&quot;, void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_FillRoundRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom, integer xrnd, integer yrnd)</functioncall>
    <functioncall prog_lang="python">JS_GDI_FillRoundRect(void deviceHDC, Int left, Int top, Int right, Int bottom, Int xrnd, Int yrnd)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="left">

      </parameter>
      <parameter id="3" datatype="integer" parmname="top">

      </parameter>
      <parameter id="4" datatype="integer" parmname="right">

      </parameter>
      <parameter id="5" datatype="integer" parmname="bottom">

      </parameter>
      <parameter id="6" datatype="integer" parmname="xrnd">

      </parameter>
      <parameter id="7" datatype="integer" parmname="yrnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_GetClientDC</slug>
    <functioncall prog_lang="cpp">void* JS_GDI_GetClientDC(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_GDI_GetClientDC&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_GDI_GetClientDC(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">void  JS_GDI_GetClientDC(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Returns the device context for the client area of the specified window.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_GetScreenDC</slug>
    <functioncall prog_lang="cpp">void* JS_GDI_GetScreenDC()</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_GDI_GetScreenDC&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_GDI_GetScreenDC()</functioncall>
    <functioncall prog_lang="python">void  JS_GDI_GetScreenDC()</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Returns a device context for the entire screen.</p>
<pre><code>       WARNING: Only available on Windows, not Linux or MacOS.</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_GetSysColor</slug>
    <functioncall prog_lang="cpp">int JS_GDI_GetSysColor(const char* GUIElement)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_GDI_GetSysColor&quot;, &quot;GUIElement&quot;)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_GDI_GetSysColor(string GUIElement)</functioncall>
    <functioncall prog_lang="python">Int  JS_GDI_GetSysColor(String GUIElement)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="GUIElement">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_GetTextColor</slug>
    <functioncall prog_lang="cpp">int JS_GDI_GetTextColor(void* deviceHDC)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_GDI_GetTextColor&quot;, void* deviceHDC)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_GDI_GetTextColor(identifier deviceHDC)</functioncall>
    <functioncall prog_lang="python">Int  JS_GDI_GetTextColor(void deviceHDC)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_GetWindowDC</slug>
    <functioncall prog_lang="cpp">void* JS_GDI_GetWindowDC(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_GDI_GetWindowDC&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_GDI_GetWindowDC(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">void  JS_GDI_GetWindowDC(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Returns the device context for the entire window, including title bar and frame.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_Line</slug>
    <functioncall prog_lang="cpp">void JS_GDI_Line(void* deviceHDC, int x1, int y1, int x2, int y2)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_Line&quot;, void* deviceHDC, int x1, int y1, int x2, int y2)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_Line(identifier deviceHDC, integer x1, integer y1, integer x2, integer y2)</functioncall>
    <functioncall prog_lang="python">JS_GDI_Line(void deviceHDC, Int x1, Int y1, Int x2, Int y2)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x1">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y1">

      </parameter>
      <parameter id="4" datatype="integer" parmname="x2">

      </parameter>
      <parameter id="5" datatype="integer" parmname="y2">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_Polyline</slug>
    <functioncall prog_lang="cpp">void JS_GDI_Polyline(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_Polyline&quot;, void* deviceHDC, &quot;packedX&quot;, &quot;packedY&quot;, int numPoints)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_Polyline(identifier deviceHDC, string packedX, string packedY, integer numPoints)</functioncall>
    <functioncall prog_lang="python">JS_GDI_Polyline(void deviceHDC, String packedX, String packedY, Int numPoints)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>packedX and packedY are strings of points, each packed as “&amp;lt;i4”.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="string" parmname="packedX">

      </parameter>
      <parameter id="3" datatype="string" parmname="packedY">

      </parameter>
      <parameter id="4" datatype="integer" parmname="numPoints">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_ReleaseDC</slug>
    <functioncall prog_lang="cpp">void JS_GDI_ReleaseDC(void* windowHWND, void* deviceHDC)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_ReleaseDC&quot;, void* windowHWND, void* deviceHDC)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_ReleaseDC(identifier windowHWND, identifier deviceHDC)</functioncall>
    <functioncall prog_lang="python">JS_GDI_ReleaseDC(void windowHWND, void deviceHDC)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
<p>Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="identifier" parmname="deviceHDC">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_SelectObject</slug>
    <functioncall prog_lang="cpp">void* JS_GDI_SelectObject(void* deviceHDC, void* GDIObject)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_GDI_SelectObject&quot;, void* deviceHDC, void* GDIObject)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_GDI_SelectObject(identifier deviceHDC, identifier GDIObject)</functioncall>
    <functioncall prog_lang="python">void  JS_GDI_SelectObject(void deviceHDC, void GDIObject)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Activates a font, pen, or fill brush for subsequent drawing in the specified device context.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="identifier" parmname="GDIObject">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_SetPixel</slug>
    <functioncall prog_lang="cpp">void JS_GDI_SetPixel(void* deviceHDC, int x, int y, int color)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_SetPixel&quot;, void* deviceHDC, int x, int y, int color)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_SetPixel(identifier deviceHDC, integer x, integer y, integer color)</functioncall>
    <functioncall prog_lang="python">JS_GDI_SetPixel(void deviceHDC, Int x, Int y, Int color)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y">

      </parameter>
      <parameter id="4" datatype="integer" parmname="color">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_SetTextBkColor</slug>
    <functioncall prog_lang="cpp">void JS_GDI_SetTextBkColor(void* deviceHDC, int color)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_SetTextBkColor&quot;, void* deviceHDC, int color)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_SetTextBkColor(identifier deviceHDC, integer color)</functioncall>
    <functioncall prog_lang="python">JS_GDI_SetTextBkColor(void deviceHDC, Int color)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="color">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_SetTextBkMode</slug>
    <functioncall prog_lang="cpp">void JS_GDI_SetTextBkMode(void* deviceHDC, int mode)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_SetTextBkMode&quot;, void* deviceHDC, int mode)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_SetTextBkMode(identifier deviceHDC, integer mode)</functioncall>
    <functioncall prog_lang="python">JS_GDI_SetTextBkMode(void deviceHDC, Int mode)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_SetTextColor</slug>
    <functioncall prog_lang="cpp">void JS_GDI_SetTextColor(void* deviceHDC, int color)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_SetTextColor&quot;, void* deviceHDC, int color)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_SetTextColor(identifier deviceHDC, integer color)</functioncall>
    <functioncall prog_lang="python">JS_GDI_SetTextColor(void deviceHDC, Int color)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="deviceHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="color">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_GDI_StretchBlit</slug>
    <functioncall prog_lang="cpp">void JS_GDI_StretchBlit(void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch, const char* modeOptional)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_GDI_StretchBlit&quot;, void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch, optional &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_GDI_StretchBlit(identifier destHDC, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceHDC, integer srcx, integer srxy, integer srcw, integer srch, optional string mode)</functioncall>
    <functioncall prog_lang="python">JS_GDI_StretchBlit(void destHDC, Int dstx, Int dsty, Int dstw, Int dsth, void sourceHDC, Int srcx, Int srxy, Int srcw, Int srch, String modeOptional)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.980
      Lua=5.3
    </requires>
    <description>
<p>Blits between two device contexts, which may include LICE “system bitmaps”.</p>
<p>modeOptional: “SRCCOPY” by default, or specify “ALPHA” to enable per-pixel alpha blending.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="destHDC">

      </parameter>
      <parameter id="2" datatype="integer" parmname="dstx">

      </parameter>
      <parameter id="3" datatype="integer" parmname="dsty">

      </parameter>
      <parameter id="4" datatype="integer" parmname="dstw">

      </parameter>
      <parameter id="5" datatype="integer" parmname="dsth">

      </parameter>
      <parameter id="6" datatype="identifier" parmname="sourceHDC">

      </parameter>
      <parameter id="7" datatype="integer" parmname="srcx">

      </parameter>
      <parameter id="8" datatype="integer" parmname="srxy">

      </parameter>
      <parameter id="9" datatype="integer" parmname="srcw">

      </parameter>
      <parameter id="10" datatype="integer" parmname="srch">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Int</slug>
    <functioncall prog_lang="cpp">void JS_Int(void* pointer, int offset, int* intOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Int&quot;, void* pointer, int offset, int &amp;amp;int)</functioncall>
    <functioncall prog_lang="lua">number int = reaper.JS_Int(identifier pointer, integer offset)</functioncall>
    <functioncall prog_lang="python">(void pointer, Int offset, Int intOut) = JS_Int(pointer, offset, intOut)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.971
      Lua=5.3
    </requires>
    <description>
<p>Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number int" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="address">

      </parameter>
      <parameter id="2" datatype="integer" parmname="offset">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_AlterBitmapHSV</slug>
    <functioncall prog_lang="cpp">void JS_LICE_AlterBitmapHSV(void* bitmap, double hue, double saturation, double value)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_AlterBitmapHSV&quot;, void* bitmap, hue, saturation, value)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_AlterBitmapHSV(identifier bitmap, number hue, number saturation, number value)</functioncall>
    <functioncall prog_lang="python">(JS_LICE_AlterBitmapHSV(void bitmap, Float hue, Float saturation, Float value)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.988
      Lua=5.3
    </requires>
    <description>
<p>Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="number" parmname="hue">

      </parameter>
      <parameter id="3" datatype="number" parmname="saturation">

      </parameter>
      <parameter id="4" datatype="number" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_AlterRectHSV</slug>
    <functioncall prog_lang="cpp">void JS_LICE_AlterRectHSV(void* bitmap, int x, int y, int w, int h, double hue, double saturation, double value)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_AlterRectHSV&quot;, void* bitmap, int x, int y, int w, int h, hue, saturation, value)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_AlterRectHSV(identifier bitmap, integer x, integer y, integer w, integer h, number hue, number saturation, number value)</functioncall>
    <functioncall prog_lang="python">JS_LICE_AlterRectHSV(void bitmap, Int x, Int y, Int w, Int h, Float hue, Float saturation, Float value)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.988
      Lua=5.3
    </requires>
    <description>
<p>Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y">

      </parameter>
      <parameter id="4" datatype="integer" parmname="w">

      </parameter>
      <parameter id="5" datatype="integer" parmname="h">

      </parameter>
      <parameter id="6" datatype="number" parmname="hue">

      </parameter>
      <parameter id="7" datatype="number" parmname="saturation">

      </parameter>
      <parameter id="8" datatype="number" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_Arc</slug>
    <functioncall prog_lang="cpp">void JS_LICE_Arc(void* bitmap, double cx, double cy, double r, double minAngle, double maxAngle, int color, double alpha, const char* mode, bool antialias)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_Arc&quot;, void* bitmap, cx, cy, r, minAngle, maxAngle, int color, alpha, &quot;mode&quot;, bool antialias)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_Arc(identifier bitmap, number cx, number cy, number r, number minAngle, number maxAngle, integer color, number alpha, string mode, boolean antialias)</functioncall>
    <functioncall prog_lang="python">JS_LICE_Arc(void bitmap, Float cx, Float cy, Float r, Float minAngle, Float maxAngle, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA”.</p>
<pre><code>       LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="number" parmname="cx">

      </parameter>
      <parameter id="3" datatype="number" parmname="cy">

      </parameter>
      <parameter id="4" datatype="number" parmname="r">

      </parameter>
      <parameter id="5" datatype="number" parmname="minAngle">

      </parameter>
      <parameter id="6" datatype="number" parmname="maxAngle">

      </parameter>
      <parameter id="7" datatype="integer" parmname="color">

      </parameter>
      <parameter id="8" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="9" datatype="string" parmname="mode">

      </parameter>
      <parameter id="10" datatype="boolean" parmname="antialias">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_Bezier</slug>
    <functioncall prog_lang="cpp">void JS_LICE_Bezier(void* bitmap, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, double tol, int color, double alpha, const char* mode, bool antialias)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_Bezier&quot;, void* bitmap, xstart, ystart, xctl1, yctl1, xctl2, yctl2, xend, yend, tol, int color, alpha, &quot;mode&quot;, bool antialias)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_Bezier(identifier bitmap, number xstart, number ystart, number xctl1, number yctl1, number xctl2, number yctl2, number xend, number yend, number tol, integer color, number alpha, string mode, boolean antialias)</functioncall>
    <functioncall prog_lang="python">JS_LICE_Bezier(void bitmap, Float xstart, Float ystart, Float xctl1, Float yctl1, Float xctl2, Float yctl2, Float xend, Float yend, Float tol, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA” to enable per-pixel alpha blending.</p>
<p>LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="number" parmname="xstart">

      </parameter>
      <parameter id="3" datatype="number" parmname="ystart">

      </parameter>
      <parameter id="4" datatype="number" parmname="xctl1">

      </parameter>
      <parameter id="5" datatype="number" parmname="yctl1">

      </parameter>
      <parameter id="6" datatype="number" parmname="xctl2">

      </parameter>
      <parameter id="7" datatype="number" parmname="yctl2">

      </parameter>
      <parameter id="8" datatype="number" parmname="xend">

      </parameter>
      <parameter id="9" datatype="number" parmname="yend">

      </parameter>
      <parameter id="10" datatype="number" parmname="tol">

      </parameter>
      <parameter id="11" datatype="integer" parmname="color">

      </parameter>
      <parameter id="12" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="13" datatype="string" parmname="mode">

      </parameter>
      <parameter id="14" datatype="boolean" parmname="antialias">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>JS_LICE_Blit</slug>
    <functioncall prog_lang="cpp">void JS_LICE_Blit(void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, double alpha, const char* mode)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_Blit&quot;, void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, alpha, &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_Blit(identifier destBitmap, integer dstx, integer dsty, identifier sourceBitmap, integer srcx, integer srcy, integer width, integer height, number alpha, string mode)</functioncall>
    <functioncall prog_lang="python">JS_LICE_Blit(void destBitmap, Int dstx, Int dsty, void sourceBitmap, Int srcx, Int srcy, Int width, Int height, Float alpha, String mode)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.988
      Lua=5.3
    </requires>
    <description>
<p>Standard LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA” to enable per-pixel alpha blending.</p>
<p>In addition to the standard LICE modes, LICE_Blit also offers: * “CHANCOPY_XTOY”, with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.) * “BLUR” * “ALPHAMUL”, which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with “COPY,ALPHA”.)</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="destBitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="dstx">

      </parameter>
      <parameter id="3" datatype="integer" parmname="dsty">

      </parameter>
      <parameter id="4" datatype="identifier" parmname="sourceBitmap">

      </parameter>
      <parameter id="5" datatype="integer" parmname="srcx">

      </parameter>
      <parameter id="6" datatype="integer" parmname="srcy">

      </parameter>
      <parameter id="7" datatype="integer" parmname="width">

      </parameter>
      <parameter id="8" datatype="integer" parmname="height">

      </parameter>
      <parameter id="9" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="10" datatype="string" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_Circle</slug>
    <functioncall prog_lang="cpp">void JS_LICE_Circle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_Circle&quot;, void* bitmap, cx, cy, r, int color, alpha, &quot;mode&quot;, bool antialias)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_Circle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)</functioncall>
    <functioncall prog_lang="python">JS_LICE_Circle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA”.</p>
<pre><code>       LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="number" parmname="cx">

      </parameter>
      <parameter id="3" datatype="number" parmname="cy">

      </parameter>
      <parameter id="4" datatype="number" parmname="r">

      </parameter>
      <parameter id="5" datatype="integer" parmname="color">

      </parameter>
      <parameter id="6" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="7" datatype="string" parmname="mode">

      </parameter>
      <parameter id="8" datatype="boolean" parmname="antialias">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_Clear</slug>
    <functioncall prog_lang="cpp">void JS_LICE_Clear(void* bitmap, int color)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_Clear&quot;, void* bitmap, int color)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_Clear(identifier bitmap, integer color)</functioncall>
    <functioncall prog_lang="python">JS_LICE_Clear(void bitmap, Int color)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="color">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_CreateBitmap</slug>
    <functioncall prog_lang="cpp">void* JS_LICE_CreateBitmap(bool isSysBitmap, int width, int height)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_LICE_CreateBitmap&quot;, bool isSysBitmap, int width, int height)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_LICE_CreateBitmap(boolean isSysBitmap, integer width, integer height)</functioncall>
    <functioncall prog_lang="python">void  JS_LICE_CreateBitmap(Boolean isSysBitmap, Int width, Int height)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="boolean" parmname="isSysBitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="width">

      </parameter>
      <parameter id="3" datatype="integer" parmname="height">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_CreateFont</slug>
    <functioncall prog_lang="cpp">void* JS_LICE_CreateFont()</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_LICE_CreateFont&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_LICE_CreateFont()</functioncall>
    <functioncall prog_lang="python">void  JS_LICE_CreateFont()</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_DestroyBitmap</slug>
    <functioncall prog_lang="cpp">void JS_LICE_DestroyBitmap(void* bitmap)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_DestroyBitmap&quot;, void* bitmap)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_DestroyBitmap(identifier bitmap)</functioncall>
    <functioncall prog_lang="python">JS_LICE_DestroyBitmap(void bitmap)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_DestroyFont</slug>
    <functioncall prog_lang="cpp">void JS_LICE_DestroyFont(void* LICEFont)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_DestroyFont&quot;, void* LICEFont)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_DestroyFont(identifier LICEFont)</functioncall>
    <functioncall prog_lang="python">JS_LICE_DestroyFont(void LICEFont)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="LICEFont">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_DrawChar</slug>
    <functioncall prog_lang="cpp">void JS_LICE_DrawChar(void* bitmap, int x, int y, char c, int color, double alpha, int mode))</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_DrawChar&quot;, void* bitmap, int x, int y, char c, int color, alpha, int mode))</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_DrawChar(identifier bitmap, integer x, integer y, integer c, integer color, number alpha, integer mode))</functioncall>
    <functioncall prog_lang="python">JS_LICE_DrawChar(void bitmap, Int x, Int y, Int c, Int color, Float alpha, Int mode))</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y">

      </parameter>
      <parameter id="4" datatype="integer" parmname="c">

      </parameter>
      <parameter id="5" datatype="integer" parmname="color">

      </parameter>
      <parameter id="6" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="7" datatype="integer" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_DrawText</slug>
    <functioncall prog_lang="cpp">int JS_LICE_DrawText(void* bitmap, void* LICEFont, const char* text, int textLen, int x1, int y1, int x2, int y2)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_LICE_DrawText&quot;, void* bitmap, void* LICEFont, &quot;text&quot;, int textLen, int x1, int y1, int x2, int y2)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_LICE_DrawText(identifier bitmap, identifier LICEFont, string text, integer textLen, integer x1, integer y1, integer x2, integer y2)</functioncall>
    <functioncall prog_lang="python">Int  JS_LICE_DrawText(void bitmap, void LICEFont, String text, Int textLen, Int x1, Int y1, Int x2, Int y2)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="identifier" parmname="LICEFont">

      </parameter>
      <parameter id="3" datatype="string" parmname="text">

      </parameter>
      <parameter id="4" datatype="integer" parmname="textLen">

      </parameter>
      <parameter id="5" datatype="integer" parmname="x1">

      </parameter>
      <parameter id="6" datatype="integer" parmname="y1">

      </parameter>
      <parameter id="7" datatype="integer" parmname="x2">

      </parameter>
      <parameter id="8" datatype="integer" parmname="y2">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_FillCircle</slug>
    <functioncall prog_lang="cpp">void JS_LICE_FillCircle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_FillCircle&quot;, void* bitmap, cx, cy, r, int color, alpha, &quot;mode&quot;, bool antialias)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_FillCircle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)</functioncall>
    <functioncall prog_lang="python">JS_LICE_FillCircle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA”.</p>
<pre><code>       LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="number" parmname="cx">

      </parameter>
      <parameter id="3" datatype="number" parmname="cy">

      </parameter>
      <parameter id="4" datatype="number" parmname="r">

      </parameter>
      <parameter id="5" datatype="integer" parmname="color">

      </parameter>
      <parameter id="6" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="7" datatype="string" parmname="mode">

      </parameter>
      <parameter id="8" datatype="boolean" parmname="antialias">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_FillPolygon</slug>
    <functioncall prog_lang="cpp">void JS_LICE_FillPolygon(void* bitmap, const char* packedX, const char* packedY, int numPoints, int color, double alpha, const char* mode)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_FillPolygon&quot;, void* bitmap, &quot;packedX&quot;, &quot;packedY&quot;, int numPoints, int color, alpha, &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_FillPolygon(identifier bitmap, string packedX, string packedY, integer numPoints, integer color, number alpha, string mode)</functioncall>
    <functioncall prog_lang="python">JS_LICE_FillPolygon(void bitmap, String packedX, String packedY, Int numPoints, Int color, Float alpha, String mode)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
<p>packedX and packedY are two strings of coordinates, each packed as “&amp;lt;i4”.</p>
<p>LICE modes : “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA” to enable per-pixel alpha blending.</p>
<p>LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="string" parmname="packedX">

      </parameter>
      <parameter id="3" datatype="string" parmname="packedY">

      </parameter>
      <parameter id="4" datatype="integer" parmname="numPoints">

      </parameter>
      <parameter id="5" datatype="integer" parmname="color">

      </parameter>
      <parameter id="6" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="7" datatype="string" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_FillRect</slug>
    <functioncall prog_lang="cpp">void JS_LICE_FillRect(void* bitmap, int x, int y, int w, int h, int color, double alpha, const char* mode)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_FillRect&quot;, void* bitmap, int x, int y, int w, int h, int color, alpha, &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_FillRect(identifier bitmap, integer x, integer y, integer w, integer h, integer color, number alpha, string mode)</functioncall>
    <functioncall prog_lang="python">JS_LICE_FillRect(void bitmap, Int x, Int y, Int w, Int h, Int color, Float alpha, String mode)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA”.</p>
<pre><code>       LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y">

      </parameter>
      <parameter id="4" datatype="integer" parmname="w">

      </parameter>
      <parameter id="5" datatype="integer" parmname="h">

      </parameter>
      <parameter id="6" datatype="integer" parmname="color">

      </parameter>
      <parameter id="7" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="8" datatype="string" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_FillTriangle</slug>
    <functioncall prog_lang="cpp">void JS_LICE_FillTriangle(void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, double alpha, const char* mode)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_FillTriangle&quot;, void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, alpha, &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_FillTriangle(identifier bitmap, integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, integer color, number alpha, string mode)</functioncall>
    <functioncall prog_lang="python">JS_LICE_FillTriangle(void bitmap, Int x1, Int y1, Int x2, Int y2, Int x3, Int y3, Int color, Float alpha, String mode)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA”.</p>
<pre><code>       LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x1">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y1">

      </parameter>
      <parameter id="4" datatype="integer" parmname="x2">

      </parameter>
      <parameter id="5" datatype="integer" parmname="y2">

      </parameter>
      <parameter id="6" datatype="integer" parmname="x3">

      </parameter>
      <parameter id="7" datatype="integer" parmname="y3">

      </parameter>
      <parameter id="8" datatype="integer" parmname="color">

      </parameter>
      <parameter id="9" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="10" datatype="string" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_GetDC</slug>
    <functioncall prog_lang="cpp">void* JS_LICE_GetDC(void* bitmap)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_LICE_GetDC&quot;, void* bitmap)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_LICE_GetDC(identifier bitmap)</functioncall>
    <functioncall prog_lang="python">void  JS_LICE_GetDC(void bitmap)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_GetHeight</slug>
    <functioncall prog_lang="cpp">int JS_LICE_GetHeight(void* bitmap)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_LICE_GetHeight&quot;, void* bitmap)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_LICE_GetHeight(identifier bitmap)</functioncall>
    <functioncall prog_lang="python">Int  JS_LICE_GetHeight(void bitmap)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_GetPixel</slug>
    <functioncall prog_lang="cpp">int JS_LICE_GetPixel(void* bitmap, int x, int y)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_LICE_GetPixel&quot;, void* bitmap, int x, int y)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_LICE_GetPixel(identifier bitmap, integer x, integer y)</functioncall>
    <functioncall prog_lang="python">Int  JS_LICE_GetPixel(void bitmap, Int x, Int y)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Returns the color of the specified pixel.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_GetWidth</slug>
    <functioncall prog_lang="cpp">int JS_LICE_GetWidth(void* bitmap)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_LICE_GetWidth&quot;, void* bitmap)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_LICE_GetWidth(identifier bitmap)</functioncall>
    <functioncall prog_lang="python">Int  JS_LICE_GetWidth(void bitmap)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_GradRect</slug>
    <functioncall prog_lang="cpp">void JS_LICE_GradRect(void* bitmap, int dstx, int dsty, int dstw, int dsth, double ir, double ig, double ib, double ia, double drdx, double dgdx, double dbdx, double dadx, double drdy, double dgdy, double dbdy, double dady, const char* mode)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_GradRect&quot;, void* bitmap, int dstx, int dsty, int dstw, int dsth, ir, ig, ib, ia, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady, &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_GradRect(identifier bitmap, integer dstx, integer dsty, integer dstw, integer dsth, number ir, number ig, number ib, number ia, number drdx, number dgdx, number dbdx, number dadx, number drdy, number dgdy, number dbdy, number dady, string mode)</functioncall>
    <functioncall prog_lang="python">JS_LICE_GradRect(void bitmap, Int dstx, Int dsty, Int dstw, Int dsth, Float ir, Float ig, Float ib, Float ia, Float drdx, Float dgdx, Float dbdx, Float dadx, Float drdy, Float dgdy, Float dbdy, Float dady, String mode)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="dstx">

      </parameter>
      <parameter id="3" datatype="integer" parmname="dsty">

      </parameter>
      <parameter id="4" datatype="integer" parmname="dstw">

      </parameter>
      <parameter id="5" datatype="integer" parmname="dsth">

      </parameter>
      <parameter id="6" datatype="number" parmname="ir">

      </parameter>
      <parameter id="7" datatype="number" parmname="ig">

      </parameter>
      <parameter id="8" datatype="number" parmname="ib">

      </parameter>
      <parameter id="9" datatype="number" parmname="ia">

      </parameter>
      <parameter id="10" datatype="number" parmname="drdx">

      </parameter>
      <parameter id="11" datatype="number" parmname="dgdx">

      </parameter>
      <parameter id="12" datatype="number" parmname="dbdx">

      </parameter>
      <parameter id="13" datatype="number" parmname="dadx">

      </parameter>
      <parameter id="14" datatype="number" parmname="drdy">

      </parameter>
      <parameter id="15" datatype="number" parmname="dgdy">

      </parameter>
      <parameter id="16" datatype="number" parmname="dbdy">

      </parameter>
      <parameter id="17" datatype="number" parmname="dady">

      </parameter>
      <parameter id="18" datatype="string" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_IsFlipped</slug>
    <functioncall prog_lang="cpp">bool JS_LICE_IsFlipped(void* bitmap)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_LICE_IsFlipped&quot;, void* bitmap)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_LICE_IsFlipped(identifier bitmap)</functioncall>
    <functioncall prog_lang="python">Boolean  JS_LICE_IsFlipped(void bitmap)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_Line</slug>
    <functioncall prog_lang="cpp">void JS_LICE_Line(void* bitmap, double x1, double y1, double x2, double y2, int color, double alpha, const char* mode, bool antialias)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_Line&quot;, void* bitmap, x1, y1, x2, y2, int color, alpha, &quot;mode&quot;, bool antialias)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_Line(identifier bitmap, number x1, number y1, number x2, number y2, integer color, number alpha, string mode, boolean antialias)</functioncall>
    <functioncall prog_lang="python">JS_LICE_Line(void bitmap, Float x1, Float y1, Float x2, Float y2, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA”.</p>
<pre><code>       LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="number" parmname="x1">

      </parameter>
      <parameter id="3" datatype="number" parmname="y1">

      </parameter>
      <parameter id="4" datatype="number" parmname="x2">

      </parameter>
      <parameter id="5" datatype="number" parmname="y2">

      </parameter>
      <parameter id="6" datatype="integer" parmname="color">

      </parameter>
      <parameter id="7" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="8" datatype="string" parmname="mode">

      </parameter>
      <parameter id="9" datatype="boolean" parmname="antialias">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_LoadPNG</slug>
    <functioncall prog_lang="cpp">void* JS_LICE_LoadPNG(const char* filename)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_LICE_LoadPNG&quot;, &quot;filename&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_LICE_LoadPNG(string filename)</functioncall>
    <functioncall prog_lang="python">void  JS_LICE_LoadPNG(String filename)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.980
      Lua=5.3
    </requires>
    <description>
<p>Returns a system LICE bitmap containing the PNG.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="filename">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_MeasureText</slug>
    <functioncall prog_lang="cpp">void JS_LICE_MeasureText(const char* text, int* widthOut, int* HeightOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_MeasureText&quot;, &quot;text&quot;, int &amp;width, int &amp;Height)</functioncall>
    <functioncall prog_lang="lua">number width, number Height = reaper.JS_LICE_MeasureText(string text)</functioncall>
    <functioncall prog_lang="python">(String text, Int widthOut, Int HeightOut) = JS_LICE_MeasureText(text, widthOut, HeightOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="width">

      </retval>
      <retval id="2" datatype="number" retvalname="Height">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="text">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_ProcessRect</slug>
    <functioncall prog_lang="cpp">bool JS_LICE_ProcessRect(void* bitmap, int x, int y, int w, int h, const char* mode, double operand)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_LICE_ProcessRect&quot;, void* bitmap, int x, int y, int w, int h, &quot;mode&quot;, operand)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_LICE_ProcessRect(identifier bitmap, integer x, integer y, integer w, integer h, string mode, number operand)</functioncall>
    <functioncall prog_lang="python">Boolean JS_LICE_ProcessRect(void bitmap, Int x, Int y, Int w, Int h, String mode, Float operand)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.988
      Lua=5.3
    </requires>
    <description>
<p>Applies bitwise operations to each pixel in the target rectangle.</p>
<p>operand: a color in 0xAARRGGBB format.</p>
<p>modes: * “XOR”, “OR” or “AND”. * “SET_XYZ”, with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.) * “ALPHAMUL”: Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)</p>
<p>NOTE: LICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5: reaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, “ADD”).</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y">

      </parameter>
      <parameter id="4" datatype="integer" parmname="w">

      </parameter>
      <parameter id="5" datatype="integer" parmname="h">

      </parameter>
      <parameter id="6" datatype="string" parmname="mode">

      </parameter>
      <parameter id="7" datatype="number" parmname="operand">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_PutPixel</slug>
    <functioncall prog_lang="cpp">void JS_LICE_PutPixel(void* bitmap, int x, int y, int color, double alpha, const char* mode)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_PutPixel&quot;, void* bitmap, int x, int y, int color, alpha, &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_PutPixel(identifier bitmap, integer x, integer y, integer color, number alpha, string mode)</functioncall>
    <functioncall prog_lang="python">JS_LICE_PutPixel(void bitmap, Int x, Int y, Int color, Float alpha, String mode)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA”.</p>
<pre><code>       LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y">

      </parameter>
      <parameter id="4" datatype="integer" parmname="color">

      </parameter>
      <parameter id="5" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="6" datatype="string" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_Resize</slug>
    <functioncall prog_lang="cpp">void JS_LICE_Resize(void* bitmap, int width, int height)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_Resize&quot;, void* bitmap, int width, int height)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_Resize(identifier bitmap, integer width, integer height)</functioncall>
    <functioncall prog_lang="python">JS_LICE_Resize(void bitmap, Int width, Int height)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="width">

      </parameter>
      <parameter id="3" datatype="integer" parmname="height">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_RotatedBlit</slug>
    <functioncall prog_lang="cpp">void JS_LICE_RotatedBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, double srcx, double srcy, double srcw, double srch, double angle, double rotxcent, double rotycent, bool cliptosourcerect, double alpha, const char* mode)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_RotatedBlit&quot;, void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, srcx, srcy, srcw, srch, angle, rotxcent, rotycent, bool cliptosourcerect, alpha, &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_RotatedBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceBitmap, number srcx, number srcy, number srcw, number srch, number angle, number rotxcent, number rotycent, boolean cliptosourcerect, number alpha, string mode)</functioncall>
    <functioncall prog_lang="python">JS_LICE_RotatedBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void sourceBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float angle, Float rotxcent, Float rotycent, Boolean cliptosourcerect, Float alpha, String mode)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA” to enable per-pixel alpha blending.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="destBitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="dstx">

      </parameter>
      <parameter id="3" datatype="integer" parmname="dsty">

      </parameter>
      <parameter id="4" datatype="integer" parmname="dstw">

      </parameter>
      <parameter id="5" datatype="integer" parmname="dsth">

      </parameter>
      <parameter id="6" datatype="identifier" parmname="sourceBitmap">

      </parameter>
      <parameter id="7" datatype="number" parmname="srcx">

      </parameter>
      <parameter id="8" datatype="number" parmname="srcy">

      </parameter>
      <parameter id="9" datatype="number" parmname="srcw">

      </parameter>
      <parameter id="10" datatype="number" parmname="srch">

      </parameter>
      <parameter id="11" datatype="number" parmname="angle">

      </parameter>
      <parameter id="12" datatype="number" parmname="rotxcent">

      </parameter>
      <parameter id="13" datatype="number" parmname="rotycent">

      </parameter>
      <parameter id="14" datatype="boolean" parmname="cliptosourcerect">

      </parameter>
      <parameter id="15" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="16" datatype="string" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_RoundRect</slug>
    <functioncall prog_lang="cpp">void JS_LICE_RoundRect(void* bitmap, double x, double y, double w, double h, int cornerradius, int color, double alpha, const char* mode, bool antialias)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_RoundRect&quot;, void* bitmap, x, y, w, h, int cornerradius, int color, alpha, &quot;mode&quot;, bool antialias)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_RoundRect(identifier bitmap, number x, number y, number w, number h, integer cornerradius, integer color, number alpha, string mode, boolean antialias)</functioncall>
    <functioncall prog_lang="python">JS_LICE_RoundRect(void bitmap, Float x, Float y, Float w, Float h, Int cornerradius, Int color, Float alpha, String mode, Boolean antialias)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA”.</p>
<pre><code>       LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="number" parmname="x">

      </parameter>
      <parameter id="3" datatype="number" parmname="y">

      </parameter>
      <parameter id="4" datatype="number" parmname="w">

      </parameter>
      <parameter id="5" datatype="number" parmname="h">

      </parameter>
      <parameter id="6" datatype="integer" parmname="cornerradius">

      </parameter>
      <parameter id="7" datatype="integer" parmname="color">

      </parameter>
      <parameter id="8" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="9" datatype="string" parmname="mode">

      </parameter>
      <parameter id="10" datatype="boolean" parmname="antialias">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_ScaledBlit</slug>
    <functioncall prog_lang="cpp">void JS_LICE_ScaledBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, double srcx, double srcy, double srcw, double srch, double alpha, const char* mode)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_ScaledBlit&quot;, void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, srcx, srcy, srcw, srch, alpha, &quot;mode&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_ScaledBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier srcBitmap, number srcx, number srcy, number srcw, number srch, number alpha, string mode)</functioncall>
    <functioncall prog_lang="python">JS_LICE_ScaledBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void srcBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float alpha, String mode)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
<p>LICE modes: “COPY” (default if empty string), “MASK”, “ADD”, “DODGE”, “MUL”, “OVERLAY” or “HSVADJ”, any of which may be combined with “ALPHA” to enable per-pixel alpha blending.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="destBitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="dstx">

      </parameter>
      <parameter id="3" datatype="integer" parmname="dsty">

      </parameter>
      <parameter id="4" datatype="integer" parmname="dstw">

      </parameter>
      <parameter id="5" datatype="integer" parmname="dsth">

      </parameter>
      <parameter id="6" datatype="identifier" parmname="srcBitmap">

      </parameter>
      <parameter id="7" datatype="number" parmname="srcx">

      </parameter>
      <parameter id="8" datatype="number" parmname="srcy">

      </parameter>
      <parameter id="9" datatype="number" parmname="srcw">

      </parameter>
      <parameter id="10" datatype="number" parmname="srch">

      </parameter>
      <parameter id="11" datatype="number" parmname="alpha">

      </parameter>
      <parameter id="12" datatype="string" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_SetAlphaFromColorMask</slug>
    <functioncall prog_lang="cpp">void JS_LICE_SetAlphaFromColorMask(void* bitmap, int colorRGB)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_SetAlphaFromColorMask&quot;, void* bitmap, int colorRGB)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_SetAlphaFromColorMask(identifier bitmap, integer colorRGB)</functioncall>
    <functioncall prog_lang="python">JS_LICE_SetAlphaFromColorMask(void bitmap, Int colorRGB)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.988
      Lua=5.3
    </requires>
    <description>
<p>Sets all pixels that match the given color’s RGB values to fully transparent, and all other pixels to fully opaque. (All pixels’ RGB values remain unchanged.)</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="2" datatype="integer" parmname="colorRGB">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_SetFontBkColor</slug>
    <functioncall prog_lang="cpp">void JS_LICE_SetFontBkColor(void* LICEFont, int color)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_SetFontBkColor&quot;, void* LICEFont, int color)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_SetFontBkColor(identifier LICEFont, integer color)</functioncall>
    <functioncall prog_lang="python">JS_LICE_SetFontBkColor(void LICEFont, Int color)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="LICEFont">

      </parameter>
      <parameter id="2" datatype="integer" parmname="color">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_SetFontColor</slug>
    <functioncall prog_lang="cpp">void JS_LICE_SetFontColor(void* LICEFont, int color)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_SetFontColor&quot;, void* LICEFont, int color)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_SetFontColor(identifier LICEFont, integer color)</functioncall>
    <functioncall prog_lang="python">JS_LICE_SetFontColor(void LICEFont, Int color)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="LICEFont">

      </parameter>
      <parameter id="2" datatype="integer" parmname="color">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_SetFontFromGDI</slug>
    <functioncall prog_lang="cpp">void JS_LICE_SetFontFromGDI(void* LICEFont, void* GDIFont, const char* moreFormats)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_LICE_SetFontFromGDI&quot;, void* LICEFont, void* GDIFont, &quot;moreFormats&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_LICE_SetFontFromGDI(identifier LICEFont, identifier GDIFont, string moreFormats)</functioncall>
    <functioncall prog_lang="python">JS_LICE_SetFontFromGDI(void LICEFont, void GDIFont, String moreFormats)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Converts a GDI font into a LICE font.</p>
<pre><code>       The font can be modified by the following flags, in a comma-separated list:
       
       &amp;quot;VERTICAL&amp;quot;, &amp;quot;BOTTOMUP&amp;quot;, &amp;quot;NATIVE&amp;quot;, &amp;quot;BLUR&amp;quot;, &amp;quot;INVERT&amp;quot;, &amp;quot;MONO&amp;quot;, &amp;quot;SHADOW&amp;quot; or &amp;quot;OUTLINE&amp;quot;.</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="LICEFont">

      </parameter>
      <parameter id="2" datatype="identifier" parmname="GDIFont">

      </parameter>
      <parameter id="3" datatype="string" parmname="moreFormats">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_LICE_WritePNG</slug>
    <functioncall prog_lang="cpp">bool JS_LICE_WritePNG(const char* filename, void* bitmap, bool wantAlpha)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_LICE_WritePNG&quot;, &quot;filename&quot;, void* bitmap, bool wantAlpha)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.JS_LICE_WritePNG(string filename, identifier bitmap, boolean wantAlpha)</functioncall>
    <functioncall prog_lang="python">Boolean JS_LICE_WritePNG(String filename, void bitmap, Boolean wantAlpha)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="filename">

      </parameter>
      <parameter id="2" datatype="identifier" parmname="bitmap">

      </parameter>
      <parameter id="3" datatype="boolean" parmname="wantAlpha">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ListView_EnsureVisible</slug>
    <functioncall prog_lang="cpp">void JS_ListView_EnsureVisible(void* listviewHWND, int index, bool partialOK)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_ListView_EnsureVisible&quot;, void* listviewHWND, int index, bool partialOK)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_ListView_EnsureVisible(identifier listviewHWND, integer index, boolean partialOK)</functioncall>
    <functioncall prog_lang="python">JS_ListView_EnsureVisible(void listviewHWND, Int index, Boolean partialOK)</functioncall>
    <requires>
      Reaper=5.982
      JS=0.990
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="listviewHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="index">

      </parameter>
      <parameter id="3" datatype="boolean" parmname="partialOK">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Localize</slug>
    <functioncall prog_lang="cpp">void JS_Localize(const char* USEnglish, const char* LangPackSection, char* translationOut, int translationOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Localize&quot;, &quot;USEnglish&quot;, &quot;LangPackSection&quot;, #translation)</functioncall>
    <functioncall prog_lang="lua">string translation = reaper.JS_Localize(string USEnglish, string LangPackSection)</functioncall>
    <functioncall prog_lang="python">(String USEnglish, String LangPackSection, String translationOut, Int translationOut_sz) = JS_Localize(USEnglish, LangPackSection, translationOut, translationOut_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
<p>Returns the translation of the given US English text, according to the currently loaded Language Pack.</p>
<p>Parameters: * LangPackSection: Language Packs are divided into sections such as “common” or “DLG_102”. * In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.</p>
<p>Example: reaper.JS_Localize(“Actions”, “common”, "", 20)</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="translation">
the translated string, according to the currently used LangPack
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="USEnglish">
the original english string
      </parameter>
      <parameter id="2" datatype="string" parmname="LangPackSection">
the section in the Reaper-language-pack-file, in which the string is locate
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>JS_MIDIEditor_ArrayAll</slug>
    <functioncall prog_lang="cpp">void JS_MIDIEditor_ArrayAll(void* reaperarray)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_MIDIEditor_ArrayAll&quot;, void* reaperarray)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_MIDIEditor_ArrayAll(identifier reaperarray)</functioncall>
    <functioncall prog_lang="python">JS_MIDIEditor_ArrayAll(void reaperarray)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Returns the addresses of all open MIDI windows (whether docked or not).</p>
<p>* The addresses are stored in the provided reaper.array.</p>
<p>* Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="reaperarray">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_MIDIEditor_ListAll</slug>
    <functioncall prog_lang="cpp">void JS_MIDIEditor_ListAll(char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_MIDIEditor_ListAll&quot;, #buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.JS_MIDIEditor_ListAll(string buf)</functioncall>
    <functioncall prog_lang="python">(String buf, Int buf_sz) = JS_MIDIEditor_ListAll(buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Returns a list of HWNDs of all open MIDI windows (whether docked or not).</p>
<p>* The list is formatted as a comma-separated (and terminated) string of hexadecimal values.</p>
<p>* Each value is an address that can be converted to a HWND by the function JS_Window_HandleFromAddress.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string buf" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="buf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Mem_Alloc</slug>
    <functioncall prog_lang="cpp">void* JS_Mem_Alloc(int sizeBytes)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;JS_Mem_Alloc&quot;, int sizeBytes)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Mem_Alloc(integer sizeBytes)</functioncall>
    <functioncall prog_lang="python">void JS_Mem_Alloc(Int sizeBytes)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.971
      Lua=5.3
    </requires>
    <description>
<p>Allocates memory for general use by functions that require memory buffers.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="sizeBytes">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Mem_Free</slug>
    <functioncall prog_lang="cpp">void* JS_Mem_Alloc(int sizeBytes)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;JS_Mem_Alloc&quot;, int sizeBytes)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Mem_Alloc(integer sizeBytes)</functioncall>
    <functioncall prog_lang="python">Boolean JS_Mem_Free(void mallocPointer)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.971
      Lua=5.3
    </requires>
    <description>
<p>Frees memory that was previously allocated by JS_Mem_Alloc.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="sizeBytes">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Mem_FromString</slug>
    <functioncall prog_lang="cpp">bool JS_Mem_FromString(void* mallocPointer, int offset, const char* packedString, int stringLength)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_Mem_FromString&quot;, void* mallocPointer, int offset, &quot;packedString&quot;, int stringLength)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Mem_FromString(identifier mallocPointer, integer offset, string packedString, integer stringLength)</functioncall>
    <functioncall prog_lang="python">Boolean JS_Mem_FromString(void mallocPointer, Int offset, String packedString, Int stringLength)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.971
      Lua=5.3
    </requires>
    <description>
<p>Copies a packed string into a memory buffer.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="mallocPointer">

      </parameter>
      <parameter id="2" datatype="integer" parmname="offset">

      </parameter>
      <parameter id="3" datatype="string" parmname="packedString">

      </parameter>
      <parameter id="4" datatype="integer" parmname="stringLength">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Mouse_GetCursor</slug>
    <functioncall prog_lang="cpp">void* JS_Mouse_GetCursor()</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;JS_Mouse_GetCursor&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier = reaper.JS_Mouse_GetCursor()</functioncall>
    <functioncall prog_lang="python">void JS_Mouse_GetCursor()</functioncall>
    <requires>
      Reaper=5.965
      JS=0.988
      Lua=5.3
    </requires>
    <description>
<p>On Windows, retrieves a handle to the current mouse cursor. On Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Mouse_GetState</slug>
    <functioncall prog_lang="cpp">int JS_Mouse_GetState(int flags)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_Mouse_GetState&quot;, int flags)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_Mouse_GetState(integer flags)</functioncall>
    <functioncall prog_lang="python">Int  JS_Mouse_GetState(Int flags)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Retrieves the states of mouse buttons and modifiers keys.</p>
<pre><code>       Parameters:
       </code></pre>
<p>* flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. I.e., to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.</p>
<p>use -1 as flags to retrieve the states of all mouse-buttons and modifier</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="flags">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Mouse_LoadCursor</slug>
    <functioncall prog_lang="cpp">void* JS_Mouse_LoadCursor(int cursorNumber)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Mouse_LoadCursor&quot;, int cursorNumber)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Mouse_LoadCursor(integer cursorNumber)</functioncall>
    <functioncall prog_lang="python">void  JS_Mouse_LoadCursor(Int cursorNumber)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.964
      Lua=5.3
    </requires>
    <description>
<p>Loads a cursor by number.</p>
<pre><code>       cursorNumber: Same as used for gfx.setcursor, and includes some of Windows&#39; predefined cursors (with numbers &amp;amp;gt; 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER&#39;s own cursors (with numbers &amp;amp;lt; 2000). 
       
       If successful, returns a handle to the cursor, which can be used in [JS\_Mouse\_SetCursor](#JS_Mouse_SetCursor).</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="cursorNumber">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Mouse_LoadCursorFromFile</slug>
    <functioncall prog_lang="cpp">void* JS_Mouse_LoadCursorFromFile(const char* pathAndFileName, bool* forceNewLoad)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Mouse_LoadCursorFromFile&quot;, &quot;pathAndFileName&quot;, &lt;b&gt;unsupported&lt;/b&gt; forceNewLoad)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Mouse_LoadCursorFromFile(string pathAndFileName, &lt;b&gt;unsupported&lt;/b&gt; optional boolean forceNewLoad)</functioncall>
    <functioncall prog_lang="python">void  JS_Mouse_LoadCursorFromFile(String pathAndFileName, Boolean forceNewLoadOptional)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.964
      Lua=5.3
    </requires>
    <description>
<p>Loads a cursor from a .cur file.</p>
<p>If omitted or false, and if the .cur file has already been loaded previously during the REAPER session, the file will not be re-loaded, and the previous handle will be returned, thereby (slightly) improving speed and (slighty) lowering memory usage. If true, the file will be re-loaded and a new handle will be returned.</p>
<p>If successful, returns a handle to the cursor, which can be used in <a href="#JS_Mouse_SetCursor">JS_Mouse_SetCursor</a>. forceNewLoad is an optional boolean parameter:</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="pathAndFileName">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Mouse_SetCursor</slug>
    <functioncall prog_lang="cpp">void JS_Mouse_SetCursor(void* cursorHandle)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Mouse_SetCursor&quot;, void* cursorHandle)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Mouse_SetCursor(identifier cursorHandle)</functioncall>
    <functioncall prog_lang="python">JS_Mouse_SetCursor(void cursorHandle)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Sets the mouse cursor. (Only lasts while script is running, and for a single “defer” cycle.)</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="cursorHandle">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Mouse_SetPosition</slug>
    <functioncall prog_lang="cpp">bool JS_Mouse_SetPosition(int x, int y)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Mouse_SetPosition&quot;, int x, int y)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Mouse_SetPosition(integer x, integer y)</functioncall>
    <functioncall prog_lang="python">Boolean  JS_Mouse_SetPosition(Int x, Int y)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Moves the mouse cursor to the specified coordinates.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">

      </parameter>
      <parameter id="2" datatype="integer" parmname="y">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_PtrFromStr</slug>
    <functioncall prog_lang="cpp">void* JS_PtrFromStr(const char* s)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_PtrFromStr&quot;, &quot;s&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_PtrFromStr(string s)</functioncall>
    <functioncall prog_lang="python">void  JS_PtrFromStr(String s)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="s">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ReaScriptAPI_Version</slug>
    <functioncall prog_lang="cpp">void JS_ReaScriptAPI_Version(double* versionOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_ReaScriptAPI_Version&quot;, &amp;amp;version)</functioncall>
    <functioncall prog_lang="lua">number version = reaper.JS_ReaScriptAPI_Version()</functioncall>
    <functioncall prog_lang="python">(Float versionOut) JS_ReaScriptAPI_Version(versionOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Returns the version of the js_ReaScriptAPI extension.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number version" retvalname="">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_String</slug>
    <functioncall prog_lang="cpp">bool JS_String(void* pointer, int offset, int lengthChars, char* bufOutNeedBig, int bufOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_String&quot;, void* pointer, int offset, int lengthChars, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.JS_String(identifier pointer, integer offset, integer lengthChars)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, void pointer, Int offset, Int lengthChars, String bufOutNeedBig, Int bufOutNeedBig_sz) = JS_String(pointer, offset, lengthChars, bufOutNeedBig, bufOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.971
      Lua=5.3
    </requires>
    <description>
<p>Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="pointer">

      </parameter>
      <parameter id="2" datatype="integer" parmname="offset">

      </parameter>
      <parameter id="3" datatype="integer" parmname="lengthChars">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_VKeys_GetDown</slug>
    <functioncall prog_lang="cpp">void JS_VKeys_GetDown(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_VKeys_GetDown&quot;, cutoffTime, #state)</functioncall>
    <functioncall prog_lang="lua">string state = reaper.JS_VKeys_GetDown(number cutoffTime)</functioncall>
    <functioncall prog_lang="python">(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetDown(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.993
      Lua=5.3
    </requires>
    <description>
<p>Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.</p>
<p>Notes: * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead. * Auto-repeated KEYDOWN messages are ignored.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="state">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="number" parmname="cutoffTime">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_VKeys_ClearHistory</slug>
    <functioncall prog_lang="cpp">void JS_VKeys_ClearHistory()</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_VKeys_ClearHistory&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_VKeys_ClearHistory()</functioncall>
    <functioncall prog_lang="python">JS_VKeys_ClearHistory()</functioncall>
    <requires>
      Reaper=5.965
      JS=0.980
      Lua=5.3
    </requires>
    <description>
<p>deprecated</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_VKeys_GetHistory</slug>
    <functioncall prog_lang="cpp">bool JS_VKeys_GetHistory(char* stateOutNeedBig, int* stateOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_VKeys_GetHistory&quot;, #state)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string state = reaper.JS_VKeys_GetHistory()</functioncall>
    <functioncall prog_lang="python">(Boolean retval, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetHistory(stateOutNeedBig, stateOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.980
      Lua=5.3
    </requires>
    <description>
<p>deprecated</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="state">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_VKeys_GetState</slug>
    <functioncall prog_lang="cpp">bool JS_VKeys_GetState(char* stateOutNeedBig, int* stateOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_VKeys_GetState&quot;, #state)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string state = reaper.JS_VKeys_GetState()</functioncall>
    <functioncall prog_lang="python">(Boolean retval, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetState(stateOutNeedBig, stateOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.993
      Lua=5.3
    </requires>
    <description>
<p>Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.</p>
<p>cutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren’t properly followed by KEYUP.) If cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise(). If cutoffTime is negative, it is relative to the current time.</p>
<p>Notes: Notes: * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead. * Auto-repeated KEYDOWN messages are ignored.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="state">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_VKeys_GetUp</slug>
    <functioncall prog_lang="cpp">void JS_VKeys_GetUp(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_VKeys_GetUp&quot;, cutoffTime, #state)</functioncall>
    <functioncall prog_lang="lua">string state = reaper.JS_VKeys_GetUp(number cutoffTime)</functioncall>
    <functioncall prog_lang="python">(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetUp(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.986
      Lua=5.3
    </requires>
    <description>
<p>Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.</p>
<p>Note: Mouse buttons and modifier keys are not (currently) reliably detected, and <a href="#JS_Mouse_GetState">JS_Mouse_GetState</a> can be used instead.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="state">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="number" parmname="cutoffTime">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_VKeys_Intercept</slug>
    <functioncall prog_lang="cpp">int JS_VKeys_Intercept(int keyCode, int intercept)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_VKeys_Intercept&quot;, int keyCode, int intercept)</functioncall>
    <functioncall prog_lang="lua">integer retval = reaper.JS_VKeys_Intercept(integer keyCode, integer intercept)</functioncall>
    <functioncall prog_lang="python">Int JS_VKeys_Intercept(Int keyCode, Int intercept)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.980
      Lua=5.3
    </requires>
    <description>
<p>Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh: Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.</p>
<p>keyCode: The virtual key code of the key, or -1 to change the state of all keys.</p>
<p>intercept: A script can increase the intercept state by passing +1, or lower the state by passing -1. Multiple scripts can block the same key, and the intercept state may reach up to 255. If zero is passed, the intercept state is not changed, but the current state is returned.</p>
<p>Returns: If keyCode refers to a single key, the intercept state of that key is returned. If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="keyCode">

      </parameter>
      <parameter id="2" datatype="integer" parmname="intercept">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_Intercept</slug>
    <functioncall prog_lang="cpp">int JS_WindowMessage_Intercept(void* windowHWND, const char* messages, bool passThrough)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_WindowMessage_Intercept&quot;, void* windowHWND, &quot;messages&quot;, bool passThrough)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_Intercept(identifier windowHWND, string messages, boolean passThrough)</functioncall>
    <functioncall prog_lang="python">Int  JS_WindowMessage_Intercept(void windowHWND, String messages, Boolean passThrough)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.980
      Lua=5.3
    </requires>
    <description>
Intercepts window messages to specified window.<br/>
<br/>
Parameters:<br/>
<br/>
 * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example &quot;WM_SETCURSOR&quot; or &quot;0x0020&quot;.<br/>
<br/>
 * passThrough: Whether message should be blocked (false) or passed through (true) to the window.<br/>
<br/>
    For more information on message codes, refer to the Win32 C++ API documentation.<br/>
<br/>
    For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.<br/>
<br/>
<br/>
<br/>
Returns:<br/>
<br/>
 * 1: Success.<br/>
<br/>
 * 0: The message type is already being intercepted by another script.<br/>
<br/>
 * -2: message string could not be parsed.<br/>
<br/>
 * -3: Failure getting original window process / window not valid.<br/>
<br/>
 * -6: Could not obtain the window client HDC.<br/>
<br/>
<br/>
Notes:<br/>
<br/>
 * Intercepted messages can be polled using JS_WindowMessage_Peek.<br/>
<br/>
 * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.<br/>
<br/>
 * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.<br/>
<br/>
 * Mouse events are typically received by the child window under the mouse, not the parent window.<br/>
 <br/>
 Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="messages">

      </parameter>
      <parameter id="3" datatype="boolean" parmname="passThrough">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_InterceptList</slug>
    <functioncall prog_lang="cpp">int JS_WindowMessage_InterceptList(void* windowHWND, const char* messages)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_WindowMessage_InterceptList&quot;, void* windowHWND, &quot;messages&quot;)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_InterceptList(identifier windowHWND, string messages)</functioncall>
    <functioncall prog_lang="python">Int  JS_WindowMessage_InterceptList(void windowHWND, String messages)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.980
      Lua=5.3
    </requires>
    <description>
Intercepts window messages to specified window.<br/>
           <br/>
           <br/>
           <br/>
           Parameters:<br/>
           <br/>
* messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a &quot;block&quot; or &quot;passthrough&quot; modifier to specify whether the message should be blocked or passed through to the window. For example &quot;WM_SETCURSOR:block, 0x0201:passthrough&quot;.<br/>
           <br/>
   For more information on message codes, refer to the Win32 C++ API documentation.<br/>
           <br/>
   For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.<br/>
           <br/>
           <br/>
           <br/>
           Returns:<br/>
           <br/>
* 1: Success.<br/>
           <br/>
* 0: The message type is already being intercepted by another script.<br/>
           <br/>
* -1: windowHWND is not a valid window.<br/>
           <br/>
* -2: message string could not be parsed.<br/>
           <br/>
* -3: Failure getting original window process.<br/>
           <br/>
* -6: Could not obtain the window client HDC.<br/>
           <br/>
           Notes:<br/>
           <br/>
* Intercepted messages can be polled using JS_WindowMessage_Peek.<br/>
           <br/>
* Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.<br/>
           <br/>
* To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="messages">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_ListIntercepts</slug>
    <functioncall prog_lang="cpp">bool JS_WindowMessage_ListIntercepts(void* windowHWND, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_WindowMessage_ListIntercepts&quot;, void* windowHWND, #buf)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string buf = reaper.JS_WindowMessage_ListIntercepts(identifier windowHWND, string buf)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, void windowHWND, String buf, Int buf_sz) = JS_WindowMessage_ListIntercepts(windowHWND, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Returns a string with a list of all message types currently being intercepted for the specified window.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string buf" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="buf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_PassThrough</slug>
    <functioncall prog_lang="cpp">int JS_WindowMessage_PassThrough(void* windowHWND, const char* message, bool passThrough)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_WindowMessage_PassThrough&quot;, void* windowHWND, &quot;message&quot;, bool passThrough)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_PassThrough(identifier windowHWND, string message, boolean passThrough)</functioncall>
    <functioncall prog_lang="python">Int  JS_WindowMessage_PassThrough(void windowHWND, String message, Boolean passThrough)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Changes the passthrough setting of a message type that is already being intercepted.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="message">

      </parameter>
      <parameter id="3" datatype="boolean" parmname="passThrough">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_Peek</slug>
    <functioncall prog_lang="cpp">bool JS_WindowMessage_Peek(void* windowHWND, const char* message, bool* passedThroughOut, double* timeOut, int* wParamLowOut, int* wParamHighOut, int* lParamLowOut, int* lParamHighOut)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_WindowMessage_Peek&quot;, void* windowHWND, &quot;message&quot;, bool &amp;amp;passedThrough, &amp;amp;time, int &amp;amp;wParamLow, int &amp;amp;wParamHigh, int &amp;amp;lParamLow, int &amp;amp;lParamHigh)</functioncall>
    <functioncall prog_lang="lua">boolean retval, boolean passedThrough, number time, number wParamLow, number wParamHigh, number lParamLow, number lParamHigh = reaper.JS_WindowMessage_Peek(identifier windowHWND, string message)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, void windowHWND, String message, Boolean passedThroughOut, Float timeOut, Int wParamLowOut, Int wParamHighOut, Int lParamLowOut, Int lParamHighOut) = JS_WindowMessage_Peek(windowHWND, message, passedThroughOut, timeOut, wParamLowOut, wParamHighOut, lParamLowOut, lParamHighOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
Polls the state of an intercepted message.<br/>
           <br/>
           <br/>
           <br/>
           Parameters:<br/>
           <br/>
* message: String containing a single message name, such as &quot;WM_SETCURSOR&quot;, or in hexadecimal format, &quot;0x0020&quot;.<br/>
           <br/>
(For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.)<br/>
           <br/>
           <br/>
           <br/>
           Returns:<br/>
           <br/>
* A retval of false indicates that the message type is not being intercepted in the specified window.<br/>
           <br/>
* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.<br/>
           <br/>
* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.<br/>
           <br/>
* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.<br/>
           <br/>
* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="boolean" retvalname="passedThrough">

      </retval>
      <retval id="3" datatype="number" retvalname="time">

      </retval>
      <retval id="4" datatype="number" retvalname="wParamLow">

      </retval>
      <retval id="5" datatype="number" retvalname="wParamHigh">

      </retval>
      <retval id="6" datatype="number" retvalname="lParamLow">

      </retval>
      <retval id="7" datatype="number lParamHigh" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="message">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_Post</slug>
    <functioncall prog_lang="cpp">bool JS_WindowMessage_Post(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_WindowMessage_Post&quot;, void* windowHWND, &quot;message&quot;, wParam, int wParamHighWord, lParam, int lParamHighWord)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.JS_WindowMessage_Post(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)</functioncall>
    <functioncall prog_lang="python">Boolean JS_WindowMessage_Post(void windowHWND, String message, Float wParam, Int wParamHighWord, Float lParam, Int lParamHighWord)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
Posts a message in the message queue associated with the thread that created the specified window, and returns without waiting.<br/>
<br/>
Parameters:<br/>
* message: String containing a single message name, such as &quot;WM_SETCURSOR&quot;, or in hexadecimal format, &quot;0x0020&quot;.<br/>
(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)<br/>
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.<br/>
(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)<br/>
<br/>
Notes:<br/>
* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.<br/>
* Messages should only be sent to windows that were created from the main thread.<br/>
* The message will be sent directly to the window, skipping interception by scripts.<br/>
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="message">

      </parameter>
      <parameter id="3" datatype="number" parmname="wParam">

      </parameter>
      <parameter id="4" datatype="integer" parmname="wParamHighWord">

      </parameter>
      <parameter id="5" datatype="number" parmname="lParam">

      </parameter>
      <parameter id="6" datatype="integer" parmname="lParamHighWord">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_Release</slug>
    <functioncall prog_lang="cpp">int JS_WindowMessage_Release(void* windowHWND, const char* messages)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;JS_WindowMessage_Release&quot;, void* windowHWND, &quot;messages&quot;)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_Release(identifier windowHWND, string messages)</functioncall>
    <functioncall prog_lang="python">Int  JS_WindowMessage_Release(void windowHWND, String messages)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
Release intercepts of specified message types.<br/>
           <br/>
           Parameters:<br/>
           <br/>
* messages: &quot;WM_SETCURSOR,WM_MOUSEHWHEEL&quot; or &quot;0x0020,0x020E&quot;, for example.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="messages">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_ReleaseAll</slug>
    <functioncall prog_lang="cpp">void JS_WindowMessage_ReleaseAll()</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_WindowMessage_ReleaseAll&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_WindowMessage_ReleaseAll()</functioncall>
    <functioncall prog_lang="python">JS_WindowMessage_ReleaseAll()</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Release script intercepts of window messages for all windows.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_ReleaseWindow</slug>
    <functioncall prog_lang="cpp">void JS_WindowMessage_ReleaseWindow(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_WindowMessage_ReleaseWindow&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_WindowMessage_ReleaseWindow(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">JS_WindowMessage_ReleaseWindow(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Release script intercepts of window messages for specified window.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_WindowMessage_Send</slug>
    <functioncall prog_lang="cpp">int JS_WindowMessage_Send(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_WindowMessage_Send&quot;, void* windowHWND, &quot;message&quot;, wParam, int wParamHighWord, lParam, int lParamHighWord)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_WindowMessage_Send(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)</functioncall>
    <functioncall prog_lang="python">Int JS_WindowMessage_Send(void windowHWND, String message, Float wParam, Int wParamHighWord, Float lParam, Int lParamHighWord)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
Sends a message to the specified window, and returns after the message has been processed.<br/>
<br/>
 Parameters:<br/>
 * message: String containing a single message name, such as &quot;WM_SETCURSOR&quot;, or in hexadecimal format, &quot;0x0020&quot;.<br/>
 (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)<br/>
 * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.<br/>
 (Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)<br/>
<br/>
 Notes:<br/>
 * For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.<br/>
 * Messages should only be sent to windows that were created from the main thread.<br/>
 * The message will be sent directly to the window, skipping interception by scripts.<br/>
 * Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="message">

      </parameter>
      <parameter id="3" datatype="number" parmname="wParam">

      </parameter>
      <parameter id="4" datatype="integer" parmname="wParamHighWord">

      </parameter>
      <parameter id="5" datatype="number" parmname="lParam">

      </parameter>
      <parameter id="6" datatype="integer" parmname="lParamHighWord">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_AddressFromHandle</slug>
    <functioncall prog_lang="cpp">void JS_Window_AddressFromHandle(void* handle, double* addressOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_AddressFromHandle&quot;, void* handle, &amp;amp;address)</functioncall>
    <functioncall prog_lang="lua">number address = reaper.JS_Window_AddressFromHandle(identifier handle)</functioncall>
    <functioncall prog_lang="python">(void handle, Float addressOut) = JS_Window_AddressFromHandle(handle, addressOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number address" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="handle">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_ArrayAllChild</slug>
    <functioncall prog_lang="cpp">void JS_Window_ArrayAllChild(void* parentHWND, void* reaperarray)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_ArrayAllChild&quot;, void* parentHWND, void* reaperarray)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_ArrayAllChild(identifier parentHWND, identifier reaperarray)</functioncall>
    <functioncall prog_lang="python">JS_Window_ArrayAllChild(void parentHWND, void reaperarray)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
Returns all child windows of the specified parent.<br/>
           <br/>
           <br/>
           <br/>
           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="parentHWND">

      </parameter>
      <parameter id="2" datatype="identifier" parmname="reaperarray">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_ArrayAllTop</slug>
    <functioncall prog_lang="cpp">void JS_Window_ArrayAllTop(void* reaperarray)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_ArrayAllTop&quot;, void* reaperarray)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_ArrayAllTop(identifier reaperarray)</functioncall>
    <functioncall prog_lang="python">JS_Window_ArrayAllTop(void reaperarray)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
Returns all top-level windows.<br/>
           <br/>
           <br/>
           <br/>
           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="reaperarray">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_ArrayFind</slug>
    <functioncall prog_lang="cpp">void JS_Window_ArrayFind(const char* title, bool exact, void* reaperarray)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_ArrayFind&quot;, &quot;title&quot;, bool exact, void* reaperarray)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_ArrayFind(string title, boolean exact, identifier reaperarray)</functioncall>
    <functioncall prog_lang="python">JS_Window_ArrayFind(String title, Boolean exact, void reaperarray)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
Returns all windows, whether top-level or child, whose titles match the specified string.<br/>
           <br/>
           <br/>
           <br/>
           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.<br/>
           <br/>
           <br/>
           <br/>
           Parameters: * exact: Match entire title exactly, or match substring of title.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="string" parmname="title">

      </parameter>
      <parameter id="2" datatype="boolean" parmname="exact">

      </parameter>
      <parameter id="3" datatype="identifier" parmname="reaperarray">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_AttachResizeGrip</slug>
    <functioncall prog_lang="cpp">void JS_Window_AttachResizeGrip(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_AttachResizeGrip&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_AttachResizeGrip(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">JS_Window_AttachResizeGrip(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>JS_Window_AttachTopmostPin</slug>
    <functioncall prog_lang="cpp">void* JS_Window_AttachTopmostPin(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">void extension_api(&quot;JS_Window_AttachTopmostPin&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">identifier HWND = reaper.JS_Window_AttachTopmostPin(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">void JS_Window_AttachTopmostPin(void windowHWND)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.988
      Lua=5.3
    </requires>
    <description>
<p>Attaches a “pin on top” button to the window frame. The button should remember its state when closing and re-opening the window.</p>
<p>WARNING: This function does not yet work on Linux.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="HWND">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_ClientToScreen</slug>
    <functioncall prog_lang="cpp">void JS_Window_ClientToScreen(void* windowHWND, int x, int y, int* xOut, int* yOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_ClientToScreen&quot;, void* windowHWND, int x, int y, int &amp;amp;x, int &amp;amp;y)</functioncall>
    <functioncall prog_lang="lua">number x, number y = reaper.JS_Window_ClientToScreen(identifier windowHWND, integer x, integer y)</functioncall>
    <functioncall prog_lang="python">(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ClientToScreen(windowHWND, x, y, xOut, yOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Converts the client-area coordinates of a specified point to screen coordinates.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="x">

      </retval>
      <retval id="2" datatype="number y" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_Create</slug>
    <functioncall prog_lang="cpp">void* JS_Window_Create(const char* title, const char* className, int x, int y, int w, int h, char* styleOptional, void* ownerHWNDOptional)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;JS_Window_Create&quot;, &quot;title&quot;, &quot;className&quot;, int x, int y, int w, int h, optional #style, void* ownerHWND)</functioncall>
    <functioncall prog_lang="lua">identifier retval, optional string style = reaper.JS_Window_Create(string title, string className, integer x, integer y, integer w, integer h, optional string style, identifier ownerHWND)</functioncall>
    <functioncall prog_lang="python">(void retval, String title, String className, Int x, Int y, Int w, Int h, String styleOptional, void ownerHWNDOptional) = JS_Window_Create(title, className, x, y, w, h, styleOptional, ownerHWNDOptional)</functioncall>
    <requires>
      Reaper=5.982
      JS=0.991
      Lua=5.3
    </requires>
    <description>
<p>Creates a modeless window with WS_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS_Window_InvalidateRect to trigger re-painting).</p>
<p>style: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as “POPUP” for a frameless window, or “CAPTION,SIZEBOX,SYSMENU” for a standard framed window.</p>
<p>On Linux and macOS, “MAXIMIZE” has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.</p>
<p>ownerHWND: Optional parameter, only available on WindowsOS. Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.</p>
<p>NOTE: On Linux and macOS, the window contents are only updated *between* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="retval">

      </retval>
      <retval id="2" datatype="optional string" retvalname="style">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="title">

      </parameter>
      <parameter id="2" datatype="string" parmname="className">

      </parameter>
      <parameter id="3" datatype="integer" parmname="x">

      </parameter>
      <parameter id="4" datatype="integer" parmname="y">

      </parameter>
      <parameter id="5" datatype="integer" parmname="w">

      </parameter>
      <parameter id="6" datatype="integer" parmname="h">

      </parameter>
      <parameter id="7" datatype="optional string" parmname="style">

      </parameter>
      <parameter id="8" datatype="identifier" parmname="ownerHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_Destroy</slug>
    <functioncall prog_lang="cpp">void JS_Window_Destroy(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_Destroy&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_Destroy(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">JS_Window_Destroy(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Destroys the specified window.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_Enable</slug>
    <functioncall prog_lang="cpp">void JS_Window_Enable(void* windowHWND, bool enable)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_Enable&quot;, void* windowHWND, bool enable)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_Enable(identifier windowHWND, boolean enable)</functioncall>
    <functioncall prog_lang="python">JS_Window_Enable(void windowHWND, Boolean enable)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Enables or disables mouse and keyboard input to the specified window or control.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="boolean" parmname="enable">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_Find</slug>
    <functioncall prog_lang="cpp">void* JS_Window_Find(const char* title, bool exact)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Window_Find&quot;, &quot;title&quot;, bool exact)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_Find(string title, boolean exact)</functioncall>
    <functioncall prog_lang="python">void  JS_Window_Find(String title, Boolean exact)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.989
      Lua=5.3
    </requires>
    <description>
<p>Returns a HWND to a window whose title matches the specified string. * Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state. * In addition, the function can optionally match substrings of the title. * Matching is not case sensitive.</p>
<p>Parameters: * exact: Match entire title, or match substring of title.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">
the identifier of the found window, or nil
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="title">
the title of the window to find
      </parameter>
      <parameter id="2" datatype="boolean" parmname="exact">
true, title must match exactly the name of the window; false, title can only partially match the windowtitle 
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_FindChild</slug>
    <functioncall prog_lang="cpp">void* JS_Window_FindChild(void* parentHWND, const char* title, bool exact)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Window_FindChild&quot;, void* parentHWND, &quot;title&quot;, bool exact)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_FindChild(identifier parentHWND, string title, boolean exact)</functioncall>
    <functioncall prog_lang="python">void  JS_Window_FindChild(void parentHWND, String title, Boolean exact)</functioncall>
    <requires>
      Reaper=5.982
      JS=0.990
      Lua=5.3
    </requires>
    <description>
<p>Returns a HWND to a child window whose title matches the specified string.</p>
<p>Parameters:</p>
<p>* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">
the identifier for the window found; nil, if no such window found
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="parentHWND">
the identifier of the parent window to the child-window
      </parameter>
      <parameter id="2" datatype="string" parmname="title">
the title of the child-window to find
      </parameter>
      <parameter id="3" datatype="boolean" parmname="exact">
true, title must match exactly the name of the window; false, title can only partially match the windowtitle 
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_FindChildByID</slug>
    <functioncall prog_lang="cpp">void* JS_Window_FindChildByID(void* parentHWND, int ID)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;JS_Window_FindChildByID&quot;, void* parentHWND, int ID)</functioncall>
    <functioncall prog_lang="lua">identifier HWND = reaper.JS_Window_FindChildByID(identifier parentHWND, integer ID)</functioncall>
    <functioncall prog_lang="python">void JS_Window_FindChildByID(void parentHWND, Int ID)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
<p>Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.</p>
<p>(The ID of a window may be retrieved by JS_Window_GetLongPtr.)</p>
<p>For instance: with Reaper’s <a href="#GetMainHwnd">MainHWND</a>, you can get: 0: Transport(Windows)/MainHWND(Mac) 999: project-tabs(if existing, otherwise will be nil) 1000: trackview 1005: timeline 1259: Mouse editing help in the area beneath the track control panels</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="HWND">
the HWND of the window, that the function found
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="parentHWND">
the parent HWND, whose child-HWNDs you want to search through
      </parameter>
      <parameter id="2" datatype="integer" parmname="ID">
the ID of the childHWND
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_FindEx</slug>
    <functioncall prog_lang="cpp">void* JS_Window_FindEx(void* parentHWND, void* childHWND, const char* className, const char* title)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;JS_Window_FindEx&quot;, void* parentHWND, void* childHWND, &quot;className&quot;, &quot;title&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier HWND - reaper.JS_Window_FindEx(identifier parentHWND, identifier childHWND, string className, string title)</functioncall>
    <functioncall prog_lang="python">void JS_Window_FindEx(void parentHWND, void childHWND, String className, String title)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.964
      Lua=5.3
    </requires>
    <description>
<p>Returns a handle to a child window whose class and title match the specified strings.</p>
<p>Parameters: * childWindow: The function searches child windows, beginning with the window <em>after</em> the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND. * title: An empty string, "", will match all windows. (Search is not case sensitive.)</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="HWND">
the found window; nil, if no window has been found
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="parentHWND">
the parent hwnd of the child-window to find
      </parameter>
      <parameter id="2" datatype="identifier" parmname="childHWND">
the parent child-window of the window to find; set it to parentHWND to search beginning with the first childhwnd of the parenthwnd
      </parameter>
      <parameter id="3" datatype="string" parmname="className">
the name of the class of the child-window, that you want to find
      </parameter>
      <parameter id="4" datatype="string" parmname="title">
the title of the child-window to find
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_FindTop</slug>
    <functioncall prog_lang="cpp">void* JS_Window_FindTop(const char* title, bool exact)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;JS_Window_FindTop&quot;, &quot;title&quot;, bool exact)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_FindTop(string title, boolean exact)</functioncall>
    <functioncall prog_lang="python">void JS_Window_FindTop(String title, Boolean exact)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.989
      Lua=5.3
    </requires>
    <description>
<p>Returns a HWND to a top-level window whose title matches the specified string.</p>
<p>Parameters: * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="HWND">
the found identifier of the window; nil, if not found
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="title">
the title of the top-level window to find
      </parameter>
      <parameter id="2" datatype="boolean" parmname="exact">
true, title must match exactly the name of the window; false, title can only partially match the windowtitle 
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_FromPoint</slug>
    <functioncall prog_lang="cpp">void* JS_Window_FromPoint(int x, int y)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Window_FromPoint&quot;, int x, int y)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_FromPoint(integer x, integer y)</functioncall>
    <functioncall prog_lang="python">void  JS_Window_FromPoint(Int x, Int y)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Retrieves a HWND to the window that contains the specified point.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">
the window found at the coordinates
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
the x-position in pixels, at which to find the window
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
the y-position in pixels, at which to find the window
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetClassName</slug>
    <functioncall prog_lang="cpp">void JS_Window_GetClassName(void* windowHWND, char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_GetClassName&quot;, void* windowHWND, #buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.JS_Window_GetClassName(identifier windowHWND, string buf)</functioncall>
    <functioncall prog_lang="python">(void windowHWND, String buf, Int buf_sz) = JS_Window_GetClassName(windowHWND, buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>WARNING: May not be fully implemented on MacOS and Linux.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string buf" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="buf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetClientRect</slug>
    <functioncall prog_lang="cpp">bool JS_Window_GetClientRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Window_GetClientRect&quot;, void* windowHWND, int &amp;amp;left, int &amp;amp;top, int &amp;amp;right, int &amp;amp;bottom)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number left, number top, number right, number bottom = reaper.JS_Window_GetClientRect(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetClientRect(windowHWND, leftOut, topOut, rightOut, bottomOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Retrieves the coordinates of the client area rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.</p>
<pre><code>       NOTE 1: Unlike the C++ function GetClientRect, this function returns the actual coordinates, not the width and height.
       
       NOTE 2: The pixel at (right, bottom) lies immediately outside the rectangle.</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="number" retvalname="left">

      </retval>
      <retval id="3" datatype="number" retvalname="top">

      </retval>
      <retval id="4" datatype="number" retvalname="right">

      </retval>
      <retval id="5" datatype="number bottom" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetFocus</slug>
    <functioncall prog_lang="cpp">void* JS_Window_GetFocus()</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Window_GetFocus&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_GetFocus()</functioncall>
    <functioncall prog_lang="python">void  JS_Window_GetFocus()</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread’s message queue.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetForeground</slug>
    <functioncall prog_lang="cpp">void* JS_Window_GetForeground()</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Window_GetForeground&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_GetForeground()</functioncall>
    <functioncall prog_lang="python">void  JS_Window_GetForeground()</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Retrieves a HWND to the foreground window (the window with which the user is currently working).</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetLongPtr</slug>
    <functioncall prog_lang="cpp">void* JS_Window_GetLongPtr(void* windowHWND, const char* info)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Window_GetLongPtr&quot;, void* windowHWND, &quot;info&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_GetLongPtr(identifier windowHWND, string info)</functioncall>
    <functioncall prog_lang="python">void  JS_Window_GetLongPtr(void windowHWND, String info)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Returns information about the specified window.</p>
<pre><code>       info: &amp;quot;USERDATA&amp;quot;, &amp;quot;WNDPROC&amp;quot;, &amp;quot;DLGPROC&amp;quot;, &amp;quot;ID&amp;quot;, &amp;quot;EXSTYLE&amp;quot; or &amp;quot;STYLE&amp;quot;.
       
       
       
       For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="info">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetParent</slug>
    <functioncall prog_lang="cpp">void* JS_Window_GetParent(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Window_GetParent&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_GetParent(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">void  JS_Window_GetParent(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Retrieves a HWND to the specified window’s parent or owner.</p>
<pre><code>       Returns NULL if the window is unowned or if the function otherwise fails.</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetRect</slug>
    <functioncall prog_lang="cpp">bool JS_Window_GetRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Window_GetRect&quot;, void* windowHWND, int &amp;amp;left, int &amp;amp;top, int &amp;amp;right, int &amp;amp;bottom)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number left, number top, number right, number bottom = reaper.JS_Window_GetRect(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetRect(windowHWND, leftOut, topOut, rightOut, bottomOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Retrieves the coordinates of the bounding rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.</p>
<pre><code>       NOTE: The pixel at (right, bottom) lies immediately outside the rectangle.</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="number" retvalname="left">

      </retval>
      <retval id="3" datatype="number" retvalname="top">

      </retval>
      <retval id="4" datatype="number" retvalname="right">

      </retval>
      <retval id="5" datatype="number bottom" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetRelated</slug>
    <functioncall prog_lang="cpp">void* JS_Window_GetRelated(void* windowHWND, const char* relation)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Window_GetRelated&quot;, void* windowHWND, &quot;relation&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_GetRelated(identifier windowHWND, string relation)</functioncall>
    <functioncall prog_lang="python">void  JS_Window_GetRelated(void windowHWND, String relation)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.</p>
<pre><code>       relation: &amp;quot;LAST&amp;quot;, &amp;quot;NEXT&amp;quot;, &amp;quot;PREV&amp;quot;, &amp;quot;OWNER&amp;quot; or &amp;quot;CHILD&amp;quot;.
       
       (Refer to documentation for Win32 C++ function GetWindow.)</code></pre>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="relation">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetScrollInfo</slug>
    <functioncall prog_lang="cpp">bool JS_Window_GetScrollInfo(void* windowHWND, const char* scrollbar, int* positionOut, int* pageSizeOut, int* minOut, int* maxOut, int* trackPosOut)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Window_GetScrollInfo&quot;, void* windowHWND, &quot;scrollbar&quot;, int &amp;amp;position, int &amp;amp;pageSize, int &amp;amp;min, int &amp;amp;max, int &amp;amp;trackPos)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number position, number pageSize, number min, number max, number trackPos = reaper.JS_Window_GetScrollInfo(identifier windowHWND, string scrollbar)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, void windowHWND, String scrollbar, Int positionOut, Int pageSizeOut, Int minOut, Int maxOut, Int trackPosOut) = JS_Window_GetScrollInfo(windowHWND, scrollbar, positionOut, pageSizeOut, minOut, maxOut, trackPosOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Retrieves the scroll information of a window.</p>
<pre><code>       Parameters:
       </code></pre>
<p>* scrollbar: “v” (or “SB_VERT”, or “VERT”) for vertical scroll, “h” (or “SB_HORZ” or “HORZ”) for horizontal.</p>
<pre><code>       Returns:
       </code></pre>
<p>* Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="number" retvalname="position">

      </retval>
      <retval id="3" datatype="number" retvalname="pageSize">

      </retval>
      <retval id="4" datatype="number" retvalname="min">

      </retval>
      <retval id="5" datatype="number" retvalname="max">

      </retval>
      <retval id="6" datatype="number trackPos" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="scrollbar">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetTitle</slug>
    <functioncall prog_lang="cpp">void JS_Window_GetTitle(void* windowHWND, char* titleOut, int titleOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_GetTitle&quot;, void* windowHWND, #title)</functioncall>
    <functioncall prog_lang="lua">string title = reaper.JS_Window_GetTitle(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">(void windowHWND, String titleOut, Int titleOut_sz) = JS_Window_GetTitle(windowHWND, titleOut, titleOut_sz)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.992
      Lua=5.3
    </requires>
    <description>
<p>Returns the title (if any) of the specified window.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="title">
the title of the window
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">
the hwnd of the window, whose title you want to retrieve
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_GetViewportFromRect</slug>
    <functioncall prog_lang="cpp">void JS_Window_GetViewportFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_GetViewportFromRect&quot;, int x1, int y1, int x2, int y2, bool wantWork, int &amp;left, int &amp;top, int &amp;right, int &amp;bottom)</functioncall>
    <functioncall prog_lang="lua">number left, number top, number right, number bottom = reaper.JS_Window_GetViewportFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)</functioncall>
    <functioncall prog_lang="python">(Int x1, Int y1, Int x2, Int y2, Boolean wantWork, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetViewportFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.980
      Lua=5.3
    </requires>
    <description>
<p>Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.</p>
<p>If the monitor is not the primary display, some of the rectangle’s coordinates may be negative.</p>
<p>wantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="left">

      </retval>
      <retval id="2" datatype="number" retvalname="top">

      </retval>
      <retval id="3" datatype="number" retvalname="right">

      </retval>
      <retval id="4" datatype="number" retvalname="bottom">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x1">

      </parameter>
      <parameter id="2" datatype="integer" parmname="y1">

      </parameter>
      <parameter id="3" datatype="integer" parmname="x2">

      </parameter>
      <parameter id="4" datatype="integer" parmname="y2">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="wantWork">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_HandleFromAddress</slug>
    <functioncall prog_lang="cpp">void* JS_Window_HandleFromAddress(double address)</functioncall>
    <functioncall prog_lang="eel">void*  extension_api(&quot;JS_Window_HandleFromAddress&quot;, address)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.JS_Window_HandleFromAddress(number address)</functioncall>
    <functioncall prog_lang="python">void  JS_Window_HandleFromAddress(Float address)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier " retvalname="identifier ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="number" parmname="address">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_InvalidateRect</slug>
    <functioncall prog_lang="cpp">bool JS_Window_InvalidateRect(void* windowHWND, int left, int top, int right, int bottom, bool eraseBackground)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_Window_InvalidateRect&quot;, void* windowHWND, int left, int top, int right, int bottom, bool eraseBackground)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_InvalidateRect(identifier windowHWND, integer left, integer top, integer right, integer bottom, boolean eraseBackground)</functioncall>
    <functioncall prog_lang="python">Boolean JS_Window_InvalidateRect(void windowHWND, Int left, Int top, Int right, Int bottom, Boolean eraseBackground)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.980
      Lua=5.3
    </requires>
    <description>
<p>Similar to the Win32 function InvalidateRect.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="left">

      </parameter>
      <parameter id="3" datatype="integer" parmname="top">

      </parameter>
      <parameter id="4" datatype="integer" parmname="right">

      </parameter>
      <parameter id="5" datatype="integer" parmname="bottom">

      </parameter>
      <parameter id="6" datatype="boolean" parmname="eraseBackground">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_IsChild</slug>
    <functioncall prog_lang="cpp">bool JS_Window_IsChild(void* parentHWND, void* childHWND)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Window_IsChild&quot;, void* parentHWND, void* childHWND)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Window_IsChild(identifier parentHWND, identifier childHWND)</functioncall>
    <functioncall prog_lang="python">Boolean  JS_Window_IsChild(void parentHWND, void childHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Determines whether a window is a child window or descendant window of a specified parent window.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="parentHWND">

      </parameter>
      <parameter id="2" datatype="identifier" parmname="childHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_IsVisible</slug>
    <functioncall prog_lang="cpp">bool JS_Window_IsVisible(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Window_IsVisible&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Window_IsVisible(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">Boolean  JS_Window_IsVisible(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Determines the visibility state of the window.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_IsWindow</slug>
    <functioncall prog_lang="cpp">bool JS_Window_IsWindow(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Window_IsWindow&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Window_IsWindow(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">Boolean  JS_Window_IsWindow(void windowHWND)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.971
      Lua=5.3
    </requires>
    <description>
<p>DEPRECATED: Since REAPER v5.974, windows can be checked using the native function <a href="#ValidatePtr">ValidatePtr</a>(windowHWND, “HWND”).</p>
<p>Determines whether the specified window handle identifies an existing window.</p>
<p>On macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).</p>
<p>WARNING! On MacOS and Linux, REAPER WILL CRASH if the handle passed to a <a href="#JS_Window">JS_Window</a> or <a href="#JS_WindowMessage">JS_WindowMessage</a> function does not refer to an existing window.</p>
<p>The IsWindow function is slower on macOS and Linux. Preferably use native functions such as <a href="#MIDIEditor_GetMode">MIDIEditor_GetMode</a> to test handles.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_ListAllChild</slug>
    <functioncall prog_lang="cpp">int JS_Window_ListAllChild(void* parentHWND, char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_Window_ListAllChild&quot;, void* parentHWND, #list)</functioncall>
    <functioncall prog_lang="lua">integer retval, string list = reaper.JS_Window_ListAllChild(identifier parentHWND)</functioncall>
    <functioncall prog_lang="python">(Int retval, void parentHWND, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListAllChild(parentHWND, listOutNeedBig, listOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
<p>Finds all child windows of the specified parent.</p>
<p>Returns: * retval: The number of windows found; negative if an error occurred. * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function JS_Window_HandleFromAddress.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="list">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="parentHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_ListAllTop</slug>
    <functioncall prog_lang="cpp">int JS_Window_ListAllTop(char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_Window_ListAllTop&quot;, #list)</functioncall>
    <functioncall prog_lang="lua">integer retval, string list = reaper.JS_Window_ListAllTop()</functioncall>
    <functioncall prog_lang="python">(Int retval, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListAllTop(listOutNeedBig, listOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
<p>Finds all top-level windows.</p>
<p>Returns: * retval: The number of windows found; negative if an error occurred. * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function JS_Window_HandleFromAddress.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="list">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_ListFind</slug>
    <functioncall prog_lang="cpp">int JS_Window_ListFind(const char* title, bool exact, char* listOutNeedBig, int listOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_Window_ListFind&quot;, &quot;title&quot;, bool exact, #list)</functioncall>
    <functioncall prog_lang="lua">integer retval, string list = reaper.JS_Window_ListFind(string title, boolean exact)</functioncall>
    <functioncall prog_lang="python">(Int retval, String title, Boolean exact, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListFind(title, exact, listOutNeedBig, listOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
<p>Finds all windows (whether top-level or child) whose titles match the specified string.</p>
<p>Returns: * retval: The number of windows found; negative if an error occurred. * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function JS_Window_HandleFromAddress.</p>
<p>Parameters: * exact: Match entire title exactly, or match substring of title.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="list">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="title">

      </parameter>
      <parameter id="2" datatype="boolean" parmname="exact">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_MonitorFromRect</slug>
    <functioncall prog_lang="cpp">void JS_Window_MonitorFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_MonitorFromRect&quot;, int x1, int y1, int x2, int y2, bool wantWork, int &amp;left, int &amp;top, int &amp;right, int &amp;bottom)</functioncall>
    <functioncall prog_lang="lua">number left, number top, number right, number bottom = reaper.JS_Window_MonitorFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)</functioncall>
    <functioncall prog_lang="python">(Int x1, Int y1, Int x2, Int y2, Boolean wantWork, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_MonitorFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
<p>Deprecated - use <a href="#GetViewportFromRect">GetViewportFromRect</a> instead.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="left">

      </retval>
      <retval id="2" datatype="number" retvalname="top">

      </retval>
      <retval id="3" datatype="number" retvalname="right">

      </retval>
      <retval id="4" datatype="number" retvalname="bottom">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x1">

      </parameter>
      <parameter id="2" datatype="integer" parmname="y1">

      </parameter>
      <parameter id="3" datatype="integer" parmname="x2">

      </parameter>
      <parameter id="4" datatype="integer" parmname="y2">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="wantWork">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_Move</slug>
    <functioncall prog_lang="cpp">void JS_Window_Move(void* windowHWND, int left, int top)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_Move&quot;, void* windowHWND, int left, int top)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_Move(identifier windowHWND, integer left, integer top)</functioncall>
    <functioncall prog_lang="python">JS_Window_Move(void windowHWND, Int left, Int top)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.993
      Lua=5.3
    </requires>
    <description>
<p>Changes the position of the specified window, keeping its size constant.</p>
<p>NOTES: * For top-level windows, position is relative to the primary display. * On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward. * On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward. * For a child window, on all platforms, position is relative to the upper-left corner of the parent window’s client area. * Equivalent to calling <a href="#JS_Window_SetPosition">JS_Window_SetPosition</a> with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="left">

      </parameter>
      <parameter id="3" datatype="integer" parmname="top">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_OnCommand</slug>
    <functioncall prog_lang="cpp">bool JS_Window_OnCommand(void* windowHWND, int commandID)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_Window_OnCommand&quot;, void* windowHWND, int commandID)</functioncall>
    <functioncall prog_lang="lua">boolean retval = reaper.JS_Window_OnCommand(identifier windowHWND, integer commandID)</functioncall>
    <functioncall prog_lang="python">Boolean JS_Window_OnCommand(void windowHWND, Int commandID)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
<p>Sends a “WM_COMMAND” message to the specified window, which simulates a user selecting a command in the window menu.</p>
<p>This function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.</p>
<p>In the case of windows that are listed among the Action list’s contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="commandID">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_RemoveXPStyle</slug>
    <functioncall prog_lang="cpp">bool JS_Window_RemoveXPStyle(void* windowHWND, bool remove)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Window_RemoveXPStyle&quot;, void* windowHWND, bool remove)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Window_RemoveXPStyle(identifier windowHWND, boolean remove)</functioncall>
    <functioncall prog_lang="python">Boolean  JS_Window_RemoveXPStyle(void windowHWND, Boolean remove)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>deprecated, removed from JS_0.952 and later</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="boolean" parmname="remove">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_Resize</slug>
    <functioncall prog_lang="cpp">void JS_Window_Resize(void* windowHWND, int width, int height)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_Resize&quot;, void* windowHWND, int width, int height)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_Resize(identifier windowHWND, integer width, integer height)</functioncall>
    <functioncall prog_lang="python">JS_Window_Resize(void windowHWND, Int width, Int height)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.993
      Lua=5.3
    </requires>
    <description>
<p>Changes the dimensions of the specified window, keeping the top left corner position constant.</p>
<ul>
<li><p>If resizing script GUIs, call gfx.update() after resizing.</p></li>
<li><p>Equivalent to calling <a href="#JS_Window_SetPosition">JS_Window_SetPosition</a> with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.</p></li>
</ul>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="width">

      </parameter>
      <parameter id="3" datatype="integer" parmname="height">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>JS_Window_ScreenToClient</slug>
    <functioncall prog_lang="cpp">void JS_Window_ScreenToClient(void* windowHWND, int x, int y, int* xOut, int* yOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_ScreenToClient&quot;, void* windowHWND, int x, int y, int &amp;amp;x, int &amp;amp;y)</functioncall>
    <functioncall prog_lang="lua">number x, number y = reaper.JS_Window_ScreenToClient(identifier windowHWND, integer x, integer y)</functioncall>
    <functioncall prog_lang="python">(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ScreenToClient(windowHWND, x, y, xOut, yOut)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Converts the screen coordinates of a specified point on the screen to client-area coordinates.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="x">

      </retval>
      <retval id="2" datatype="number y" retvalname="">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="x">

      </parameter>
      <parameter id="3" datatype="integer" parmname="y">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_SetFocus</slug>
    <functioncall prog_lang="cpp">void JS_Window_SetFocus(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_SetFocus&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_SetFocus(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">JS_Window_SetFocus(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Sets the keyboard focus to the specified window.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_SetForeground</slug>
    <functioncall prog_lang="cpp">void JS_Window_SetForeground(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_SetForeground&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_SetForeground(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">JS_Window_SetForeground(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Brings the specified window into the foreground, activates the window, and directs keyboard input to it.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_SetLong</slug>
    <functioncall prog_lang="cpp">void JS_Window_SetLong(void* windowHWND, const char* info, double value, double* retvalOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_SetLong&quot;, void* windowHWND, &quot;info&quot;, value, &amp;retval)</functioncall>
    <functioncall prog_lang="lua">number retval = reaper.JS_Window_SetLong(identifier windowHWND, string info, number value)</functioncall>
    <functioncall prog_lang="python">(void windowHWND, String info, Float value, Float retvalOut) = JS_Window_SetLong(windowHWND, info, value, retvalOut)</functioncall>
    <requires>
      Reaper=5.982
      JS=0.990
      Lua=5.3
    </requires>
    <description>
<p>Similar to the Win32 function SetWindowLongPtr.</p>
<p>info: “USERDATA”, “WNDPROC”, “DLGPROC”, “ID”, “EXSTYLE” or “STYLE”, and only on WindowOS, “INSTANCE” and “PARENT”.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="info">

      </parameter>
      <parameter id="3" datatype="number" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_SetOpacity</slug>
    <functioncall prog_lang="cpp">bool JS_Window_SetOpacity(void* windowHWND, const char* mode, double value)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_Window_SetOpacity&quot;, void* windowHWND, &quot;mode&quot;, value)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Window_SetOpacity(identifier windowHWND, string mode, number value)</functioncall>
    <functioncall prog_lang="python">Boolean JS_Window_SetOpacity(void windowHWND, String mode, Float value)</functioncall>
    <requires>
      Reaper=5.982
      JS=0.990
      Lua=5.3
    </requires>
    <description>
<p>Sets the window opacity.</p>
<p>Parameters:<br />
mode: either “ALPHA” or “COLOR”.<br />
value: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included.<br />
If COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).</p>
<p>WARNING: COLOR mode is only available in Windows, not Linux or macOS.</p>
<p>Transparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="mode">

      </parameter>
      <parameter id="3" datatype="number" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_SetPosition</slug>
    <functioncall prog_lang="cpp">bool JS_Window_SetPosition(void* windowHWND, int left, int top, int width, int height, char* ZOrderOptional, char* flagsOptional)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_Window_SetPosition&quot;, void* windowHWND, int left, int top, int width, int height, optional #ZOrder, optional #flags)</functioncall>
    <functioncall prog_lang="lua">boolean retval, optional string ZOrder, optional string flags = reaper.JS_Window_SetPosition(identifier windowHWND, integer left, integer top, integer width, integer height, optional string ZOrder, optional string flags)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, void windowHWND, Int left, Int top, Int width, Int height, String ZOrderOptional, String flagsOptional) = JS_Window_SetPosition(windowHWND, left, top, width, height, ZOrderOptional, flagsOptional)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.991
      Lua=5.3
    </requires>
    <description>
<p>Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.</p>
<p>ZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set. * ZOrder: “BOTTOM”, “TOPMOST”, “NOTOPMOST”, “TOP” or a window HWND converted to a string, for example by the Lua function tostring. * flags: Any combination of the standard flags, of which “NOMOVE”, “NOSIZE”, “NOZORDER”, “NOACTIVATE”, “SHOWWINDOW”, “FRAMECHANGED” and “NOCOPYBITS” should be valid cross-platform.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="optional string" retvalname="ZOrder">

      </retval>
      <retval id="3" datatype="optional string" retvalname="flags">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="left">

      </parameter>
      <parameter id="3" datatype="integer" parmname="top">

      </parameter>
      <parameter id="4" datatype="integer" parmname="width">

      </parameter>
      <parameter id="5" datatype="integer" parmname="height">

      </parameter>
      <parameter id="6" datatype="optional string" parmname="ZOrder">

      </parameter>
      <parameter id="7" datatype="optional string" parmname="flags">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_SetScrollPos</slug>
    <functioncall prog_lang="cpp">bool JS_Window_SetScrollPos(void* windowHWND, const char* scrollbar, int position)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Window_SetScrollPos&quot;, void* windowHWND, &quot;scrollbar&quot;, int position)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Window_SetScrollPos(identifier windowHWND, string scrollbar, integer position)</functioncall>
    <functioncall prog_lang="python">Boolean  JS_Window_SetScrollPos(void windowHWND, String scrollbar, Int position)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
Parameters:<br/>
           <br/>
* scrollbar: &quot;v&quot; (or &quot;SB_VERT&quot;, or &quot;VERT&quot;) for vertical scroll, &quot;h&quot; (or &quot;SB_HORZ&quot; or &quot;HORZ&quot;) for horizontal.<br/>
           <br/>
           <br/>
           <br/>
           NOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as &quot;View: Zoom to one loop iteration&quot;.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="scrollbar">

      </parameter>
      <parameter id="3" datatype="integer" parmname="position">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_SetStyle</slug>
    <functioncall prog_lang="cpp">bool JS_Window_SetStyle(void* windowHWND, char* style)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_Window_SetStyle&quot;, void* windowHWND, #style)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string style = reaper.JS_Window_SetStyle(identifier windowHWND, string style)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, void windowHWND, String style) = JS_Window_SetStyle(windowHWND, style)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.991
      Lua=5.3
    </requires>
    <description>
Sets and applies a window style.<br/>
<br/>
style may include any combination of standard window styles, such as &quot;POPUP&quot; for a frameless window, or &quot;CAPTION,SIZEBOX,SYSMENU&quot; for a standard framed window.<br/>
<br/>
On Linux and macOS, &quot;MAXIMIZE&quot; has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="style">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="style">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_SetTitle</slug>
    <functioncall prog_lang="cpp">bool JS_Window_SetTitle(void* windowHWND, const char* title)</functioncall>
    <functioncall prog_lang="eel">bool  extension_api(&quot;JS_Window_SetTitle&quot;, void* windowHWND, &quot;title&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Window_SetTitle(identifier windowHWND, string title)</functioncall>
    <functioncall prog_lang="python">Boolean  JS_Window_SetTitle(void windowHWND, String title)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Changes the title of the specified window. Returns true if successful.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="title">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_SetZOrder</slug>
    <functioncall prog_lang="cpp">bool JS_Window_SetZOrder(void* windowHWND, const char* ZOrder, void* insertAfterHWND)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;JS_Window_SetZOrder&quot;, void* windowHWND, &quot;ZOrder&quot;, void* insertAfterHWND)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.JS_Window_SetZOrder(identifier windowHWND, string ZOrder, identifier insertAfterHWND)</functioncall>
    <functioncall prog_lang="python">Boolean JS_Window_SetZOrder(void windowHWND, String ZOrder, void insertAfterHWND)</functioncall>
    <requires>
      Reaper=5.982
      JS=0.991
      Lua=5.3
    </requires>
    <description>
Sets the window Z order.<br/>
* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.<br/>
* Not all the Z orders have been implemented in Linux yet.<br/>
<br/>
Parameters:<br/>
* ZOrder: &quot;BOTTOM&quot;, &quot;TOPMOST&quot;, &quot;NOTOPMOST&quot;, &quot;TOP&quot;, or a window HWND converted to a string, for example by the Lua function tostring.<br/>
<br/>
* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is &quot;INSERTAFTER&quot;, insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND).
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean " retvalname="boolean ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="ZOrder">

      </parameter>
      <parameter id="3" datatype="identifier" parmname="insertAfterHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_Show</slug>
    <functioncall prog_lang="cpp">void JS_Window_Show(void* windowHWND, const char* state)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_Show&quot;, void* windowHWND, &quot;state&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_Show(identifier windowHWND, string state)</functioncall>
    <functioncall prog_lang="python">JS_Window_Show(void windowHWND, String state)</functioncall>
    <requires>
      Reaper=5.982
      JS=0.991
      Lua=5.3
    </requires>
    <description>
<p>Sets the specified window’s show state.</p>
<p>Parameters: * state: One of the following options: “SHOW”, “SHOWNA” (or “SHOWNOACTIVATE”), “SHOWMINIMIZED”, “HIDE”, “NORMAL”, “SHOWNORMAL”, “SHOWMAXIMIZED”, “SHOWDEFAULT” or “RESTORE”.</p>
<p>On Linux and macOS, only the first four options are fully implemented.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
      <parameter id="2" datatype="string" parmname="state">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Window_Update</slug>
    <functioncall prog_lang="cpp">void JS_Window_Update(void* windowHWND)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_Window_Update&quot;, void* windowHWND)</functioncall>
    <functioncall prog_lang="lua">reaper.JS_Window_Update(identifier windowHWND)</functioncall>
    <functioncall prog_lang="python">JS_Window_Update(void windowHWND)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.980
      Lua=5.3
    </requires>
    <description>
<p>Similar to the Win32 function UpdateWindow.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="windowHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Dialog_BrowseForFolder</slug>
    <functioncall prog_lang="cpp">int JS_Dialog_BrowseForFolder(const char* caption, const char* initialFolder, char* folderOutNeedBig, int folderOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_Dialog_BrowseForFolder&quot;, &quot;caption&quot;, &quot;initialFolder&quot;, #folder)</functioncall>
    <functioncall prog_lang="lua">integer retval, string folder = reaper.JS_Dialog_BrowseForFolder(string caption, string initialFolder)</functioncall>
    <functioncall prog_lang="python">(Int retval, String caption, String initialFolder, String folderOutNeedBig, Int folderOutNeedBig_sz) = JS_Dialog_BrowseForFolder(caption, initialFolder, folderOutNeedBig, folderOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.962
      Lua=5.3
    </requires>
    <description>
<p>retval is 1 if a folder was selected, 0 if the user canceled the dialog, and -1 if an error occurred.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
0, no folder was selected(user hit cancel-button); 1, folder was selected; -1, in case of an error
      </retval>
      <retval id="2" datatype="string" retvalname="folder">
the path to the folder that was selected
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="caption">
the captiontext for the folder-selection dialog
      </parameter>
      <parameter id="2" datatype="string" parmname="initialFolder">
the path to the folder, which shall be highlighted initially
      </parameter>
    </parameters>
    <tags>
     select
     folder
     dialog
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Dialog_BrowseForOpenFiles</slug>
    <functioncall prog_lang="cpp">int JS_Dialog_BrowseForOpenFiles(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, bool allowMultiple, char* fileNamesOutNeedBig, int fileNamesOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_Dialog_BrowseForOpenFiles&quot;, &quot;windowTitle&quot;, &quot;initialFolder&quot;, &quot;initialFile&quot;, &quot;extensionList&quot;, bool allowMultiple, #fileNames)</functioncall>
    <functioncall prog_lang="lua">integer retval, string fileNames = reaper.JS_Dialog_BrowseForOpenFiles(string windowTitle, string initialFolder, string initialFile, string extensionList, boolean allowMultiple)</functioncall>
    <functioncall prog_lang="python">(Int retval, String windowTitle, String initialFolder, String initialFile, String extensionList, Boolean allowMultiple, String fileNamesOutNeedBig, Int fileNamesOutNeedBig_sz) = JS_Dialog_BrowseForOpenFiles(windowTitle, initialFolder, initialFile, extensionList, allowMultiple, fileNamesOutNeedBig, fileNamesOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
If allowMultiple is true, multiple files may be selected. The returned string is \0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.<br/>
* On macOS, the first substring may be empty, and each file name will then contain its entire path.<br/>
* This function only allows selection of existing files, and does not allow creation of new files.<br/>
<br/>
extensionList is a string containing pairs of \0-terminated substrings. The last substring must be terminated by two \0 characters. Each pair defines one filter pattern:<br/>
* The first substring in each pair describes the filter in user-readable form (for example, &quot;Lua script files (*.lua)&quot;) and will be displayed in the dialog box.<br/>
* The second substring specifies the filter that the operating system must use to search for the files (for example, &quot;*.txt&quot;; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, &quot;*.lua;*.eel&quot;).<br/>
<br/>
An example of an extensionList string:<br/>
&quot;ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0&quot;.<br/>
<br/>
On macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as &quot;All files\0*.*\0\0&quot;), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default &quot;All files (*.*)&quot; filter.<br/>
<br/>
retval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.<br/>
<br/>
Displaying \0-separated strings:<br/>
* REAPER's IDE and ShowConsoleMsg only display strings up to the first \0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \0 byte as usual.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
1, file was selected; 0, no file selected; -1, in case of an error
      </retval>
      <retval id="2" datatype="string" retvalname="fileNames">
the selected filenames.<br/>
when parameter allowMultiple=false, this returnvalue holds filename with path<br/>
when parameter allowMultiple=true, this returnvalue holds the path and all selected files, separated by \0<br/>
     path\0filename1\0filename2\0filename3
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="windowTitle">
the title of the file-selection-window
      </parameter>
      <parameter id="2" datatype="string" parmname="initialFolder">
the initial folder opened in the file-chooser-dialog
      </parameter>
      <parameter id="3" datatype="string" parmname="initialFile">
the default-filename already entered in the filename-entrybox
      </parameter>
      <parameter id="4" datatype="string" parmname="extensionList">
a list of extensions that can be selected in the selection-list.<br/>
the list has the following structure(separate the entries with a \0): <br/>
      &quot;description of type1\0type1\0description of type 2\0type2\0&quot;<br/>
the description of type can be anything that describes the type(s), <br/>
to define one type, write: *.ext <br/>
to define multiple types, write: *.ext;*.ext2;*.ext3<br/>
the extensionList must end with a \0
      </parameter>
      <parameter id="5" datatype="boolean" parmname="allowMultiple">
true, allows selection of multiple files; false, allows only selection of one file
      </parameter>
    </parameters>
    <tags>
     select
     select
     file
     filenames
     path
     dialog
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_Dialog_BrowseForSaveFile</slug>
    <functioncall prog_lang="cpp">int JS_Dialog_BrowseForSaveFile(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, char* fileNameOutNeedBig, int fileNameOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_Dialog_BrowseForSaveFile&quot;, &quot;windowTitle&quot;, &quot;initialFolder&quot;, &quot;initialFile&quot;, &quot;extensionList&quot;, #fileName)</functioncall>
    <functioncall prog_lang="lua">integer retval, string fileName = reaper.JS_Dialog_BrowseForSaveFile(string windowTitle, string initialFolder, string initialFile, string extensionList)</functioncall>
    <functioncall prog_lang="python">(Int retval, String windowTitle, String initialFolder, String initialFile, String extensionList, String fileNameOutNeedBig, Int fileNameOutNeedBig_sz) = JS_Dialog_BrowseForSaveFile(windowTitle, initialFolder, initialFile, extensionList, fileNameOutNeedBig, fileNameOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
Opens a file-chooser-dialog for saving operations.<br/>
<br/>
retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.<br/>
<br/>
extensionList is a string containing pairs of 0-terminated substrings. The last substring must be terminated by two 0 characters. Each pair defines one filter pattern:<br/>
* The first substring in each pair describes the filter in user-readable form (for example, &quot;Lua script files (*.lua)&quot;) and will be displayed in the dialog box.<br/>
* The second substring specifies the filter that the operating system must use to search for the files (for example, &quot;*.txt&quot;; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, &quot;*.lua;*.eel&quot;).<br/>
<br/>
An example of an extensionList string:<br/>
&quot;ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0&quot;.<br/>
<br/>
If the extensionList string is empty, it will display the default &quot;All files (*.*)&quot; filter.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
1, file was selected; 0, no file selected; -1, in case of an error
      </retval>
      <retval id="2" datatype="string" retvalname="fileNames">
the selected filename.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="windowTitle">
the title of the file-selection-window
      </parameter>
      <parameter id="2" datatype="string" parmname="initialFolder">
the initial folder opened in the file-chooser-dialog
      </parameter>
      <parameter id="3" datatype="string" parmname="initialFile">
the default-filename already entered in the filename-entrybox
      </parameter>
      <parameter id="4" datatype="string" parmname="extensionList">
a list of extensions that can be selected in the selection-list.<br/>
the list has the following structure(separate the entries with a \0): <br/>
      &quot;description of type1\0type1\0description of type 2\0type2\0&quot;<br/>
the description of type can be anything that describes the type(s), <br/>
to define one type, write: *.ext <br/>
to define multiple types, write: *.ext;*.ext2;*.ext3<br/>
the extensionList must end with a \0
      </parameter>
    </parameters>
    <tags>
     select
     select
     file
     filenames
     path
     dialog
     save
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ListView_EnumSelItems</slug>
    <functioncall prog_lang="cpp">int JS_ListView_EnumSelItems(void* listviewHWND, int index)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_ListView_EnumSelItems&quot;, void* listviewHWND, int index)</functioncall>
    <functioncall prog_lang="lua">integer reaper.JS_ListView_EnumSelItems(identifier listviewHWND, integer index)</functioncall>
    <functioncall prog_lang="python">Int JS_ListView_EnumSelItems(void listviewHWND, Int index)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.962
      Lua=5.3
    </requires>
    <description>
<p>Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
the index of the next selected list item
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="listviewHWND">
the HWND of the window
      </parameter>
      <parameter id="2" datatype="integer" parmname="index">
the index of the listitems before the next selected one
      </parameter>
    </parameters>
    <tags>
     listview
     enumerate
     selected
     listview
     items
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ListView_GetFocusedItem</slug>
    <functioncall prog_lang="cpp">int JS_ListView_GetFocusedItem(void* listviewHWND, char* textOut, int textOut_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_ListView_GetFocusedItem&quot;, void* listviewHWND, #text)</functioncall>
    <functioncall prog_lang="lua">integer retval, string text = reaper.JS_ListView_GetFocusedItem(identifier listviewHWND)</functioncall>
    <functioncall prog_lang="python">(Int retval, void listviewHWND, String textOut, Int textOut_sz) = JS_ListView_GetFocusedItem(listviewHWND, textOut, textOut_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
<p>Returns the index and text of the focused item, if any.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="text">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="listviewHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ListView_GetItem</slug>
    <functioncall prog_lang="cpp">void JS_ListView_GetItem(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz, int* stateOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_ListView_GetItem&quot;, void* listviewHWND, int index, int subItem, #text, int &amp;state)</functioncall>
    <functioncall prog_lang="lua">string text, number state = reaper.JS_ListView_GetItem(identifier listviewHWND, integer index, integer subItem)</functioncall>
    <functioncall prog_lang="python">(void listviewHWND, Int index, Int subItem, String textOut, Int textOut_sz, Int stateOut) = JS_ListView_GetItem(listviewHWND, index, subItem, textOut, textOut_sz, stateOut)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
<p>Returns the text and state of specified item.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="text">

      </retval>
      <retval id="2" datatype="number" retvalname="state">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="listviewHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="index">

      </parameter>
      <parameter id="3" datatype="integer" parmname="subItem">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ListView_GetItemCount</slug>
    <functioncall prog_lang="cpp">int JS_ListView_GetItemCount(void* listviewHWND)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_ListView_GetItemCount&quot;, void* listviewHWND)</functioncall>
    <functioncall prog_lang="lua">integer retval = reaper.JS_ListView_GetItemCount(identifier listviewHWND)</functioncall>
    <functioncall prog_lang="python">Int JS_ListView_GetItemCount(void listviewHWND)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="listviewHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ListView_GetItemState</slug>
    <functioncall prog_lang="cpp">int JS_ListView_GetItemState(void* listviewHWND, int index)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_ListView_GetItemState&quot;, void* listviewHWND, int index)</functioncall>
    <functioncall prog_lang="lua">integer retval = reaper.JS_ListView_GetItemState(identifier listviewHWND, integer index)</functioncall>
    <functioncall prog_lang="python">Int JS_ListView_GetItemState(void listviewHWND, Int index)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="listviewHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ListView_GetItemText</slug>
    <functioncall prog_lang="cpp">void JS_ListView_GetItemText(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;JS_ListView_GetItemText&quot;, void* listviewHWND, int index, int subItem, #text)</functioncall>
    <functioncall prog_lang="lua">string text = reaper.JS_ListView_GetItemText(identifier listviewHWND, integer index, integer subItem)</functioncall>
    <functioncall prog_lang="python">(void listviewHWND, Int index, Int subItem, String textOut, Int textOut_sz) = JS_ListView_GetItemText(listviewHWND, index, subItem, textOut, textOut_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="text">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="listviewHWND">

      </parameter>
      <parameter id="2" datatype="integer" parmname="index">

      </parameter>
      <parameter id="3" datatype="integer" parmname="subItem">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ListView_GetSelectedCount</slug>
    <functioncall prog_lang="cpp">int JS_ListView_GetSelectedCount(void* listviewHWND)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_ListView_GetSelectedCount&quot;, void* listviewHWND)</functioncall>
    <functioncall prog_lang="lua">integer retval = reaper.JS_ListView_GetSelectedCount(identifier listviewHWND)</functioncall>
    <functioncall prog_lang="python">Int JS_ListView_GetSelectedCount(void listviewHWND)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>


    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="listviewHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>JS_ListView_ListAllSelItems</slug>
    <functioncall prog_lang="cpp">int JS_ListView_ListAllSelItems(void* listviewHWND, char* itemsOutNeedBig, int itemsOutNeedBig_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;JS_ListView_ListAllSelItems&quot;, void* listviewHWND, #items)</functioncall>
    <functioncall prog_lang="lua">integer retval, string items = reaper.JS_ListView_ListAllSelItems(identifier listviewHWND)</functioncall>
    <functioncall prog_lang="python">(Int retval, void listviewHWND, String itemsOutNeedBig, Int itemsOutNeedBig_sz) = JS_ListView_ListAllSelItems(listviewHWND, itemsOutNeedBig, itemsOutNeedBig_sz)</functioncall>
    <requires>
      Reaper=5.965
      JS=0.963
      Lua=5.3
    </requires>
    <description>
Returns the indices of all selected items as a comma-separated list.<br/>
<br/>
* retval: Number of selected items found; negative or zero if an error occured.
    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="listviewHWND">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Xen_AudioWriter_Create</slug>
    <functioncall prog_lang="cpp">AudioWriter* Xen_AudioWriter_Create(const char* filename, int numchans, int samplerate)</functioncall>
    <functioncall prog_lang="eel">AudioWriter  extension_api(&quot;Xen_AudioWriter_Create&quot;, &quot;filename&quot;, int numchans, int samplerate)</functioncall>
    <functioncall prog_lang="lua">AudioWriter reaper.Xen_AudioWriter_Create(string filename, integer numchans, integer samplerate)</functioncall>
    <functioncall prog_lang="python">AudioWriter  Xen_AudioWriter_Create(String filename, Int numchans, Int samplerate)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Creates writer for 32 bit floating point WAV</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="AudioWriter " retvalname="AudioWriter ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="filename">

      </parameter>
      <parameter id="2" datatype="integer" parmname="numchans">

      </parameter>
      <parameter id="3" datatype="integer" parmname="samplerate">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Xen_AudioWriter_Destroy</slug>
    <functioncall prog_lang="cpp">void Xen_AudioWriter_Destroy(AudioWriter* writer)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;Xen_AudioWriter_Destroy&quot;, AudioWriter writer)</functioncall>
    <functioncall prog_lang="lua">reaper.Xen_AudioWriter_Destroy(AudioWriter writer)</functioncall>
    <functioncall prog_lang="python">Xen_AudioWriter_Destroy(AudioWriter writer)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Destroys writer</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="AudioWriter" parmname="writer">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Xen_AudioWriter_Write</slug>
    <functioncall prog_lang="cpp">int Xen_AudioWriter_Write(AudioWriter* writer, int numframes, void* data, int offset)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;Xen_AudioWriter_Write&quot;, AudioWriter writer, int numframes, void* data, int offset)</functioncall>
    <functioncall prog_lang="lua">integer reaper.Xen_AudioWriter_Write(AudioWriter writer, integer numframes, identifier data, integer offset)</functioncall>
    <functioncall prog_lang="python">Int  Xen_AudioWriter_Write(AudioWriter writer, Int numframes, void data, Int offset)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Write interleaved audio data to disk</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="AudioWriter" parmname="writer">

      </parameter>
      <parameter id="2" datatype="integer" parmname="numframes">

      </parameter>
      <parameter id="3" datatype="identifier" parmname="data">

      </parameter>
      <parameter id="4" datatype="integer" parmname="offset">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Xen_GetMediaSourceSamples</slug>
    <functioncall prog_lang="cpp">int Xen_GetMediaSourceSamples(PCM_source* src, void* destbuf, int destbufoffset, int numframes, int numchans, double samplerate, double sourceposition)</functioncall>
    <functioncall prog_lang="eel">int  extension_api(&quot;Xen_GetMediaSourceSamples&quot;, PCM_source src, void* destbuf, int destbufoffset, int numframes, int numchans, samplerate, sourceposition)</functioncall>
    <functioncall prog_lang="lua">integer reaper.Xen_GetMediaSourceSamples(PCM_source src, identifier destbuf, integer destbufoffset, integer numframes, integer numchans, number samplerate, number sourceposition)</functioncall>
    <functioncall prog_lang="python">Int  Xen_GetMediaSourceSamples(PCM_source src, void destbuf, Int destbufoffset, Int numframes, Int numchans, Float samplerate, Float sourceposition)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.951
      Lua=5.3
    </requires>
    <description>
<p>Get interleaved audio data from media source</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer " retvalname="integer ">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="src">

      </parameter>
      <parameter id="2" datatype="identifier" parmname="destbuf">

      </parameter>
      <parameter id="3" datatype="integer" parmname="destbufoffset">

      </parameter>
      <parameter id="4" datatype="integer" parmname="numframes">

      </parameter>
      <parameter id="5" datatype="integer" parmname="numchans">

      </parameter>
      <parameter id="6" datatype="number" parmname="samplerate">

      </parameter>
      <parameter id="7" datatype="number" parmname="sourceposition">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Xen_StartSourcePreview</slug>
    <functioncall prog_lang="cpp">int Xen_StartSourcePreview(PCM_source* source, double gain, bool loop, int* outputchanindexInOptional)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;Xen_StartSourcePreview&quot;, PCM_source source, gain, bool loop, optional int outputchanindexIn)</functioncall>
    <functioncall prog_lang="lua">integer reaper.Xen_StartSourcePreview(PCM_source source, number gain, boolean loop, optional number outputchanindexIn)</functioncall>
    <functioncall prog_lang="python">(Int retval, PCM_source source, Float gain, Boolean loop, Int outputchanindexInOptional) = Xen_StartSourcePreview(source, gain, loop, outputchanindexInOptional)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.991
      Lua=5.3
    </requires>
    <description>
<p>Start audio preview of a PCM_source, which can be created using functions like <a href="#PCM_Source_CreateFromFile">PCM_Source_CreateFromFile</a></p>
<p>Returns id of a preview handle that can be provided to <a href="#Xen_StopSourcePreview">Xen_StopSourcePreview</a>.</p>
<p>If the given PCM_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped.</p>
<p>You can preview more than one file at the same time.</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="id">
the id of this preview, which can be used to stop it again
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="source">
a PCM_source-created using a mediafile/item 
      </parameter>
      <parameter id="2" datatype="number" parmname="gain">
the volume of the previewed pcm_source
      </parameter>
      <parameter id="3" datatype="boolean" parmname="loop">
true, loop the PCM_source; false, play only once
      </parameter>
      <parameter id="4" datatype="optional number" parmname="outputchanindexIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Xen_StopSourcePreview</slug>
    <functioncall prog_lang="cpp">int Xen_StopSourcePreview(int preview_id)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;Xen_StopSourcePreview&quot;, int preview_id)</functioncall>
    <functioncall prog_lang="lua">integer retval = reaper.Xen_StopSourcePreview(integer preview_id)</functioncall>
    <functioncall prog_lang="python">Int Xen_StopSourcePreview(Int preview_id)</functioncall>
    <requires>
      Reaper=5.95
      JS=0.986
      Lua=5.3
    </requires>
    <description>
<p>Stop audio preview.</p>
<p>To stop all running previews, set id=-1</p>

    </description>
    <chapter_context>
      JS_Plugin
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="preview_id">
the id of the running preview; -1, stops all running previews
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_CB_FindString</slug>
    <functioncall prog_lang="cpp">int BR_Win32_CB_FindString(void* comboBoxHwnd, int startId, const char* string)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_CB_FindString&quot;, void* comboBoxHwnd, int startId, &quot;string&quot;)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_CB_FindString(identifier comboBoxHwnd, integer startId, string string)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_CB_FindString(void comboBoxHwnd, Int startId, String string)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API ComboBox_FindString().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="comboBoxHwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="startId">

      </parameter>
      <parameter id="3" datatype="string" parmname="string">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_CB_FindStringExact</slug>
    <functioncall prog_lang="cpp">int BR_Win32_CB_FindStringExact(void* comboBoxHwnd, int startId, const char* string)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_CB_FindStringExact&quot;, void* comboBoxHwnd, int startId, &quot;string&quot;)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_CB_FindStringExact(identifier comboBoxHwnd, integer startId, string string)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_CB_FindStringExact(void comboBoxHwnd, Int startId, String string)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API ComboBox_FindStringExact().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="comboBoxHwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="startId">

      </parameter>
      <parameter id="3" datatype="string" parmname="string">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_ClientToScreen</slug>
    <functioncall prog_lang="cpp">void BR_Win32_ClientToScreen(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_Win32_ClientToScreen&quot;, void* hwnd, int xIn, int yIn, int &amp;amp;x, int &amp;amp;y)</functioncall>
    <functioncall prog_lang="lua">number x, number y = reaper.BR_Win32_ClientToScreen(identifier hwnd, integer xIn, integer yIn)</functioncall>
    <functioncall prog_lang="python">(void hwnd, Int xIn, Int yIn, Int xOut, Int yOut) = BR_Win32_ClientToScreen(hwnd, xIn, yIn, xOut, yOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API ClientToScreen().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="x">

      </retval>
      <retval id="2" datatype="number" retvalname="y">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="xIn">

      </parameter>
      <parameter id="3" datatype="integer" parmname="yIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_FindWindowEx</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_FindWindowEx(const char* hwndParent, const char* hwndChildAfter, const char* className, const char* windowName, bool searchClass, bool searchName)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_FindWindowEx&quot;, &quot;hwndParent&quot;, &quot;hwndChildAfter&quot;, &quot;className&quot;, &quot;windowName&quot;, bool searchClass, bool searchName)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_FindWindowEx(string hwndParent, string hwndChildAfter, string className, string windowName, boolean searchClass, boolean searchName)</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_FindWindowEx(String hwndParent, String hwndChildAfter, String className, String windowName, Boolean searchClass, Boolean searchName)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn’t allow passing NULL (None in Python, nil in Lua etc…) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either “0” to signify NULL or as string obtained from <a href="#BR_Win32_HwndToString">BR_Win32_HwndToString</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="hwndParent">

      </parameter>
      <parameter id="2" datatype="string" parmname="hwndChildAfter">

      </parameter>
      <parameter id="3" datatype="string" parmname="className">

      </parameter>
      <parameter id="4" datatype="string" parmname="windowName">

      </parameter>
      <parameter id="5" datatype="boolean" parmname="searchClass">

      </parameter>
      <parameter id="6" datatype="boolean" parmname="searchName">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GET_X_LPARAM</slug>
    <functioncall prog_lang="cpp">int BR_Win32_GET_X_LPARAM(int lParam)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_GET_X_LPARAM&quot;, int lParam)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_GET_X_LPARAM(integer lParam)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_GET_X_LPARAM(Int lParam)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GET_X_LPARAM().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="lParam">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GET_Y_LPARAM</slug>
    <functioncall prog_lang="cpp">int BR_Win32_GET_Y_LPARAM(int lParam)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_GET_Y_LPARAM&quot;, int lParam)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_GET_Y_LPARAM(integer lParam)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_GET_Y_LPARAM(Int lParam)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GET_Y_LPARAM().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="lParam">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>BR_Win32_GetConstant</slug>
    <functioncall prog_lang="cpp">int BR_Win32_GetConstant(const char* constantName)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_GetConstant&quot;, &quot;constantName&quot;)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_GetConstant(string constantName)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_GetConstant(String constantName)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Returns various constants needed for BR_Win32 functions.<br/>
Supported constants are:<br/>
CB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL<br/>
EM_SETSEL<br/>
GW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER<br/>
GWL_STYLE<br/>
SW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL<br/>
SWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER<br/>
VK_DOWN, VK_UP<br/>
WM_CLOSE, WM_KEYDOWN<br/>
WS_MAXIMIZE, WS_OVERLAPPEDWINDOW
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="constantName">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetCursorPos</slug>
    <functioncall prog_lang="cpp">bool BR_Win32_GetCursorPos(int* xOut, int* yOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_Win32_GetCursorPos&quot;, int &amp;amp;x, int &amp;amp;y)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number x, number y = reaper.BR_Win32_GetCursorPos()</functioncall>
    <functioncall prog_lang="python">(Boolean retval, Int xOut, Int yOut) = BR_Win32_GetCursorPos(xOut, yOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GetCursorPos().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="number" retvalname="x">

      </retval>
      <retval id="3" datatype="number" retvalname="y">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetFocus</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_GetFocus()</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_GetFocus&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_GetFocus()</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_GetFocus()</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GetFocus().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetForegroundWindow</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_GetForegroundWindow()</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_GetForegroundWindow&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_GetForegroundWindow()</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_GetForegroundWindow()</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GetForegroundWindow().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetMainHwnd</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_GetMainHwnd()</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_GetMainHwnd&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_GetMainHwnd()</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_GetMainHwnd()</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>[BR] Alternative to <a href="#GetMainHwnd">GetMainHwnd</a>. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetMixerHwnd</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_GetMixerHwnd(bool* isDockedOut)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_GetMixerHwnd&quot;, bool &amp;amp;isDocked)</functioncall>
    <functioncall prog_lang="lua">identifier retval, boolean isDocked = reaper.BR_Win32_GetMixerHwnd()</functioncall>
    <functioncall prog_lang="python">(void retval, Boolean isDockedOut) = BR_Win32_GetMixerHwnd(isDockedOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="retval">

      </retval>
      <retval id="2" datatype="boolean" retvalname="isDocked">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetMonitorRectFromRect</slug>
    <functioncall prog_lang="cpp">void BR_Win32_GetMonitorRectFromRect(bool workingAreaOnly, int leftIn, int topIn, int rightIn, int bottomIn, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_Win32_GetMonitorRectFromRect&quot;, bool workingAreaOnly, int leftIn, int topIn, int rightIn, int bottomIn, int &amp;amp;left, int &amp;amp;top, int &amp;amp;right, int &amp;amp;bottom)</functioncall>
    <functioncall prog_lang="lua">number left, number top, number right, number bottom = reaper.BR_Win32_GetMonitorRectFromRect(boolean workingAreaOnly, integer leftIn, integer topIn, integer rightIn, integer bottomIn)</functioncall>
    <functioncall prog_lang="python">(Boolean workingAreaOnly, Int leftIn, Int topIn, Int rightIn, Int bottomIn, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = BR_Win32_GetMonitorRectFromRect(workingAreaOnly, leftIn, topIn, rightIn, bottomIn, leftOut, topOut, rightOut, bottomOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX).
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="left">

      </retval>
      <retval id="2" datatype="number" retvalname="top">

      </retval>
      <retval id="3" datatype="number" retvalname="right">

      </retval>
      <retval id="4" datatype="number" retvalname="bottom">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="boolean" parmname="workingAreaOnly">

      </parameter>
      <parameter id="2" datatype="integer" parmname="leftIn">

      </parameter>
      <parameter id="3" datatype="integer" parmname="topIn">

      </parameter>
      <parameter id="4" datatype="integer" parmname="rightIn">

      </parameter>
      <parameter id="5" datatype="integer" parmname="bottomIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetParent</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_GetParent(void* hwnd)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_GetParent&quot;, void* hwnd)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_GetParent(identifier hwnd)</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_GetParent(void hwnd)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GetParent().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetWindow</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_GetWindow(void* hwnd, int cmd)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_GetWindow&quot;, void* hwnd, int cmd)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_GetWindow(identifier hwnd, integer cmd)</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_GetWindow(void hwnd, Int cmd)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GetWindow().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="cmd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetWindowLong</slug>
    <functioncall prog_lang="cpp">int BR_Win32_GetWindowLong(void* hwnd, int index)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_GetWindowLong&quot;, void* hwnd, int index)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_GetWindowLong(identifier hwnd, integer index)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_GetWindowLong(void hwnd, Int index)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GetWindowLong().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetWindowRect</slug>
    <functioncall prog_lang="cpp">bool BR_Win32_GetWindowRect(void* hwnd, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_Win32_GetWindowRect&quot;, void* hwnd, int &amp;amp;left, int &amp;amp;top, int &amp;amp;right, int &amp;amp;bottom)</functioncall>
    <functioncall prog_lang="lua">boolean retval, number left, number top, number right, number bottom = reaper.BR_Win32_GetWindowRect(identifier hwnd)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, void hwnd, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = BR_Win32_GetWindowRect(hwnd, leftOut, topOut, rightOut, bottomOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GetWindowRect().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="number" retvalname="left">

      </retval>
      <retval id="3" datatype="number" retvalname="top">

      </retval>
      <retval id="4" datatype="number" retvalname="right">

      </retval>
      <retval id="5" datatype="number" retvalname="bottom">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_GetWindowText</slug>
    <functioncall prog_lang="cpp">int BR_Win32_GetWindowText(void* hwnd, char* textOut, int textOut_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_GetWindowText&quot;, void* hwnd, #text)</functioncall>
    <functioncall prog_lang="lua">integer retval, string text = reaper.BR_Win32_GetWindowText(identifier hwnd)</functioncall>
    <functioncall prog_lang="python">(Int retval, void hwnd, String textOut, Int textOut_sz) = BR_Win32_GetWindowText(hwnd, textOut, textOut_sz)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API GetWindowText().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="text">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_HIBYTE</slug>
    <functioncall prog_lang="cpp">int BR_Win32_HIBYTE(int value)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_HIBYTE&quot;, int value)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_HIBYTE(integer value)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_HIBYTE(Int value)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API HIBYTE().
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_HIWORD</slug>
    <functioncall prog_lang="cpp">int BR_Win32_HIWORD(int value)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_HIWORD&quot;, int value)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_HIWORD(integer value)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_HIWORD(Int value)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API HIWORD().
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_HwndToString</slug>
    <functioncall prog_lang="cpp">void BR_Win32_HwndToString(void* hwnd, char* stringOut, int stringOut_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_Win32_HwndToString&quot;, void* hwnd, #string)</functioncall>
    <functioncall prog_lang="lua">string string = reaper.BR_Win32_HwndToString(identifier hwnd)</functioncall>
    <functioncall prog_lang="python">(void hwnd, String stringOut, Int stringOut_sz) = BR_Win32_HwndToString(hwnd, stringOut, stringOut_sz)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>[BR] Convert HWND to string. To convert string back to HWND, see <a href="#BR_Win32_StringToHwnd">BR_Win32_StringToHwnd</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_IsWindow</slug>
    <functioncall prog_lang="cpp">bool BR_Win32_IsWindow(void* hwnd)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_Win32_IsWindow&quot;, void* hwnd)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.BR_Win32_IsWindow(identifier hwnd)</functioncall>
    <functioncall prog_lang="python">Boolean  BR_Win32_IsWindow(void hwnd)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API IsWindow().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_IsWindowVisible</slug>
    <functioncall prog_lang="cpp">bool BR_Win32_IsWindowVisible(void* hwnd)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_Win32_IsWindowVisible&quot;, void* hwnd)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.BR_Win32_IsWindowVisible(identifier hwnd)</functioncall>
    <functioncall prog_lang="python">Boolean  BR_Win32_IsWindowVisible(void hwnd)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API IsWindowVisible().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_LOBYTE</slug>
    <functioncall prog_lang="cpp">int BR_Win32_LOBYTE(int value)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_LOBYTE&quot;, int value)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_LOBYTE(integer value)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_LOBYTE(Int value)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API LOBYTE().
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_LOWORD</slug>
    <functioncall prog_lang="cpp">int BR_Win32_LOWORD(int value)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_LOWORD&quot;, int value)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_LOWORD(integer value)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_LOWORD(Int value)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API LOWORD().
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_MAKELONG</slug>
    <functioncall prog_lang="cpp">int BR_Win32_MAKELONG(int low, int high)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_MAKELONG&quot;, int low, int high)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_MAKELONG(integer low, integer high)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_MAKELONG(Int low, Int high)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API MAKELONG().
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="low">

      </parameter>
      <parameter id="2" datatype="integer" parmname="high">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_MAKELPARAM</slug>
    <functioncall prog_lang="cpp">int BR_Win32_MAKELPARAM(int low, int high)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_MAKELPARAM&quot;, int low, int high)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_MAKELPARAM(integer low, integer high)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_MAKELPARAM(Int low, Int high)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API MAKELPARAM().
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="low">

      </parameter>
      <parameter id="2" datatype="integer" parmname="high">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_MAKELRESULT</slug>
    <functioncall prog_lang="cpp">int BR_Win32_MAKELRESULT(int low, int high)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_MAKELRESULT&quot;, int low, int high)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_MAKELRESULT(integer low, integer high)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_MAKELRESULT(Int low, Int high)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API MAKELRESULT().
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="low">

      </parameter>
      <parameter id="2" datatype="integer" parmname="high">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_MAKEWORD</slug>
    <functioncall prog_lang="cpp">int BR_Win32_MAKEWORD(int low, int high)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_MAKEWORD&quot;, int low, int high)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_MAKEWORD(integer low, integer high)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_MAKEWORD(Int low, Int high)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API MAKEWORD().
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="low">

      </parameter>
      <parameter id="2" datatype="integer" parmname="high">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_MAKEWPARAM</slug>
    <functioncall prog_lang="cpp">int BR_Win32_MAKEWPARAM(int low, int high)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_MAKEWPARAM&quot;, int low, int high)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_MAKEWPARAM(integer low, integer high)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_MAKEWPARAM(Int low, Int high)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API MAKEWPARAM().
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="low">

      </parameter>
      <parameter id="2" datatype="integer" parmname="high">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_MIDIEditor_GetActive</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_MIDIEditor_GetActive()</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_MIDIEditor_GetActive&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_MIDIEditor_GetActive()</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_MIDIEditor_GetActive()</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>[BR] Alternative to <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_ScreenToClient</slug>
    <functioncall prog_lang="cpp">void BR_Win32_ScreenToClient(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;BR_Win32_ScreenToClient&quot;, void* hwnd, int xIn, int yIn, int &amp;amp;x, int &amp;amp;y)</functioncall>
    <functioncall prog_lang="lua">number x, number y = reaper.BR_Win32_ScreenToClient(identifier hwnd, integer xIn, integer yIn)</functioncall>
    <functioncall prog_lang="python">(void hwnd, Int xIn, Int yIn, Int xOut, Int yOut) = BR_Win32_ScreenToClient(hwnd, xIn, yIn, xOut, yOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API ClientToScreen().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="x">

      </retval>
      <retval id="2" datatype="number" retvalname="y">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="xIn">

      </parameter>
      <parameter id="3" datatype="integer" parmname="yIn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_SendMessage</slug>
    <functioncall prog_lang="cpp">int BR_Win32_SendMessage(void* hwnd, int msg, int lParam, int wParam)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_SendMessage&quot;, void* hwnd, int msg, int lParam, int wParam)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_SendMessage(identifier hwnd, integer msg, integer lParam, integer wParam)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_SendMessage(void hwnd, Int msg, Int lParam, Int wParam)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API SendMessage().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="msg">

      </parameter>
      <parameter id="3" datatype="integer" parmname="lParam">

      </parameter>
      <parameter id="4" datatype="integer" parmname="wParam">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_SetFocus</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_SetFocus(void* hwnd)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_SetFocus&quot;, void* hwnd)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_SetFocus(identifier hwnd)</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_SetFocus(void hwnd)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API SetFocus().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_SetForegroundWindow</slug>
    <functioncall prog_lang="cpp">int BR_Win32_SetForegroundWindow(void* hwnd)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_SetForegroundWindow&quot;, void* hwnd)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_SetForegroundWindow(identifier hwnd)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_SetForegroundWindow(void hwnd)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API SetForegroundWindow().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_SetWindowLong</slug>
    <functioncall prog_lang="cpp">int BR_Win32_SetWindowLong(void* hwnd, int index, int newLong)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;BR_Win32_SetWindowLong&quot;, void* hwnd, int index, int newLong)</functioncall>
    <functioncall prog_lang="lua">integer reaper.BR_Win32_SetWindowLong(identifier hwnd, integer index, integer newLong)</functioncall>
    <functioncall prog_lang="python">Int  BR_Win32_SetWindowLong(void hwnd, Int index, Int newLong)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API SetWindowLong().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="index">

      </parameter>
      <parameter id="3" datatype="integer" parmname="newLong">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_SetWindowPos</slug>
    <functioncall prog_lang="cpp">bool BR_Win32_SetWindowPos(void* hwnd, const char* hwndInsertAfter, int x, int y, int width, int height, int flags)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_Win32_SetWindowPos&quot;, void* hwnd, &quot;hwndInsertAfter&quot;, int x, int y, int width, int height, int flags)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.BR_Win32_SetWindowPos(identifier hwnd, string hwndInsertAfter, integer x, integer y, integer width, integer height, integer flags)</functioncall>
    <functioncall prog_lang="python">Boolean  BR_Win32_SetWindowPos(void hwnd, String hwndInsertAfter, Int x, Int y, Int width, Int height, Int flags)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>[BR] Equivalent to win32 API SetWindowPos(). hwndInsertAfter may be a string: “HWND_BOTTOM”, “HWND_NOTOPMOST”, “HWND_TOP”, “HWND_TOPMOST” or a string obtained with <a href="#BR_Win32_HwndToString">BR_Win32_HwndToString</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="string" parmname="hwndInsertAfter">

      </parameter>
      <parameter id="3" datatype="integer" parmname="x">

      </parameter>
      <parameter id="4" datatype="integer" parmname="y">

      </parameter>
      <parameter id="5" datatype="integer" parmname="width">

      </parameter>
      <parameter id="6" datatype="integer" parmname="height">

      </parameter>
      <parameter id="7" datatype="integer" parmname="flags">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_ShowWindow</slug>
    <functioncall prog_lang="cpp">bool BR_Win32_ShowWindow(void* hwnd, int cmdShow)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;BR_Win32_ShowWindow&quot;, void* hwnd, int cmdShow)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.BR_Win32_ShowWindow(identifier hwnd, integer cmdShow)</functioncall>
    <functioncall prog_lang="python">Boolean  BR_Win32_ShowWindow(void hwnd, Int cmdShow)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API ShowWindow().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="identifier" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="cmdShow">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_StringToHwnd</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_StringToHwnd(const char* string)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_StringToHwnd&quot;, &quot;string&quot;)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_StringToHwnd(string string)</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_StringToHwnd(String string)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>[BR] Convert string to HWND. To convert HWND back to string, see <a href="BR_Win32_HwndToString">BR_Win32_HwndToString</a>.</p>

    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="string">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>BR_Win32_WindowFromPoint</slug>
    <functioncall prog_lang="cpp">void* BR_Win32_WindowFromPoint(int x, int y)</functioncall>
    <functioncall prog_lang="eel">void* extension_api(&quot;BR_Win32_WindowFromPoint&quot;, int x, int y)</functioncall>
    <functioncall prog_lang="lua">identifier reaper.BR_Win32_WindowFromPoint(integer x, integer y)</functioncall>
    <functioncall prog_lang="python">void  BR_Win32_WindowFromPoint(Int x, Int y)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
[BR] Equivalent to win32 API WindowFromPoint().
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="identifier" retvalname="identifier">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">

      </parameter>
      <parameter id="2" datatype="integer" parmname="y">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_EnumMediaSourceCues</slug>
    <functioncall prog_lang="cpp">int CF_EnumMediaSourceCues(PCM_source* src, int index, double* timeOut, double* endTimeOut, bool* isRegionOut, char* nameOut, int nameOut_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;CF_EnumMediaSourceCues&quot;, PCM_source src, int index, &amp;amp;time, &amp;amp;endTime, bool &amp;amp;isRegion, #name)</functioncall>
    <functioncall prog_lang="lua">integer retval, number time, number endTime, boolean isRegion, string name = reaper.CF_EnumMediaSourceCues(PCM_source src, integer index)</functioncall>
    <functioncall prog_lang="python">(Int retval, PCM_source src, Int index, Float timeOut, Float endTimeOut, Boolean isRegionOut, String nameOut, Int nameOut_sz) = CF_EnumMediaSourceCues(src, index, timeOut, endTimeOut, isRegionOut, nameOut, nameOut_sz)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Enumerate the source's media cues. Returns the next index or 0 when finished.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="number" retvalname="time">

      </retval>
      <retval id="3" datatype="number" retvalname="endTime">

      </retval>
      <retval id="4" datatype="boolean" retvalname="isRegion">

      </retval>
      <retval id="5" datatype="string" retvalname="name">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="src">

      </parameter>
      <parameter id="2" datatype="integer" parmname="index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>CF_EnumSelectedFX</slug>
    <functioncall prog_lang="cpp">int CF_EnumSelectedFX(FxChain* hwnd, int index)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;CF_EnumSelectedFX&quot;, FxChain hwnd, int index)</functioncall>
    <functioncall prog_lang="lua">integer reaper.CF_EnumSelectedFX(FxChain hwnd, integer index)</functioncall>
    <functioncall prog_lang="python">Int  CF_EnumSelectedFX(FxChain hwnd, Int index)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="FxChain" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="integer" parmname="index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_EnumerateActions</slug>
    <functioncall prog_lang="cpp">int CF_EnumerateActions(int section, int index, char* name, int name_sz)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;CF_EnumerateActions&quot;, int section, int index, #name)</functioncall>
    <functioncall prog_lang="lua">integer retval, string name = reaper.CF_EnumerateActions(integer section, integer index, string name)</functioncall>
    <functioncall prog_lang="python">(Int retval, Int section, Int index, String name, Int name_sz) = CF_EnumerateActions(section, index, name, name_sz)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Wrapper for the unexposed kbd_enumerateActions API function.<br/>
Main=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="name">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="section">

      </parameter>
      <parameter id="2" datatype="integer" parmname="index">

      </parameter>
      <parameter id="3" datatype="string" parmname="name">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_ExportMediaSource</slug>
    <functioncall prog_lang="cpp">bool CF_ExportMediaSource(PCM_source* src, const char* fn)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;CF_ExportMediaSource&quot;, PCM_source src, &quot;fn&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.CF_ExportMediaSource(PCM_source src, string fn)</functioncall>
    <functioncall prog_lang="python">Boolean  CF_ExportMediaSource(PCM_source src, String fn)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Export the source to the given file (MIDI only).
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="src">

      </parameter>
      <parameter id="2" datatype="string" parmname="fn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetCommandText</slug>
    <functioncall prog_lang="cpp">const char* CF_GetCommandText(int section, int command)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;CF_GetCommandText&quot;, #retval, int section, int command)</functioncall>
    <functioncall prog_lang="lua">string reaper.CF_GetCommandText(integer section, integer command)</functioncall>
    <functioncall prog_lang="python">String  CF_GetCommandText(Int section, Int command)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>Wrapper for the unexposed kbd_getTextFromCmd API function. See <a href="#CF_EnumerateActions">CF_EnumerateActions</a> for common section IDs.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="section">

      </parameter>
      <parameter id="2" datatype="integer" parmname="command">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetFocusedFXChain</slug>
    <functioncall prog_lang="cpp">FxChain* CF_GetFocusedFXChain()</functioncall>
    <functioncall prog_lang="eel">FxChain extension_api(&quot;CF_GetFocusedFXChain&quot;)</functioncall>
    <functioncall prog_lang="lua">FxChain  = reaper.CF_GetFocusedFXChain()</functioncall>
    <functioncall prog_lang="python">FxChain  CF_GetFocusedFXChain()</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Return a handle to the currently focused FX chain window.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="FxChain " retvalname="FxChain ">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetMediaSourceBitDepth</slug>
    <functioncall prog_lang="cpp">int CF_GetMediaSourceBitDepth(PCM_source* src)</functioncall>
    <functioncall prog_lang="eel">int extension_api(&quot;CF_GetMediaSourceBitDepth&quot;, PCM_source src)</functioncall>
    <functioncall prog_lang="lua">integer reaper.CF_GetMediaSourceBitDepth(PCM_source src)</functioncall>
    <functioncall prog_lang="python">Int  CF_GetMediaSourceBitDepth(PCM_source src)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Returns the bit depth if available (0 otherwise).
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="integer">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="src">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetMediaSourceMetadata</slug>
    <functioncall prog_lang="cpp">bool CF_GetMediaSourceMetadata(PCM_source* src, const char* name, char* out, int out_sz)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;CF_GetMediaSourceMetadata&quot;, PCM_source src, &quot;name&quot;, #out)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string out = reaper.CF_GetMediaSourceMetadata(PCM_source src, string name, string out)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, PCM_source src, String name, String out, Int out_sz) = CF_GetMediaSourceMetadata(src, name, out, out_sz)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="out">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="src">

      </parameter>
      <parameter id="2" datatype="string" parmname="name">

      </parameter>
      <parameter id="3" datatype="string" parmname="out">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetMediaSourceOnline</slug>
    <functioncall prog_lang="cpp">bool CF_GetMediaSourceOnline(PCM_source* src)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;CF_GetMediaSourceOnline&quot;, PCM_source src)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.CF_GetMediaSourceOnline(PCM_source src)</functioncall>
    <functioncall prog_lang="python">Boolean  CF_GetMediaSourceOnline(PCM_source src)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Returns the online/offline status of the given source.
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="src">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetMediaSourceRPP</slug>
    <functioncall prog_lang="cpp">bool CF_GetMediaSourceRPP(PCM_source* src, char* fn, int fn_sz)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;CF_GetMediaSourceRPP&quot;, PCM_source src, #fn)</functioncall>
    <functioncall prog_lang="lua">boolean retval, string fn = reaper.CF_GetMediaSourceRPP(PCM_source src, string fn)</functioncall>
    <functioncall prog_lang="python">(Boolean retval, PCM_source src, String fn, Int fn_sz) = CF_GetMediaSourceRPP(src, fn, fn_sz)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Get the project associated with this source (BWF, subproject...).
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">

      </retval>
      <retval id="2" datatype="string" retvalname="fn">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="src">

      </parameter>
      <parameter id="2" datatype="string" parmname="fn">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetSWSVersion</slug>
    <functioncall prog_lang="cpp">void CF_GetSWSVersion(char* buf, int buf_sz)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;CF_GetSWSVersion&quot;, #buf)</functioncall>
    <functioncall prog_lang="lua">string buf = reaper.CF_GetSWSVersion(string buf)</functioncall>
    <functioncall prog_lang="python">(String buf, Int buf_sz) = CF_GetSWSVersion(buf, buf_sz)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Return the current SWS version number.
    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="buf">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="buf">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetTakeFXChain</slug>
    <functioncall prog_lang="cpp">FxChain* CF_GetTakeFXChain(MediaItem_Take* take)</functioncall>
    <functioncall prog_lang="eel">FxChain extension_api(&quot;CF_GetTakeFXChain&quot;, MediaItem_Take take)</functioncall>
    <functioncall prog_lang="lua">FxChain reaper.CF_GetTakeFXChain(MediaItem_Take take)</functioncall>
    <functioncall prog_lang="python">FxChain  CF_GetTakeFXChain(MediaItem_Take take)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="FxChain" retvalname="FxChain">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem_Take" parmname="take">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_GetTrackFXChain</slug>
    <functioncall prog_lang="cpp">FxChain* CF_GetTrackFXChain(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">FxChain extension_api(&quot;CF_GetTrackFXChain&quot;, MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">FxChain reaper.CF_GetTrackFXChain(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">FxChain  CF_GetTrackFXChain(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Return a handle to the given track FX chain window.
    </description>
    <chapter_context>
      FX Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="FxChain" retvalname="FxChain">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_LocateInExplorer</slug>
    <functioncall prog_lang="cpp">bool CF_LocateInExplorer(const char* file)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;CF_LocateInExplorer&quot;, &quot;file&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.CF_LocateInExplorer(string file)</functioncall>
    <functioncall prog_lang="python">Boolean  CF_LocateInExplorer(String file)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Select the given file in explorer/finder.
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="file">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_SetMediaSourceOnline</slug>
    <functioncall prog_lang="cpp">void CF_SetMediaSourceOnline(PCM_source* src, bool set)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;CF_SetMediaSourceOnline&quot;, PCM_source src, bool set)</functioncall>
    <functioncall prog_lang="lua">reaper.CF_SetMediaSourceOnline(PCM_source src, boolean set)</functioncall>
    <functioncall prog_lang="python">CF_SetMediaSourceOnline(PCM_source src, Boolean set)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Set the online/offline status of the given source (closes files when set=false).
    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="PCM_source" parmname="src">

      </parameter>
      <parameter id="2" datatype="boolean" parmname="set">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CF_ShellExecute</slug>
    <functioncall prog_lang="cpp">bool CF_ShellExecute(const char* file)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;CF_ShellExecute&quot;, &quot;file&quot;)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.CF_ShellExecute(string file)</functioncall>
    <functioncall prog_lang="python">Boolean  CF_ShellExecute(String file)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>Open the given file or URL in the default application. See also <a href="#CF_LocateInExplorer">CF_LocateInExplorer</a>.</p>

    </description>
    <chapter_context>
      Api-Helper-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="file">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_AnalyzeMediaItemPeakAndRMS</slug>
    <functioncall prog_lang="cpp">bool NF_AnalyzeMediaItemPeakAndRMS(MediaItem* item, double windowSize, void* reaper.array_peaks, void* reaper.array_peakpositions, void* reaper.array_RMSs, void* reaper.array_RMSpositions)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;NF_AnalyzeMediaItemPeakAndRMS&quot;, MediaItem item, windowSize, void* reaper.array_peaks, void* reaper.array_peakpositions, void* reaper.array_RMSs, void* reaper.array_RMSpositions)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.NF_AnalyzeMediaItemPeakAndRMS(MediaItem item, number windowSize, identifier reaper.array_peaks, identifier reaper.array_peakpositions, identifier reaper.array_RMSs, identifier reaper.array_RMSpositions)</functioncall>
    <functioncall prog_lang="python">Boolean  NF_AnalyzeMediaItemPeakAndRMS(MediaItem item, Float windowSize, void reaper.array_peaks, void reaper.array_peakpositions, void reaper.array_RMSs, void reaper.array_RMSpositions)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>This function combines all other NF_Peak/RMS functions in a single one and additionally returns peak RMS positions.</p>
<p><a href="https://forum.cockos.com/showpost.php?p=2050961&amp;postcount=6">Lua example code here</a>.</p>
<p>Note: It’s recommended to use this function with ReaScript/Lua as it provides reaper.array objects. If using this function with other scripting languages, you must provide arrays in the <a href="https://forum.cockos.com/showpost.php?p=2039829&amp;postcount=2">reaper.array format</a>.</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">

      </parameter>
      <parameter id="2" datatype="number" parmname="windowSize">

      </parameter>
      <parameter id="3" datatype="identifier" parmname="reaper.array_peaks">

      </parameter>
      <parameter id="4" datatype="identifier" parmname="reaper.array_peakpositions">

      </parameter>
      <parameter id="5" datatype="identifier" parmname="reaper.array_RMSs">

      </parameter>
      <parameter id="6" datatype="identifier" parmname="reaper.array_RMSpositions">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_GetMediaItemMaxPeakAndMaxPeakPos</slug>
    <functioncall prog_lang="cpp">double NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem* item, double* maxPeakPosOut)</functioncall>
    <functioncall prog_lang="eel">double extension_api(&quot;NF_GetMediaItemMaxPeakAndMaxPeakPos&quot;, MediaItem item, &amp;amp;maxPeakPos)</functioncall>
    <functioncall prog_lang="lua">number retval, number maxPeakPos = reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem item)</functioncall>
    <functioncall prog_lang="python">(Float retval, MediaItem item, Float maxPeakPosOut) = NF_GetMediaItemMaxPeakAndMaxPeakPos(item, maxPeakPosOut)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>See <a href="#NF_GetMediaItemMaxPeak">NF_GetMediaItemMaxPeak</a>, additionally returns maxPeakPos (relative to item position).</p>

    </description>
    <chapter_context>
      Audio Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">

      </retval>
      <retval id="2" datatype="number" retvalname="maxPeakPos">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaItem" parmname="item">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_GetSWSMarkerRegionSub</slug>
    <functioncall prog_lang="cpp">const char* NF_GetSWSMarkerRegionSub(int markerRegionIdx)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;NF_GetSWSMarkerRegionSub&quot;, #retval, int markerRegionIdx)</functioncall>
    <functioncall prog_lang="lua">string reaper.NF_GetSWSMarkerRegionSub(integer markerRegionIdx)</functioncall>
    <functioncall prog_lang="python">String  NF_GetSWSMarkerRegionSub(Int markerRegionIdx)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>Returns SWS/S&amp;amp;M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to <a href="#EnumProjectMarkers">EnumProjectMarkers</a> (not displayed marker/region index).<br />
Returns empty string if marker/region with specified index not found or marker/region subtitle not set.</p>
<p><a href="https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua">Lua code example can be found here</a></p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="markerRegionIdx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_GetSWSTrackNotes</slug>
    <functioncall prog_lang="cpp">const char* NF_GetSWSTrackNotes(MediaTrack* track)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;NF_GetSWSTrackNotes&quot;, #retval, MediaTrack track)</functioncall>
    <functioncall prog_lang="lua">string reaper.NF_GetSWSTrackNotes(MediaTrack track)</functioncall>
    <functioncall prog_lang="python">String  NF_GetSWSTrackNotes(MediaTrack track)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="string" retvalname="string">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_SetSWSMarkerRegionSub</slug>
    <functioncall prog_lang="cpp">bool NF_SetSWSMarkerRegionSub(const char* markerRegionSub, int markerRegionIdx)</functioncall>
    <functioncall prog_lang="eel">bool extension_api(&quot;NF_SetSWSMarkerRegionSub&quot;, &quot;markerRegionSub&quot;, int markerRegionIdx)</functioncall>
    <functioncall prog_lang="lua">boolean reaper.NF_SetSWSMarkerRegionSub(string markerRegionSub, integer markerRegionIdx)</functioncall>
    <functioncall prog_lang="python">Boolean  NF_SetSWSMarkerRegionSub(String markerRegionSub, Int markerRegionIdx)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
<p>Set SWS/S&amp;amp;M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to <a href="#EnumProjectMarkers">EnumProjectMarkers</a>(not displayed marker/region index).<br />
Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project).</p>
<p><a href="https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua%22">Lua code example can be found here</a></p>

    </description>
    <chapter_context>
      Marker Management
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="boolean">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="markerRegionSub">

      </parameter>
      <parameter id="2" datatype="integer" parmname="markerRegionIdx">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_SetSWSTrackNotes</slug>
    <functioncall prog_lang="cpp">void NF_SetSWSTrackNotes(MediaTrack* track, const char* str)</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;NF_SetSWSTrackNotes&quot;, MediaTrack track, &quot;str&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.NF_SetSWSTrackNotes(MediaTrack track, string str)</functioncall>
    <functioncall prog_lang="python">NF_SetSWSTrackNotes(MediaTrack track, String str)</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>

    </description>
    <chapter_context>
      Track Management
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="MediaTrack" parmname="track">

      </parameter>
      <parameter id="2" datatype="string" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>NF_UpdateSWSMarkerRegionSubWindow</slug>
    <functioncall prog_lang="cpp">void NF_UpdateSWSMarkerRegionSubWindow()</functioncall>
    <functioncall prog_lang="eel">extension_api(&quot;NF_UpdateSWSMarkerRegionSubWindow&quot;)</functioncall>
    <functioncall prog_lang="lua">reaper.NF_UpdateSWSMarkerRegionSubWindow()</functioncall>
    <functioncall prog_lang="python">NF_UpdateSWSMarkerRegionSubWindow()</functioncall>
    <requires>
      Reaper=5.965
      SWS=2.10.0.1
      Lua=5.3
    </requires>
    <description>
Redraw the Notes window (call if you've changed a subtitle via [NF_SetSWSMarkerRegionSub](#NF_SetSWSMarkerRegionSub) which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)
    </description>
    <chapter_context>
      User Interface
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_abs</slug>
    <functioncall prog_lang="eel">abs(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the absolute value of the parameter.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_acos</slug>
    <functioncall prog_lang="eel">acos(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the arc cosine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_asin</slug>
    <functioncall prog_lang="eel">asin(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the arc sine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_atan</slug>
    <functioncall prog_lang="eel">atan(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the arc tangent of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_atan2</slug>
    <functioncall prog_lang="eel">atan2(numerator,denominator)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the arc tangent of the numerator divided by the denominator, allowing the denominator to be 0, and using their signs to produce a more meaningful result.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="numerator" parmname="numerator">

      </parameter>
      <parameter id="2" datatype="denominator" parmname="denominator">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_atexit</slug>
    <functioncall prog_lang="eel">atexit(code)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="code" parmname="code">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_ceil</slug>
    <functioncall prog_lang="eel">ceil(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_convolve_c</slug>
    <functioncall prog_lang="eel">convolve_c(dest,src,size)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="src" parmname="src">

      </parameter>
      <parameter id="3" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_cos</slug>
    <functioncall prog_lang="eel">cos(angle)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the cosine of the angle specified (specified in radians).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="angle" parmname="angle">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_defer</slug>
    <functioncall prog_lang="eel">defer(&quot;code&quot;)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().<br/>
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="code" parmname="code">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_eval</slug>
    <functioncall prog_lang="eel">eval(code)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="code" parmname="code">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_exp</slug>
    <functioncall prog_lang="eel">exp(exponent)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the number e ($e, approximately 2.718) raised to the parameter-th power. This function is significantly faster than pow() or the ^ operator.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="exponent" parmname="exponent">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_extension_api</slug>
    <functioncall prog_lang="eel">extension_api(function_name[,...])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Used to call functions exported by extension plugins. The first parameter must be the exported function name, then its own parameters (as if the function was called directly).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="functionname" parmname="functionname">

      </parameter>
      <parameter id="2" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>eel_fclose</slug>
    <functioncall prog_lang="eel">fclose(fp)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Closes a file previously opened with fopen().
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_feof</slug>
    <functioncall prog_lang="eel">feof(fp)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns nonzero if the file fp is at the end of file.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fflush</slug>
    <functioncall prog_lang="eel">fflush(fp)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
If file fp is open for writing, flushes out any buffered data to disk.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fft</slug>
    <functioncall prog_lang="eel">fft(buffer,size)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Performs a FFT on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.<br/>
Note that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.<br/>
Note that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="buffer" parmname="buffer">

      </parameter>
      <parameter id="2" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fft_ipermute</slug>
    <functioncall prog_lang="eel">fft_ipermute(buffer,size)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See <a href="#eel_fft">fft()</a> for more information.</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="buffer" parmname="buffer">

      </parameter>
      <parameter id="2" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fft_permute</slug>
    <functioncall prog_lang="eel">fft_permute(buffer,size)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Permute the output of fft() to have bands in-order. See <a href="#eel_fft">fft()</a> for more information.</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="buffer" parmname="buffer">

      </parameter>
      <parameter id="2" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fft_real</slug>
    <functioncall prog_lang="eel">fft_real(buffer,size)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Performs an FFT, but takes size input samples and produces size/2 complex output pairs. Usually used along with fft_permute(size/2). Inputs/outputs will need to be scaled by 0.5/size.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="buffer" parmname="buffer">

      </parameter>
      <parameter id="2" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fgetc</slug>
    <functioncall prog_lang="eel">fgetc(fp)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Reads a character from file fp, returns -1 if EOF.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fgets</slug>
    <functioncall prog_lang="eel">fgets(fp,#str)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Reads a line from file fp into #str. Returns length of #str read.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
      <parameter id="2" datatype="#str" parmname="#str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_floor</slug>
    <functioncall prog_lang="eel">floor(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fopen</slug>
    <functioncall prog_lang="eel">fopen(fn,mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Opens a file &quot;fn&quot; with mode &quot;mode&quot;. For read, use &quot;r&quot; or &quot;rb&quot;, write &quot;w&quot; or &quot;wb&quot;. Returns a positive integer on success.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fn" parmname="fn">

      </parameter>
      <parameter id="2" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fprintf</slug>
    <functioncall prog_lang="eel">fprintf(fp,format[,...])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Formats a string and writes it to file fp. For more information on format specifiers, see <a href="#eel_sprintf">sprintf()</a>. Returns bytes written to file.</p>
<pre><code>* %% = %
* %s = string from parameter
* %d = parameter as integer
* %i = parameter as integer
* %u = parameter as unsigned integer
* %x = parameter as hex (lowercase) integer
* %X = parameter as hex (uppercase) integer
* %c = parameter as character
* %f = parameter as floating point
* %e = parameter as floating point (scientific notation, lowercase)
* %E = parameter as floating point (scientific notation, uppercase)
* %g = parameter as floating point (shortest representation, lowercase)
* %G = parameter as floating point (shortest representation, uppercase)</code></pre>
<p>Many standard C printf() modifiers can be used, including:</p>
<pre><code>* %.10s = string, but only print up to 10 characters
* %-10s = string, left justified to 10 characters
* %10s = string, right justified to 10 characters
* %+f = floating point, always show sign
* %.4f = floating point, minimum of 4 digits after decimal point
* %10d = integer, minimum of 10 digits (space padded)
* %010f = integer, minimum of 10 digits (zero padded)</code></pre>
<p>Values for format specifiers can be specified as additional parameters to fprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
      <parameter id="2" datatype="format" parmname="format">

      </parameter>
      <parameter id="3" datatype="[...]" parmname="[...]">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fread</slug>
    <functioncall prog_lang="eel">fread(fp,#str,length)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
      <parameter id="2" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="3" datatype="length" parmname="length">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_freembuf</slug>
    <functioncall prog_lang="eel">freembuf(address)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Hints the runtime that memory above the address specified may no longer be used. The runtime may, at its leisure, choose to lose the contents of memory above the address specified.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="address" parmname="address">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fseek</slug>
    <functioncall prog_lang="eel">fseek(fp,offset,whence)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Seeks file fp, offset bytes from whence reference. Whence negative specifies start of file, positive whence specifies end of file, and zero whence specifies current file position.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
      <parameter id="2" datatype="offset" parmname="offset">

      </parameter>
      <parameter id="3" datatype="whence" parmname="whence">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_ftell</slug>
    <functioncall prog_lang="eel">ftell(fp)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the current file position.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_fwrite</slug>
    <functioncall prog_lang="eel">fwrite(fp,#str,len)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Writes up to len characters of #str to file fp. If len is less than 1, the full contents of #str will be written. Returns the number of bytes written to file.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="fp" parmname="fp">

      </parameter>
      <parameter id="2" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="3" datatype="len" parmname="len">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_get_action_context</slug>
    <functioncall prog_lang="eel">get_action_context(#filename,sectionID,cmdID,mode,resolution,val)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Queries contextual information about the script, typically MIDI/OSC input values.<br/>
Returns true if a new value has been updated.<br/>
val will be set to a relative or absolute value depending on mode (=0: absolute mode, &gt;0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.<br/>
Notes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.<br/>
<br/>
For relative mode bindings, calling get_action_context() will return the accumulated relative value in decoded form (not 65 or 63, but +1/-1 etc), and clear the internal state. So if you call it multiple times, the first one will return the accumulated value, and the second will always return 0.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#filename" parmname="#filename">

      </parameter>
      <parameter id="2" datatype="sectionID" parmname="sectionID">

      </parameter>
      <parameter id="3" datatype="cmdID" parmname="cmdID">

      </parameter>
      <parameter id="4" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="5" datatype="resolution" parmname="resolution">

      </parameter>
      <parameter id="6" datatype="val" parmname="val">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_variables</slug>
    <functioncall prog_lang="eel">gfx VARIABLES</functioncall>
    <requires>
      Reaper=5.97
    </requires>
    <description>
The following global variables are special and will be used by the graphics system:<br/>
<br/>
   * gfx_r, gfx_g, gfx_b, gfx_a2 - These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx_a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)<br/>
   * gfx_a, gfx_mode - Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit(). <br/>
   * gfx_w, gfx_h - These are set to the current width and height of the UI framebuffer. <br/>
   * gfx_x, gfx_y - These set the &quot;current&quot; graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. <br/>
   * gfx_clear - If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). <br/>
   * gfx_dest - Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).<br/>
   * gfx_texth - Set to the height of a line of text in the current font. Do not modify this variable.<br/>
   * gfx_ext_retina - If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx_w/gfx_h/etc will be doubled.<br/>
   * mouse_x, mouse_y - mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window.<br/>
   * mouse_wheel, mouse_hwheel - mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.<br/>
   * mouse_cap is a bitfield of mouse and keyboard modifier state.<br/>
        1: left mouse button<br/>
        2: right mouse button<br/>
        4: Control key<br/>
        8: Shift key<br/>
        16: Alt key<br/>
        32: Windows key<br/>
        64: middle mouse button<br/>
    Note: Mousebuttons will be returned after gfx_init(), the other keyboard-modifier only when using gfx_getchar()!
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_arc</slug>
    <functioncall prog_lang="eel">gfx_arc(x,y,r,ang1,ang2[,antialias])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">
x position of the center of the circle
      </parameter>
      <parameter id="2" datatype="y" parmname="y">
y position of the center of the circle
      </parameter>
      <parameter id="3" datatype="r" parmname="r">
the radius of the circle
      </parameter>
      <parameter id="4" datatype="ang1" parmname="ang1">
the beginning of the circle in radians; meant for partial circles; 0-6.28
      </parameter>
      <parameter id="5" datatype="ang2" parmname="ang2">
the end of the circle in radians; meant for partial circles; 0-6.28
      </parameter>
      <parameter id="6" datatype="antialias" parmname="antialias">
&lt;=0.5, antialias off; &gt;0.5, antialias on
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_blit</slug>
    <functioncall prog_lang="eel">gfx_blit(source, scale, rotation[, srcx, srcy, srcw, srch, destx, desty, destw, desth, rotxoffs, rotyoffs])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size), destx/desty/destw/desth specify dest rectangle (if not specified, these will default to reasonable defaults -- destw/desth default to srcw/srch * scale). 
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="source" parmname="source">

      </parameter>
      <parameter id="2" datatype="scale" parmname="scale">

      </parameter>
      <parameter id="3" datatype="rotation" parmname="rotation">

      </parameter>
      <parameter id="4" datatype="srcx" parmname="srcx">

      </parameter>
      <parameter id="5" datatype="srcy" parmname="srcy">

      </parameter>
      <parameter id="6" datatype="srcw" parmname="srcw">

      </parameter>
      <parameter id="7" datatype="srch" parmname="srch">

      </parameter>
      <parameter id="8" datatype="destx" parmname="destx">

      </parameter>
      <parameter id="9" datatype="desty" parmname="desty">

      </parameter>
      <parameter id="10" datatype="destw" parmname="destw">

      </parameter>
      <parameter id="11" datatype="desth" parmname="desth">

      </parameter>
      <parameter id="12" datatype="rotxoffs" parmname="rotxoffs">

      </parameter>
      <parameter id="13" datatype="rotyoffs" parmname="rotyoffs">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_blit</slug>
    <functioncall prog_lang="eel">gfx_blit(source,scale,rotation)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>If three parameters are specified, copies the entirity of the source bitmap to gfx_x,gfx_y using current opacity and copy mode (set with gfx_a, gfx_mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians). For the “source” parameter specify -1 to use the main framebuffer as source, or an image index (see <a href="#eel_gfx_loadimg">gfx_loadimg()</a>.</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="source" parmname="source">

      </parameter>
      <parameter id="2" datatype="scale" parmname="scale">

      </parameter>
      <parameter id="3" datatype="rotation" parmname="rotation">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_blitext</slug>
    <functioncall prog_lang="eel">gfx_blitext(source,coordinatelist,rotation)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Deprecated, use gfx_blit instead.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="source" parmname="source">

      </parameter>
      <parameter id="2" datatype="coordinatelist" parmname="coordinatelist">

      </parameter>
      <parameter id="3" datatype="rotation" parmname="rotation">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_blurto</slug>
    <functioncall prog_lang="eel">gfx_blurto(x,y)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">
x position of the other edge of the blur-region
      </parameter>
      <parameter id="2" datatype="y" parmname="y">
y position of the other edge of the blur-region
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_circle</slug>
    <functioncall prog_lang="eel">gfx_circle(x,y,r[,fill,antialias])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Draws a circle, optionally filling/antialiasing
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">
x position of center of the circle
      </parameter>
      <parameter id="2" datatype="y" parmname="y">
y position of center of the circle
      </parameter>
      <parameter id="3" datatype="r" parmname="r">
radius of the circle
      </parameter>
      <parameter id="4" datatype="fill" parmname="fill">
&lt;=0.5, circle is not filled; &gt;0.5, circle is filled
      </parameter>
      <parameter id="5" datatype="antialias" parmname="antialias">
&lt;=0.5, circle is not antialiased; &gt;0.5, circle is antialiased
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_clienttoscreen</slug>
    <functioncall prog_lang="eel">gfx_clienttoscreen(x,y)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Converts client coordinates x,y to screen coordinates.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">
the x coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates
      </parameter>
      <parameter id="2" datatype="y" parmname="y">
the y coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates 
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_deltablit</slug>
    <functioncall prog_lang="eel">gfx_deltablit(srcimg,srcs,srct,srcw,srch,destx,desty,destw,desth,dsdx,dtdx,dsdy,dtdy,dsdxdy,dtdxdy[,usecliprect=1])</functioncall>
    <requires>
      Reaper=5.95
    </requires>
    <description>
Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.<br/>
<br/>
This function allows you to manipulate the image, which you want to blit, by transforming, moving or cropping it.<br/>
<br/>
To do rotation, you can manipulate dtdx and dsdy together.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="srcimg" parmname="srcimg">
image - the image to blit
      </parameter>
      <parameter id="2" datatype="srcs" parmname="srcs">
positiondeltaX - the delta of the x-position of the image within the blitted area in pixels(useful default: 0)
      </parameter>
      <parameter id="3" datatype="srct" parmname="srct">
positiondeltaY - the delta of the y-position of the image within the blitted area in pixels(useful default: 0)
      </parameter>
      <parameter id="4" datatype="srcw" parmname="srcw">
unknown - (useful default: 0)
      </parameter>
      <parameter id="5" datatype="srch" parmname="srch">
unknown - (useful default: 0)
      </parameter>
      <parameter id="6" datatype="destx" parmname="destx">
positiondeltaX - the delta of the x-position of the blitted area in pixels(useful default: 0)
      </parameter>
      <parameter id="7" datatype="desty" parmname="desty">
positiondeltaY - the delta of the y-position of the blitted area in pixels(useful default: 0)
      </parameter>
      <parameter id="8" datatype="destw" parmname="destw">
blitsizeX - the x-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: width of the image)
      </parameter>
      <parameter id="9" datatype="desth" parmname="desth">
blitsizeY - the y-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: height of the image)
      </parameter>
      <parameter id="10" datatype="dsdx" parmname="dsdx">
stretchfactorX, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeX(useful default: 1)
      </parameter>
      <parameter id="11" datatype="dtdx" parmname="dtdx">
deltaY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta is linear(useful default: 0)
      </parameter>
      <parameter id="12" datatype="dsdy" parmname="dsdy">
deltaX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta is linear(useful default: 0)
      </parameter>
      <parameter id="13" datatype="dtdy" parmname="dtdy">
stretchfactorY, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeY(useful default: 1)
      </parameter>
      <parameter id="14" datatype="dsdxdy" parmname="dsdxdy">
deltacurvedY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta &quot;curves&quot; the delta via a bezier(useful default: 0)
      </parameter>
      <parameter id="15" datatype="dtdxdy" parmname="dtdxdy">
deltacurvedX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta &quot;curves&quot; the delta via a bezier(useful default: 0)
      </parameter>
      <parameter id="16" datatype="usecliprect" parmname="usecliprect">
can be set to 0 or 1(useful default: 0)
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_dock</slug>
    <functioncall prog_lang="eel">gfx_dock(v[,wx,wy,ww,wh])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Call with v=-1 to query docked state, otherwise v&gt;=0 to set docked state. State is &amp;amp;1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh are specified, they will be filled with the undocked window position/size
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="querystate" retvalname="querystate">
0 if not docked; &amp;amp;1 if docked; the byte &amp;amp;9 to &amp;amp;16 returns the docker-index
      </retval>
      <retval id="2" datatype="window_x_position" retvalname="window_x_position">
the x position of the window in pixels
      </retval>
      <retval id="3" datatype="window_y_position" retvalname="window_y_position">
the y position of the window in pixels
      </retval>
      <retval id="4" datatype="window_width" retvalname="window_width">
the width of the window in pixels
      </retval>
      <retval id="5" datatype="window_height" retvalname="window_height">
the height of the window in pixels 
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="v" parmname="v">
-1, query docking-state; 0 and higher, set state of the window to docked
      </parameter>
      <parameter id="2" datatype="wx" parmname="wx">
set to a number to query current-windowx-position
      </parameter>
      <parameter id="3" datatype="wy" parmname="wy">
set to a number to query current-windowy-position
      </parameter>
      <parameter id="4" datatype="ww" parmname="ww">
set to a number to query current-window-width
      </parameter>
      <parameter id="5" datatype="wh" parmname="wh">
set to a number to query current-window-height
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_drawchar</slug>
    <functioncall prog_lang="eel">gfx_drawchar(char)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="char" parmname="char">
the numeric ASCII-representation of the character to be drawn
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_drawnumber</slug>
    <functioncall prog_lang="eel">gfx_drawnumber(n,ndigits)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Draws the number n with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the right side of the drawing. The text height is gfx_texth.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="n" parmname="n">

      </parameter>
      <parameter id="2" datatype="n" parmname="digits">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_drawstr</slug>
    <functioncall prog_lang="eel">gfx_drawstr(str[,flags,right,bottom])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y so that subsequent draws will occur in a similar place.</p>
<p>* If flags, right ,bottom passed in: * flags&amp;amp;1: center horizontally * flags&amp;amp;2: right justify * flags&amp;amp;4: center vertically * flags&amp;amp;8: bottom justify * flags&amp;amp;256: ignore right/bottom, otherwise text is clipped to (gfx_x, gfx_y, right, bottom)</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
      <parameter id="2" datatype="flags" parmname="flags">

      </parameter>
      <parameter id="3" datatype="right" parmname="right">

      </parameter>
      <parameter id="4" datatype="bottom" parmname="bottom">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_getchar</slug>
    <functioncall prog_lang="eel">gfx_getchar([char])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character’s status will be checked, and the function will return greater than 0 if it is pressed.</p>
<p>Common values are standard ASCII, such as ‘a’, ‘A’, ‘=’ and ‘1’, but for many keys multi-byte values are used, including ‘home’, ‘up’, ‘down’, ‘left’, ‘rght’, ‘f1’.. ‘f12’, ‘pgup’, ‘pgdn’, ‘ins’, and ‘del’.</p>
<p>Modified and special keys can also be returned, including:</p>
<pre><code>\* Ctrl/Cmd+A..Ctrl+Z as 1..26
\* Ctrl/Cmd+Alt+A..Z as 257..282
\* Alt+A..Z as &#39;A&#39;+256..&#39;Z&#39;+256
\* 27 for ESC
\* 13 for Enter
\* &#39; &#39; for space</code></pre>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="char" parmname="char">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_getfont</slug>
    <functioncall prog_lang="eel">gfx_getfont([#str])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_getimgdim</slug>
    <functioncall prog_lang="eel">gfx_getimgdim(image,w,h)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Retrieves the dimensions of image (representing a filename: index number) into w and h. Sets these values to 0 if an image failed loading (or if the filename index is invalid).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="w" retvalname="w">

      </retval>
      <retval id="2" datatype="h" retvalname="h">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="image" parmname="image">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_getpixel</slug>
    <functioncall prog_lang="eel">gfx_getpixel(r,g,b)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Gets the value of the pixel at gfx_x,gfx_y into r,g,b. 
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="r" retvalname="r">
the red-color-value, a value between 0 to 1
      </retval>
      <retval id="2" datatype="g" retvalname="g">
the green-color-value, a value between 0 to 1
      </retval>
      <retval id="3" datatype="b" retvalname="b">
the blue-color-value, a value between 0 to 1
      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>eel_gfx_gradrect</slug>
    <functioncall prog_lang="eel">gfx_gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
      <parameter id="3" datatype="w" parmname="w">

      </parameter>
      <parameter id="4" datatype="h" parmname="h">

      </parameter>
      <parameter id="5" datatype="r" parmname="r">

      </parameter>
      <parameter id="6" datatype="g" parmname="g">

      </parameter>
      <parameter id="7" datatype="b" parmname="b">

      </parameter>
      <parameter id="8" datatype="a" parmname="a">

      </parameter>
      <parameter id="9" datatype="drdx" parmname="drdx">

      </parameter>
      <parameter id="10" datatype="dgdx" parmname="dgdx">

      </parameter>
      <parameter id="11" datatype="dbdx" parmname="dbdx">

      </parameter>
      <parameter id="12" datatype="dadx" parmname="dadx">

      </parameter>
      <parameter id="13" datatype="drdy" parmname="drdy">

      </parameter>
      <parameter id="14" datatype="dgdy" parmname="dgdy">

      </parameter>
      <parameter id="15" datatype="dbdy" parmname="dbdy">

      </parameter>
      <parameter id="16" datatype="dady" parmname="dady">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_init</slug>
    <functioncall prog_lang="eel">gfx_init(name[,width,height,dockstate,xpos,ypos])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Initializes the graphics window with title name. Suggested width and height can be specified.</p>
<p>Once the graphics window is open, <a href="#eel_gfx_update">gfx_update()</a> should be called periodically.</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_line</slug>
    <functioncall prog_lang="eel">gfx_line(x,y,x2,y2[,aa])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
      <parameter id="3" datatype="x2" parmname="x2">

      </parameter>
      <parameter id="4" datatype="y2" parmname="y2">

      </parameter>
      <parameter id="5" datatype="aa" parmname="aa">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_lineto</slug>
    <functioncall prog_lang="eel">gfx_lineto(x,y[,aa])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
      <parameter id="3" datatype="aa" parmname="aa">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_loadimg</slug>
    <functioncall prog_lang="eel">gfx_loadimg(image,filename)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. 
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="image" parmname="image">

      </parameter>
      <parameter id="2" datatype="filename" parmname="filename">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_measurechar</slug>
    <functioncall prog_lang="eel">gfx_measurechar(character,&amp;amp;w,&amp;amp;h)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Measures the drawing dimensions of a character with the current font (as set by <a href="#lua_gfx.setfont">gfx.setfont</a>). Returns width and height of character.</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="character" parmname="character">
a character, whose dimensions you want to know
      </parameter>
      <parameter id="2" datatype="w" parmname="w">
the width of this character
      </parameter>
      <parameter id="3" datatype="h" parmname="h">
the height if this character
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_measurestr</slug>
    <functioncall prog_lang="eel">gfx_measurestr(str,&amp;amp;w,&amp;amp;h)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Measures the drawing dimensions of a string with the current font (as set by gfx_setfont). 
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
      <parameter id="2" datatype="w" parmname="w">

      </parameter>
      <parameter id="3" datatype="h" parmname="h">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_muladdrect</slug>
    <functioncall prog_lang="eel">gfx_muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
      <parameter id="3" datatype="w" parmname="w">

      </parameter>
      <parameter id="4" datatype="h" parmname="h">

      </parameter>
      <parameter id="5" datatype="mul_r" parmname="mul_r">

      </parameter>
      <parameter id="6" datatype="mul_g" parmname="mul_g">

      </parameter>
      <parameter id="7" datatype="mul_b" parmname="mul_b">

      </parameter>
      <parameter id="8" datatype="mul_a" parmname="mul_a">

      </parameter>
      <parameter id="9" datatype="add_r" parmname="add_r">

      </parameter>
      <parameter id="10" datatype="add_g" parmname="add_g">

      </parameter>
      <parameter id="11" datatype="add_b" parmname="add_b">

      </parameter>
      <parameter id="12" datatype="add_a" parmname="add_a">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_printf</slug>
    <functioncall prog_lang="eel">gfx_printf(format[, ...])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Formats and draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see <a href="#eel_sprintf">sprintf()</a></p>
<pre><code>* %% = %
* %s = string from parameter
* %d = parameter as integer
* %i = parameter as integer
* %u = parameter as unsigned integer
* %x = parameter as hex (lowercase) integer
* %X = parameter as hex (uppercase) integer
* %c = parameter as character
* %f = parameter as floating point
* %e = parameter as floating point (scientific notation, lowercase)
* %E = parameter as floating point (scientific notation, uppercase)
* %g = parameter as floating point (shortest representation, lowercase)
* %G = parameter as floating point (shortest representation, uppercase)</code></pre>
<p>Many standard C printf() modifiers can be used, including:</p>
<pre><code>* %.10s = string, but only print up to 10 characters
* %-10s = string, left justified to 10 characters
* %10s = string, right justified to 10 characters
* %+f = floating point, always show sign
* %.4f = floating point, minimum of 4 digits after decimal point
* %10d = integer, minimum of 10 digits (space padded)
* %010f = integer, minimum of 10 digits (zero padded)</code></pre>
<p>Values for format specifiers can be specified as additional parameters to gfx_printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="format" parmname="format">

      </parameter>
      <parameter id="2" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_quit</slug>
    <functioncall prog_lang="eel">gfx_quit()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Closes the graphics window.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_rect</slug>
    <functioncall prog_lang="eel">gfx_rect(x,y,w,h[,filled])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Fills a rectangle at x,y,w,h pixels in dimension, filled by default. 
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
      <parameter id="3" datatype="w" parmname="w">

      </parameter>
      <parameter id="4" datatype="h" parmname="h">

      </parameter>
      <parameter id="5" datatype="filled" parmname="filled">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_rectto</slug>
    <functioncall prog_lang="eel">gfx_rectto(x,y)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y. 
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_roundrect</slug>
    <functioncall prog_lang="eel">gfx_roundrect(x,y,w,h,radius[,antialias])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Draws a rectangle with rounded corners. 
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
      <parameter id="3" datatype="w" parmname="w">

      </parameter>
      <parameter id="4" datatype="h" parmname="h">

      </parameter>
      <parameter id="5" datatype="radius" parmname="radius">

      </parameter>
      <parameter id="6" datatype="antialias" parmname="antialias">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_screentoclient</slug>
    <functioncall prog_lang="eel">gfx_screentoclient(x,y)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Converts screen coordinates x,y to client coordinates.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_set</slug>
    <functioncall prog_lang="eel">gfx_set(r[,g,b,a2,mode,dest])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Sets gfx_r/gfx_g/gfx_b/gfx_a2/gfx_mode, sets gfx_dest if final parameter specified
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="r" parmname="r">

      </parameter>
      <parameter id="2" datatype="g" parmname="g">

      </parameter>
      <parameter id="3" datatype="b" parmname="b">

      </parameter>
      <parameter id="4" datatype="a" parmname="a">

      </parameter>
      <parameter id="5" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="6" datatype="dest" parmname="dest">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_setcursor</slug>
    <functioncall prog_lang="eel">gfx_setcursor(resource_id,custom_cursor_name)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like &quot;arrow&quot; (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="resource_id" parmname="resource_id">

      </parameter>
      <parameter id="2" datatype="custom_cursor_name" parmname="custom_cursor_name">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_getdropfile</slug>
    <functioncall prog_lang="eel">integer retval = gfx_getdropfile(integer idx[, string #filename])</functioncall>
    <requires>
      Reaper=5.91
      Lua=5.3
    </requires>
    <description>
Returns filenames, drag'n'dropped into a window created by gfx_init().<br/>
Use idx to get a specific filename, that has been dropped into the gfx_init()-window.<br/>
<br/>
Does NOT support mediaitems/takes or other Reaper-objects!
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already read all dropped filenames.
      </retval>
      <retval id="2" datatype="string" retvalname="filename">
the filename of dropped-file with indexnumber idx
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="idx">
the indexnumber for a filename, that has been dropped into a gfx_init()-window.<br/>
0, the first file; 1, the second file; 2, the third file, etc.<br/>
-1, clears the filelist.
      </parameter>
    </parameters>
    <tags>
     dragndrop
     drop
     file
     filename
     window
     gfx
     window
     eel
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_setfont</slug>
    <functioncall prog_lang="eel">gfx_setfont(idx[,fontface, sz, flags])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Can select a font and optionally configure it. <br/>
<br/>
After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="idx" parmname="idx">
the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.<br/>
idx=1..16 for a configurable font
      </parameter>
      <parameter id="2" datatype="fontface" parmname="fontface">
the name of the font, like &quot;arial&quot;
      </parameter>
      <parameter id="3" datatype="sz" parmname="sz">
the size of the font (8-100)
      </parameter>
      <parameter id="4" datatype="flags" parmname="flags">
flags, how to render the text; values are repeating every 256 numbers<br/>
a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. <br/>
These flags may or may not be supported depending on the font and OS. <br/>
66 and 98, Bold (B), (b)<br/>
73 and 105, italic (I), (i)<br/>
79 and 111, white outline (O), (o)<br/>
82 and 114, reduced(halfbright) (R), (r)<br/>
83 and 115, sharpen (S), (s)<br/>
85 and 117, underline (U), (u)<br/>
86 and 118, inVerse (V), (v)
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_setimgdim</slug>
    <functioncall prog_lang="eel">gfx_setimgdim(image,w,h)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="image" parmname="image">

      </parameter>
      <parameter id="2" datatype="w" parmname="w">

      </parameter>
      <parameter id="3" datatype="h" parmname="h">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_setpixel</slug>
    <functioncall prog_lang="eel">gfx_setpixel(r,g,b)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Writes a pixel of r,g,b to gfx_x,gfx_y.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="r" parmname="r">

      </parameter>
      <parameter id="2" datatype="g" parmname="g">

      </parameter>
      <parameter id="3" datatype="b" parmname="b">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_showmenu</slug>
    <functioncall prog_lang="eel">gfx_showmenu(str)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Shows a popup menu at gfx_x,gfx_y. <br/>
str is a list of fields separated by | characters. Each field represents a menu item.<br/>
Fields can start with special characters:<br/>
<br/>
# : grayed out<br/>
! : checked<br/>
&gt; : this menu item shows a submenu<br/>
&lt; : last item in the current submenu<br/>
<br/>
An empty field will appear as a separator in the menu. gfx_showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.<br/>
Example:<br/>
<br/>
gfx_showmenu(&quot;first item, followed by separator||!second item, checked|&gt;third item which spawns a submenu|#first item in submenu, grayed out|&lt;second and last item in submenu|fourth item in top menu&quot;)
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_transformblit</slug>
    <functioncall prog_lang="eel">gfx_transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (this table must not cross a 65536 item boundary). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="srcimg" parmname="srcimg">

      </parameter>
      <parameter id="2" datatype="destx" parmname="destx">

      </parameter>
      <parameter id="3" datatype="desty" parmname="desty">

      </parameter>
      <parameter id="4" datatype="destw" parmname="destw">

      </parameter>
      <parameter id="5" datatype="desth" parmname="desth">

      </parameter>
      <parameter id="6" datatype="div_w" parmname="div_w">

      </parameter>
      <parameter id="7" datatype="div_h" parmname="div_h">

      </parameter>
      <parameter id="8" datatype="table" parmname="table">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_triangle</slug>
    <functioncall prog_lang="eel">gfx_triangle(x1,y1,x2,y2,x3,y3[x4,y4...])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Draws a filled triangle, or any convex polygon. 
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x1" parmname="x1">

      </parameter>
      <parameter id="2" datatype="y1" parmname="y1">

      </parameter>
      <parameter id="3" datatype="x2" parmname="x2">

      </parameter>
      <parameter id="4" datatype="y2" parmname="y2">

      </parameter>
      <parameter id="5" datatype="x3" parmname="x3">

      </parameter>
      <parameter id="6" datatype="y3" parmname="y3">

      </parameter>
      <parameter id="7" datatype="x4" parmname="x4">

      </parameter>
      <parameter id="8" datatype="y4" parmname="y4">

      </parameter>
      <parameter id="9" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_gfx_update</slug>
    <functioncall prog_lang="eel">gfx_update()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Updates the graphics display, if opened.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_ifft</slug>
    <functioncall prog_lang="eel">ifft(buffer,size)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Perform an inverse FFT. For more information see <a href="#eel_fft">fft()</a>.</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="buffer" parmname="buffer">

      </parameter>
      <parameter id="2" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_ifft_real</slug>
    <functioncall prog_lang="eel">ifft_real(buffer,size)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Performs an inverse FFT, but takes size/2 complex input pairs and produces size real output values. Usually used along with fft_ipermute(size/2).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="buffer" parmname="buffer">

      </parameter>
      <parameter id="2" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_invsqrt</slug>
    <functioncall prog_lang="eel">invsqrt(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_log</slug>
    <functioncall prog_lang="eel">log(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_log10</slug>
    <functioncall prog_lang="eel">log10(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_loop</slug>
    <functioncall prog_lang="eel">loop(count,expression)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Evaluates count once, and then executes expression count, but not more than 1048576, times.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="count" parmname="count">

      </parameter>
      <parameter id="2" datatype="expression" parmname="expression">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_match</slug>
    <functioncall prog_lang="eel">match(needle,haystack[, ...])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Searches for the first parameter in the second parameter, using a simplified regular expression syntax.</p>
<ul>
<li><ul>
<li>= match 0 or more characters</li>
</ul></li>
<li>*? = match 0 or more characters, lazy</li>
<li><ul>
<li>= match 1 or more characters</li>
</ul></li>
<li>+? = match 1 or more characters, lazy</li>
<li>? = match one character</li>
</ul>
<p>You can also use format specifiers to match certain types of data, and optionally put that into a variable:</p>
<ul>
<li>%s means 1 or more chars</li>
<li>%0s means 0 or more chars</li>
<li>%5s means exactly 5 chars</li>
<li>%5-s means 5 or more chars</li>
<li>%-10s means 1-10 chars</li>
<li>%3-5s means 3-5 chars</li>
<li>%0-5s means 0-5 chars</li>
<li>%x, %d, %u, and %f are available for use similarly</li>
<li>%c can be used, but can’t take any length modifiers</li>
<li>Use uppercase (%S, %D, etc) for lazy matching</li>
</ul>
<p>See also sprintf() for other notes, including specifying direct variable references via {}.</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="needle" parmname="needle">

      </parameter>
      <parameter id="2" datatype="haystack" parmname="haystack">

      </parameter>
      <parameter id="3" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_matchi</slug>
    <functioncall prog_lang="eel">matchi(needle,haystack[, ...])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Case-insensitive version of <a href="#eel_matchi">match()</a>.</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="needle" parmname="needle">

      </parameter>
      <parameter id="2" datatype="haystack" parmname="haystack">

      </parameter>
      <parameter id="3" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_max</slug>
    <functioncall prog_lang="eel">max(&amp;amp;value,&amp;amp;value2)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns (by reference) the maximum value of the two parameters. Since max() returns by reference, expressions such as max(x,y) = 5 are possible.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
      <parameter id="2" datatype="value2" parmname="value2">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_mem_get_values</slug>
    <functioncall prog_lang="eel">mem_get_values(offset, ...)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Reads values from memory starting at offset into variables specified. Slower than regular memory reads for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="offset" parmname="offset">

      </parameter>
      <parameter id="2" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_mem_set_values</slug>
    <functioncall prog_lang="eel">mem_set_values(offset, ...)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Writes values to memory starting at offset from variables specified. Slower than regular memory writes for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="offset" parmname="offset">

      </parameter>
      <parameter id="2" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>eel_memcpy</slug>
    <functioncall prog_lang="eel">memcpy(dest,src,length)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Copies length items of memory from src to dest. Regions are permitted to overlap.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="src" parmname="src">

      </parameter>
      <parameter id="3" datatype="length" parmname="length">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_memset</slug>
    <functioncall prog_lang="eel">memset(offset,value,length)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Sets length items of memory at offset to value.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="offset" parmname="offset">

      </parameter>
      <parameter id="2" datatype="value" parmname="value">

      </parameter>
      <parameter id="3" datatype="length" parmname="length">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_min</slug>
    <functioncall prog_lang="eel">min(&amp;amp;value,&amp;amp;value2)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns (by reference) the minimum value of the two parameters. Since min() returns by reference, expressions such as min(x,y) = 5 are possible.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
      <parameter id="2" datatype="value2" parmname="value2">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_printf</slug>
    <functioncall prog_lang="eel">printf(format[, ...])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Output formatted string to system-specific destination, see <a href="#eel_sprintf">sprintf()</a> for more information</p>
<pre><code>* %% = %
* %s = string from parameter
* %d = parameter as integer
* %i = parameter as integer
* %u = parameter as unsigned integer
* %x = parameter as hex (lowercase) integer
* %X = parameter as hex (uppercase) integer
* %c = parameter as character
* %f = parameter as floating point
* %e = parameter as floating point (scientific notation, lowercase)
* %E = parameter as floating point (scientific notation, uppercase)
* %g = parameter as floating point (shortest representation, lowercase)
* %G = parameter as floating point (shortest representation, uppercase)</code></pre>
<p>Many standard C printf() modifiers can be used, including:</p>
<pre><code>* %.10s = string, but only print up to 10 characters
* %-10s = string, left justified to 10 characters
* %10s = string, right justified to 10 characters
* %+f = floating point, always show sign
* %.4f = floating point, minimum of 4 digits after decimal point
* %10d = integer, minimum of 10 digits (space padded)
* %010f = integer, minimum of 10 digits (zero padded)</code></pre>
<p>Values for format specifiers can be specified as additional parameters to printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="format" parmname="format">

      </parameter>
      <parameter id="2" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_rand</slug>
    <functioncall prog_lang="eel">rand([max])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns a psuedorandom real number between 0 and the parameter, inclusive. If the parameter is omitted or less than 1.0, 1.0 is used as a maximum instead.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="max" parmname="max">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_runloop</slug>
    <functioncall prog_lang="eel">runloop(code)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().<br/>
<br/>
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="code" parmname="code">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_sign</slug>
    <functioncall prog_lang="eel">sign(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_sin</slug>
    <functioncall prog_lang="eel">sin(angle)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the sine of the angle specified (specified in radians -- to convert from degrees to radians, multiply by $pi/180, or 0.017453).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="angle" parmname="angle">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_sleep</slug>
    <functioncall prog_lang="eel">sleep(ms)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="ms" parmname="ms">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_sprintf</slug>
    <functioncall prog_lang="eel">sprintf(#dest,format[, ...])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Formats a string and stores it in #dest. Format specifiers begin with %, and may include:<br/>
<br/>
    * %% = %<br/>
    * %s = string from parameter<br/>
    * %d = parameter as integer<br/>
    * %i = parameter as integer<br/>
    * %u = parameter as unsigned integer<br/>
    * %x = parameter as hex (lowercase) integer<br/>
    * %X = parameter as hex (uppercase) integer<br/>
    * %c = parameter as character<br/>
    * %f = parameter as floating point<br/>
    * %e = parameter as floating point (scientific notation, lowercase)<br/>
    * %E = parameter as floating point (scientific notation, uppercase)<br/>
    * %g = parameter as floating point (shortest representation, lowercase)<br/>
    * %G = parameter as floating point (shortest representation, uppercase)<br/>
<br/>
Many standard C printf() modifiers can be used, including:<br/>
<br/>
    * %.10s = string, but only print up to 10 characters<br/>
    * %-10s = string, left justified to 10 characters<br/>
    * %10s = string, right justified to 10 characters<br/>
    * %+f = floating point, always show sign<br/>
    * %.4f = floating point, minimum of 4 digits after decimal point<br/>
    * %10d = integer, minimum of 10 digits (space padded)<br/>
    * %010f = integer, minimum of 10 digits (zero padded)<br/>
<br/>
Values for format specifiers can be specified as additional parameters to sprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#dest" parmname="#dest">

      </parameter>
      <parameter id="2" datatype="format" parmname="format">

      </parameter>
      <parameter id="3" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_sqr</slug>
    <functioncall prog_lang="eel">sqr(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the square of the parameter (similar to value*value, but only evaluating value once).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_sqrt</slug>
    <functioncall prog_lang="eel">sqrt(value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the square root of the parameter. If the parameter is negative, the return value is undefined.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_stack_exch</slug>
    <functioncall prog_lang="eel">stack_exch(&amp;amp;value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_stack_peek</slug>
    <functioncall prog_lang="eel">stack_peek(index)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns a reference to the item on the top of the stack (if index is 0), or to the Nth item on the stack if index is greater than 0. 
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="index" parmname="index">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_stack_pop</slug>
    <functioncall prog_lang="eel">stack_pop(&amp;amp;value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Pops a value from the user stack into value, or into a temporary buffer if value is not specified, and returns a reference to where the stack was popped. Note that no checking is done to determine if the stack is empty, and as such stack_pop() will never fail.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_stack_push</slug>
    <functioncall prog_lang="eel">stack_push(&amp;amp;value)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Pushes value onto the user stack, returns a reference to the parameter.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_str_delsub</slug>
    <functioncall prog_lang="eel">str_delsub(#str,pos,len)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Deletes len characters at offset pos from #str, and returns #str.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="pos" parmname="pos">

      </parameter>
      <parameter id="3" datatype="len" parmname="len">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_str_getchar</slug>
    <functioncall prog_lang="eel">str_getchar(str,offset[,type])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Returns the data at byte-offset offset of str. If offset is negative, position is relative to end of string.type defaults to signed char, but can be specified to read raw binary data in other formats (note the single quotes, these are single/multi-byte characters):</p>
<pre><code>\* &#39;c&#39; - signed char
\* &#39;cu&#39; - unsigned char
\* &#39;s&#39; - signed short
\* &#39;S&#39; - signed short, big endian
\* &#39;su&#39; - unsigned short
\* &#39;Su&#39; - unsigned short, big endian
\* &#39;i&#39; - signed int
\* &#39;I&#39; - signed int, big endian
\* &#39;iu&#39; - unsigned int
\* &#39;Iu&#39; - unsigned int, big endian
\* &#39;f&#39; - float
\* &#39;F&#39; - float, big endian
\* &#39;d&#39; - double
\* &#39;D&#39; - double, big endian</code></pre>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
      <parameter id="2" datatype="offset" parmname="offset">

      </parameter>
      <parameter id="3" datatype="type" parmname="type">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_str_insert</slug>
    <functioncall prog_lang="eel">str_insert(#str,srcstr,pos)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Inserts srcstr into #str at offset pos. Returns #str.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="srcstr" parmname="srcstr">

      </parameter>
      <parameter id="3" datatype="pos" parmname="pos">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_str_setchar</slug>
    <functioncall prog_lang="eel">str_setchar(#str,offset,val[,type]))</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Sets value at offset offset, type optional. offset may be negative to refer to offset relative to end of string, or between 0 and length, inclusive, and if set to length it will lengthen string. See <a href="#eel_str_getchar">str_getchar()</a> for more information on types.</p>

    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="offset" parmname="offset">

      </parameter>
      <parameter id="3" datatype="val" parmname="val">

      </parameter>
      <parameter id="4" datatype="type" parmname="type">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_str_setlen</slug>
    <functioncall prog_lang="eel">str_setlen(#str,len)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Sets length of #str (if increasing, will be space-padded), and returns #str.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="len" parmname="len">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strcat</slug>
    <functioncall prog_lang="eel">strcat(#str,srcstr)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Appends srcstr to #str, and returns #str
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="srcstr" parmname="srcstr">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strcmp</slug>
    <functioncall prog_lang="eel">strcmp(str,str2)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Compares strings, returning 0 if equal
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
      <parameter id="2" datatype="str2" parmname="str2">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strcpy</slug>
    <functioncall prog_lang="eel">strcpy(#str,srcstr)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Copies the contents of srcstr to #str, and returns #str
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="srcstr" parmname="srcstr">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strcpy_from</slug>
    <functioncall prog_lang="eel">strcpy_from(#str,srcstr,offset)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Copies srcstr to #str, but starts reading srcstr at offset offset
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="srcstr" parmname="srcstr">

      </parameter>
      <parameter id="3" datatype="offset" parmname="offset">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strcpy_substr</slug>
    <functioncall prog_lang="eel">strcpy_substr(#str,srcstr,offs,ml))</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
PHP-style (start at offs, offs&lt;0 means from end, ml for maxlen, ml&lt;0 = reduce length by this amt)
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="srcstr" parmname="srcstr">

      </parameter>
      <parameter id="3" datatype="offs" parmname="offs">

      </parameter>
      <parameter id="4" datatype="ml" parmname="ml">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_stricmp</slug>
    <functioncall prog_lang="eel">stricmp(str,str2)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Compares strings ignoring case, returning 0 if equal.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
      <parameter id="2" datatype="str2" parmname="str2">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strlen</slug>
    <functioncall prog_lang="eel">strlen(str)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the length of the string passed as a parameter.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strncat</slug>
    <functioncall prog_lang="eel">strncat(#str,srcstr,maxlen)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="srcstr" parmname="srcstr">

      </parameter>
      <parameter id="3" datatype="maxlen" parmname="maxlen">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strncmp</slug>
    <functioncall prog_lang="eel">strncmp(str,str2,maxlen)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Compares strings giving up after maxlen characters, returning 0 if equal.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
      <parameter id="2" datatype="str2" parmname="str2">

      </parameter>
      <parameter id="3" datatype="maxlen" parmname="maxlen">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strncpy</slug>
    <functioncall prog_lang="eel">strncpy(#str,srcstr,maxlen)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Copies srcstr to #str, stopping after maxlen characters. Returns #str.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="2" datatype="srcstr" parmname="srcstr">

      </parameter>
      <parameter id="3" datatype="maxlen" parmname="maxlen">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_strnicmp</slug>
    <functioncall prog_lang="eel">strnicmp(str,str2,maxlen)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="str" parmname="str">

      </parameter>
      <parameter id="2" datatype="str2" parmname="str2">

      </parameter>
      <parameter id="3" datatype="maxlen" parmname="maxlen">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_tan</slug>
    <functioncall prog_lang="eel">tan(angle)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the tangent of the angle specified (specified in radians).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="angle" parmname="angle">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_tcp_close</slug>
    <functioncall prog_lang="eel">tcp_close(connection)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Closes a TCP connection created by tcp_listen() or tcp_connect().
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="connection" parmname="connection">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_tcp_connect</slug>
    <functioncall prog_lang="eel">tcp_connect(address,port[,block])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Create a new TCP connection to address:port. If block is specified and 0, connection will be made nonblocking. Returns TCP connection ID greater than 0 on success.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="address" parmname="address">

      </parameter>
      <parameter id="2" datatype="port" parmname="port">

      </parameter>
      <parameter id="3" datatype="block" parmname="block">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>eel_tcp_listen</slug>
    <functioncall prog_lang="eel">tcp_listen(port[,interface,#ip_out])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Listens on port specified. Returns less than 0 if could not listen, 0 if no new connection available, or greater than 0 (as a TCP connection ID) if a new connection was made. If a connection made and #ip_out specified, it will be set to the remote IP. interface can be empty for all interfaces, otherwise an interface IP as a string.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="port" parmname="port">

      </parameter>
      <parameter id="2" datatype="interface" parmname="interface">

      </parameter>
      <parameter id="3" datatype="#ip_out" parmname="#ip_out">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_tcp_listen_end</slug>
    <functioncall prog_lang="eel">tcp_listen_end(port)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Ends listening on port specified.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="port" parmname="port">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_tcp_recv</slug>
    <functioncall prog_lang="eel">tcp_recv(connection,#str[,maxlen])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Receives data from a connection to #str. If maxlen is specified, no more than maxlen bytes will be received. If non-blocking, 0 will be returned if would block. Returns less than 0 if error.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="connection" parmname="connection">

      </parameter>
      <parameter id="2" datatype="#str" parmname="#str">

      </parameter>
      <parameter id="3" datatype="maxlen" parmname="maxlen">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_tcp_send</slug>
    <functioncall prog_lang="eel">tcp_send(connection,str[,len])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Sends a string to connection. Returns -1 on error, 0 if connection is non-blocking and would block, otherwise returns length sent. If len is specified and not less than 1, only the first len bytes of the string parameter will be sent.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="connection" parmname="connection">

      </parameter>
      <parameter id="2" datatype="str" parmname="str">

      </parameter>
      <parameter id="3" datatype="len" parmname="len">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_tcp_set_block</slug>
    <functioncall prog_lang="eel">tcp_set_block(connection,block)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Sets whether a connection blocks.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="connection" parmname="connection">

      </parameter>
      <parameter id="2" datatype="block" parmname="block">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_time</slug>
    <functioncall prog_lang="eel">time([&amp;amp;val])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Sets the parameter (or a temporary buffer if omitted) to the number of seconds since January 1, 1970, and returns a reference to that value. The granularity of the value returned is 1 second.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="val" parmname="val">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_time_precise</slug>
    <functioncall prog_lang="eel">time_precise([&amp;amp;val])</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Sets the parameter (or a temporary buffer if omitted) to a system-local timestamp in seconds, and returns a reference to that value. The granularity of the value returned is system defined (but generally significantly smaller than one second).
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="val" parmname="val">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>eel_while</slug>
    <functioncall prog_lang="eel">while(expression)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Executes expression until expression evaluates to zero, or until 1048576 iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression.
    </description>
    <chapter_context>
      Additional EEL-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="expression" parmname="expression">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_atexit</slug>
    <functioncall prog_lang="lua">reaper.atexit(function function)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.<br/>
<br/>
You can't defer this atexit-function, when it is run as exit-function, though, when it is run regularily before exiting the script.<br/>
<br/>
You can define more than one atexit-function. They will be run in the order they've been registered as atexit-functions.<br/>
For example:<br/>
<br/>
    reaper.atexit(exit1)<br/>
    reaper.atexit(exit2)<br/>
    reaper.atexit(exit3)<br/>
    <br/>
will run exit1, exit2 and then exit3, when exiting the script.<br/>
<br/>
You can have up to 1024 atexit-functions set in one script, no matter if its different or the same function.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="function" parmname="function">
the function, with which the script shall finish
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_defer</slug>
    <functioncall prog_lang="lua">boolean retval = reaper.defer(function function)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.<br/>
<br/>
There can be 1024 defer-nodes running at the same time in one script, no matter if it's different functions or the same one.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="retval">
true, node could be created; false, you tried to add more than 1024 defer-nodes in the script
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="function" parmname="function">
the function to be called, when the current defer/runloop-run has ended
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_get_action_context</slug>
    <functioncall prog_lang="lua">boolean is_new_value, string filename_with_path, integer sectionID, integer cmdID, integer mode, integer resolution, integer val = reaper.get_action_context()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns contextual information about the script, typically MIDI/OSC input values.val will be set to a relative or absolute value depending on mode (=0: absolute mode, &amp;gt;0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.Notes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.<br/>
<br/>
For relative mode bindings, calling get_action_context() will return the accumulated relative value in decoded form (not 65 or 63, but +1/-1 etc), and clear the internal state. So if you call it multiple times, the first one will return the accumulated value, and the second will always return 0.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="boolean" retvalname="is_new_value">

      </retval>
      <retval id="2" datatype="string" retvalname="filename_with_path">
the script's own filename with path
      </retval>
      <retval id="3" datatype="integer" retvalname="sectionID">
the section, in which this script was called
      </retval>
      <retval id="4" datatype="integer" retvalname="cmdID">
the command-id associated with this script
      </retval>
      <retval id="5" datatype="integer" retvalname="mode">
-1, if script isn't run by shortcut; 55953, is script is run by shortcut; probably for for MIDI?
      </retval>
      <retval id="6" datatype="integer" retvalname="resolution">
-1, if script isn't run by shortcut; probably more for MIDI?
      </retval>
      <retval id="7" datatype="integer" retvalname="val">
-1, if script isn't run by shortcut; probably more for MIDI?
      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx_variables</slug>
    <functioncall prog_lang="lua">gfx VARIABLES</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
The following global variables are special and will be used by the graphics system:<br/>
<br/>
* gfx.r, gfx.g, gfx.b, gfx.a2 - These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx.a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)<br/>
* gfx.a, gfx.mode - Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit(). <br/>
* gfx.w, gfx.h - These are set to the current width and height of the UI framebuffer. <br/>
* gfx.x, gfx.y - These set the &quot;current&quot; graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. <br/>
* gfx.clear - If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). <br/>
* gfx.dest - Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).<br/>
* gfx.texth - Set to the height of a line of text in the current font. Do not modify this variable.<br/>
* gfx.ext_retina - If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx.w/gfx.h/etc will be doubled.<br/>
* gfx.mouse_x, gfx.mouse_y - gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window.<br/>
* gfx.mouse_wheel, gfx.mouse_hwheel - mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.<br/>
* gfx.mouse_cap is a bitfield of mouse and keyboard modifier state.<br/>
    1: left mouse button<br/>
    2: right mouse button<br/>
    4: Control key<br/>
    8: Shift key<br/>
    16: Alt key<br/>
    32: Windows key<br/>
    64: middle mouse button<br/>
Note: Mousebuttons will be returned after gfx.init(), the other keyboard-modifier only when using gfx.getchar()!
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.arc</slug>
    <functioncall prog_lang="lua">gfx.arc(integer x, integer y, integer r, number ang1, number ang2, optional number antialias)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
x position of the center of the circle
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
y position of the center of the circle
      </parameter>
      <parameter id="3" datatype="integer" parmname="r">
the radius of the circle
      </parameter>
      <parameter id="4" datatype="number" parmname="ang1">
the beginning of the circle in radians; meant for partial circles; 0-6.28
      </parameter>
      <parameter id="5" datatype="number" parmname="ang2">
the end of the circle in radians; meant for partial circles; 0-6.28
      </parameter>
      <parameter id="6" datatype="optional number" parmname="antialias">
&lt;=0.5, antialias off; &gt;0.5, antialias on
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.blit</slug>
    <functioncall prog_lang="lua">integer source = gfx.blit(integer source, number scale, number rotation, optional number srcx, optional number srcy, optional number srcw, optional number srch, optional integer destx, optional integer desty, optional integer destw, optional integer desth, optional integer rotxoffs,  optional integer rotyoffs)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Blits(draws) the content of source-image to another source-image or an opened window.<br/>
<br/>
srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size), destx/desty/destw/desth specify dest rectangle (if not specified, these will default to reasonable defaults -- destw/desth default to srcw/srch * scale). 
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="source">
the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer.
      </parameter>
      <parameter id="2" datatype="number" parmname="scale">
the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger<br/>
has no effect, when destx, desty, destw, desth are given
      </parameter>
      <parameter id="3" datatype="number" parmname="rotation">
the rotation-factor; 0 to 6.28; 3.14 for 180 degrees.
      </parameter>
      <parameter id="4" datatype="optional number" parmname="srcx">
the x-coordinate-offset in the source-image
      </parameter>
      <parameter id="5" datatype="optional number" parmname="srcy">
the y-coordinate-offset in the source-image
      </parameter>
      <parameter id="6" datatype="optional number" parmname="srcw">
the width-offset in the source-image
      </parameter>
      <parameter id="7" datatype="optional number" parmname="srch">
the height-offset in the source-image
      </parameter>
      <parameter id="8" datatype="optional integer" parmname="destx">
the x-coordinate of the blitting destination
      </parameter>
      <parameter id="9" datatype="optional integer" parmname="desty">
the y-coordinate of the blitting destination
      </parameter>
      <parameter id="10" datatype="optional integer" parmname="destw">
the width of the blitting destination; may lead to stretched images
      </parameter>
      <parameter id="11" datatype="optional integer" parmname="desth">
the height of the blitting destination; may lead to stretched images
      </parameter>
      <parameter id="12" datatype="optional number" parmname="rotxoffs">
influences rotation
      </parameter>
      <parameter id="13" datatype="optional number" parmname="rotyoffs">
influences rotation
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.blit_simplified</slug>
    <functioncall prog_lang="lua">integer source = gfx.blit(integer source, number scale, number rotation)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Blits(draws) the content of source-image to another source-image or an opened window.</p>
<p>This is a simplified version of <a href="#lua_gfx.blit">gfx.blit()</a>.</p>
<p>If three parameters are specified, copies the entirity of the source bitmap to gfx.x,gfx.y using current opacity and copy mode (set with gfx.a, gfx.mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).For the “source” parameter specify -1 to use the main framebuffer as source, or an image index (see gfx.loadimg()).</p>

    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="source">
the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer.
      </parameter>
      <parameter id="2" datatype="number" parmname="scale">
the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger
      </parameter>
      <parameter id="3" datatype="number" parmname="rotation">
the rotation-factor; 0 to 6.28; 3.14 for 180 degrees.
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.blitext</slug>
    <functioncall prog_lang="lua">gfx.blitext(source,coordinatelist,rotation)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Deprecated, use gfx.blit instead.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="source" parmname="source">

      </parameter>
      <parameter id="2" datatype="coordinatelist" parmname="coordinatelist">

      </parameter>
      <parameter id="3" datatype="rotation" parmname="rotation">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.blurto</slug>
    <functioncall prog_lang="lua">gfx.blurto(integer x, integer y)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
x position of the other edge of the blur-region
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
y position of the other edge of the blur-region
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.circle</slug>
    <functioncall prog_lang="lua">gfx.circle(integer x, integer y, integer r, optional number fill, optional number antialias)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Draws a circle, optionally filling/antialiasing. 
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
x position of center of the circle
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
y position of center of the circle
      </parameter>
      <parameter id="3" datatype="integer" parmname="r">
radius of the circle
      </parameter>
      <parameter id="4" datatype="optional number" parmname="fill">
&lt;=0.5, circle is not filled; &gt;0.5, circle is filled
      </parameter>
      <parameter id="5" datatype="optional number" parmname="antialias">
&lt;=0.5, circle is not antialiased; &gt;0.5, circle is antialiased
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.clienttoscreen</slug>
    <functioncall prog_lang="lua">int convx, int convy = gfx.clienttoscreen(integer x, integer y)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Converts the coordinates x,y to screen coordinates, returns those values.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="convx">
the converted coordinate in relation of the screen-viewport
      </retval>
      <retval id="2" datatype="integer" retvalname="convy">
the converted coordinate in relation of the screen-viewport
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
the x coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
the y coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates 
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.deltablit</slug>
    <functioncall prog_lang="lua">number retval = gfx.deltablit(integer srcimg, integer srcs, integer srct, integer srcw, integer srch, number destx, number desty, number destw, number desth, number dsdx, number dtdx, number dsdy, number dtdy, number dsdxdy, number dtdxdy,optional integer usecliprect)</functioncall>
    <requires>
      Reaper=5.95
      Lua=5.3
    </requires>
    <description>
Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.<br/>
<br/>
This function allows you to manipulate the image, which you want to blit, by transforming, moving or cropping it.<br/>
<br/>
To do rotation, you can manipulate dtdx and dsdy together.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">
unknown, usually 0
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="srcimg">
image - the image to blit
      </parameter>
      <parameter id="2" datatype="integer" parmname="srcs">
positiondeltaX - the delta of the x-position of the image within the blitted area in pixels(useful default: 0)
      </parameter>
      <parameter id="3" datatype="integer" parmname="srct">
positiondeltaY - the delta of the y-position of the image within the blitted area in pixels(useful default: 0)
      </parameter>
      <parameter id="4" datatype="integer" parmname="srcw">
unknown - (useful default: 0)
      </parameter>
      <parameter id="5" datatype="integer" parmname="srch">
unknown - (useful default: 0)
      </parameter>
      <parameter id="6" datatype="number" parmname="destx">
positiondeltaX - the delta of the x-position of the blitted area in pixels(useful default: 0)
      </parameter>
      <parameter id="7" datatype="number" parmname="desty">
positiondeltaY - the delta of the y-position of the blitted area in pixels(useful default: 0)
      </parameter>
      <parameter id="8" datatype="number" parmname="destw">
blitsizeX - the x-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: width of the image)
      </parameter>
      <parameter id="9" datatype="number" parmname="desth">
blitsizeY - the y-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: height of the image)
      </parameter>
      <parameter id="10" datatype="number" parmname="dsdx">
stretchfactorX, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeX(useful default: 1)
      </parameter>
      <parameter id="11" datatype="number" parmname="dtdx">
deltaY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta is linear(useful default: 0)
      </parameter>
      <parameter id="12" datatype="number" parmname="dsdy">
deltaX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta is linear(useful default: 0)
      </parameter>
      <parameter id="13" datatype="number" parmname="dtdy">
stretchfactorY, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeY(useful default: 1)
      </parameter>
      <parameter id="14" datatype="number" parmname="dsdxdy">
deltacurvedY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta &quot;curves&quot; the delta via a bezier(useful default: 0)
      </parameter>
      <parameter id="15" datatype="number" parmname="dtdxdy">
deltacurvedX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta &quot;curves&quot; the delta via a bezier(useful default: 0)
      </parameter>
      <parameter id="16" datatype="optional integer" parmname="usecliprect">
can be set to 0 or 1(useful default: 0)
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.dock</slug>
    <functioncall prog_lang="lua">number querystate, optional integer window_x_position, optional integer window_y_position, optional integer window_width, optional integer window_height = gfx.dock(integer v, optional integer wx, optional integer wy, optional integer ww, optional integer wh)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Queries or sets the docking-state of the gfx.init()-window.<br/>
Call with v=-1 to query docked state, otherwise v&amp;gt;=0 to set docked state. <br/>
State is &amp;amp;1 if docked, second byte is docker index (or last docker index if undocked). <br/>
If wx-wh specified, additional values will be returned with the undocked window position/size<br/>
<br/>
A specific docking index does not necessarily represent a specific docker, means, you can not query/set left docker top, but rather all dockers that exist in the current screenset.<br/>
So the first queried/set docker can be top-left-docker or the top docker or even one of the bottom dockers.<br/>
The order doesn't seem to make any sense. Especially with more than 16 windows docked in the current screenset.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="querystate">
0 if not docked; &amp;amp;1 if docked;  the bits &amp;amp;256, &amp;amp;512, &amp;amp;1024, &amp;amp;2048 get the docker-index
      </retval>
      <retval id="2" datatype="integer" retvalname="window_x_position">
the x position of the window in pixels
      </retval>
      <retval id="3" datatype="integer" retvalname="window_y_position">
the y position of the window in pixels
      </retval>
      <retval id="4" datatype="integer" retvalname="window_width">
the width of the window in pixels
      </retval>
      <retval id="5" datatype="integer" retvalname="window_height">
the height of the window in pixels 
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="v">
-1, query docking-state; 0 and higher, set state of the window to docked; the bits &amp;amp;256, &amp;amp;512, &amp;amp;1024, &amp;amp;2048 set the docker-index
      </parameter>
      <parameter id="2" datatype="optional integer" parmname="wx">
set to a number to query current-windowx-position
      </parameter>
      <parameter id="3" datatype="optional integer" parmname="wy">
set to a number to query current-windowy-position
      </parameter>
      <parameter id="4" datatype="optional integer" parmname="ww">
set to a number to query current-window-width
      </parameter>
      <parameter id="5" datatype="optional integer" parmname="wh">
set to a number to query current-window-height
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.drawchar</slug>
    <functioncall prog_lang="lua">integer char = gfx.drawchar(integer char)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="char">
the character drawn; 0, if invalid(like strings or characters passed as parameter)
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="char">
the numeric ASCII-representation of the character to be drawn
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.drawnumber</slug>
    <functioncall prog_lang="lua">gfx.drawnumber(number n, integer ndigits)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="number" parmname="n">
the number to be drawn
      </parameter>
      <parameter id="2" datatype="integer" parmname="ndigits">
the number of digits for the precision
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.drawstr</slug>
    <functioncall prog_lang="lua">gfx.drawstr(string str, optional integer flags, optional integer right, optional integer bottom)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.<br/>
<br/>
You can optionally set a clipping area for the text, if you set parameter flags&amp;amp;256 and the parameters right and bottom.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="string" parmname="str">
the string to be drawn into the gfx.init-window
      </parameter>
      <parameter id="2" datatype="optional integer" parmname="flags">
influence, how the text shall be drawn<br/>
 flags&amp;amp;1: center horizontally<br/>
 flags&amp;amp;2: right justify<br/>
 flags&amp;amp;4: center vertically<br/>
 flags&amp;amp;8: bottom justify<br/>
 flags&amp;amp;256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)
      </parameter>
      <parameter id="3" datatype="optional integer" parmname="right">
if flags&amp;amp;256 is set, this parameter clips text on the right side in pixels
      </parameter>
      <parameter id="4" datatype="optional integer" parmname="bottom">
if flags&amp;amp;256 is set, this parameter clips text on the bottom side in pixels 
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.getchar</slug>
    <functioncall prog_lang="lua">integer charactercode = gfx.getchar(optional integer character)</functioncall>
    <requires>
      Reaper=5.94
      Lua=5.3
    </requires>
    <description>
If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. <br/>
<br/>
If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.<br/>
Common values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, <br/>
including 'home', 'up', 'down', 'left', 'right', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. <br/>
<br/>
Modified and special keys can also be returned, including:  <br/>
<br/>
- Ctrl/Cmd+A..Ctrl+Z as 1..26  <br/>
- Ctrl/Cmd+Alt+A..Z as 257..282  <br/>
- Alt+A..Z as 'A'+256..'Z'+256  <br/>
- 27 for ESC  <br/>
- 13 for Enter  <br/>
- ' ' for space  <br/>
-   <br/>
- use 65536 as parameter charactercode to query special flags, returns: &amp;1 (supported in this script), &amp;2=window has focus, &amp;4=window is visible  <br/>
<br/>
Some multibyte-characters, like home, up, down, left, right, f1 .. f12, pgup, pgdn, ins, del are returned as values above 255, but some other characters, like €,  <br/>
are &quot;real&quot;-multibyte-characters, stored as multiple 8-bit-values after each other.<br/>
To retrieve them, you need to run gfx.getchar() twice per defer-cycle and return their retvals into two variables:  <br/>
Example:<br/>
<br/>
            A=gfx.getchar() -- first byte<br/>
            B=gfx.getchar() -- second byte<br/>
            <br/>
            if A==261 and B==128 then reaper.MB(&quot;You typed the Euro-symbol.&quot;, &quot;Message&quot;, 0) end -- typed character is the Euro-currency-symbol.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="charactercode">
either the charactercode or 0 if nothing is pressed<br/>
-1, if the gfx.init-window is closed<br/>
<br/>
When the parameter character is given and not 0, charactercode is either <br/>
0, nothing is pressed, or<br/>
&amp;gt;0, the character you want to check for is pressed.
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="optional integer" parmname="character">
the character to check for; use 65536 to check window-state(visible, focus)<br/>
   &amp;1 (supported in this script), &amp;2=window has focus, &amp;4=window is visible
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.getdropfile</slug>
    <functioncall prog_lang="lua">integer retval, string filename = gfx.getdropfile(integer idx)</functioncall>
    <requires>
      Reaper=5.91
      Lua=5.3
    </requires>
    <description>
Returns filenames, drag'n'dropped into a window created by gfx.init().<br/>
Use idx to get a specific filename, that has been dropped into the gfx.init()-window.<br/>
<br/>
Does NOT support mediaitems/takes or other Reaper-objects!
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already reached the last filename dropped.
      </retval>
      <retval id="2" datatype="string" retvalname="filename">
the filename of dropped-file with indexnumber idx
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="idx">
the indexnumber for a filename, that has been dropped into a gfx.init()-window.<br/>
0, the first file; 1, the second file; 2, the third file, etc.<br/>
-1, clears the filelist.
      </parameter>
    </parameters>
    <tags>
     dragndrop
     drop
     file
     filename
     window
     gfx
     window
     lua
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.getfont</slug>
    <functioncall prog_lang="lua">integer fontindex = gfx.getfont()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns current font index, and the actual font face used by this font (if available).
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="fontindex">
<p>the index of the font used. Use <a href="#lua_gfx.setfont">gfx.setfont</a> to set a font for a specific index.</p>

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.getimgdim</slug>
    <functioncall prog_lang="lua">integer w, integer h = gfx.getimgdim(integer handle)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Retrieves the dimensions of an image specified by handle, returns w, h pair.<br/>
Handle is basically a frame-buffer.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="w">
the width of the image-handle in pixels
      </retval>
      <retval id="2" datatype="integer" retvalname="h">
the height of the image-handle in pixels
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="handle">
the index of the image-handle/framebuffer to retrieve the dimensions from;-1 to 1023; -1 for the currently displayed framebuffer.
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.getpixel</slug>
    <functioncall prog_lang="lua">integer r, integer g, integer b = gfx.getpixel()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="r">
the red-color-value, a value between 0 to 1
      </retval>
      <retval id="2" datatype="integer" retvalname="g">
the green-color-value, a value between 0 to 1
      </retval>
      <retval id="3" datatype="integer" retvalname="b">
the blue-color-value, a value between 0 to 1
      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.gradrect</slug>
    <functioncall prog_lang="lua">gfx.gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
      <parameter id="3" datatype="w" parmname="w">

      </parameter>
      <parameter id="4" datatype="h" parmname="h">

      </parameter>
      <parameter id="5" datatype="r" parmname="r">

      </parameter>
      <parameter id="6" datatype="g" parmname="g">

      </parameter>
      <parameter id="7" datatype="b" parmname="b">

      </parameter>
      <parameter id="8" datatype="a" parmname="a">

      </parameter>
      <parameter id="9" datatype="drdx" parmname="drdx">

      </parameter>
      <parameter id="10" datatype="dgdx" parmname="dgdx">

      </parameter>
      <parameter id="11" datatype="dbdx" parmname="dbdx">

      </parameter>
      <parameter id="12" datatype="dadx" parmname="dadx">

      </parameter>
      <parameter id="13" datatype="drdy" parmname="drdy">

      </parameter>
      <parameter id="14" datatype="dgdy" parmname="dgdy">

      </parameter>
      <parameter id="15" datatype="dbdy" parmname="dbdy">

      </parameter>
      <parameter id="16" datatype="dady" parmname="dady">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.init</slug>
    <functioncall prog_lang="lua">integer retval = gfx.init(string &quot;name&quot;, optional integer width, optional integer height, optional integer dockstate, optional integer xpos, optional integer ypos)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Initializes the graphics window with title name. Suggested width and height can be specified.Once the graphics window is open, gfx.update() should be called periodically. <br/>
<br/>
Only one graphics-window can be opened per script! Calling gfx.ini after a window has been opened has no effect.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">
1.0, if window is opened
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="name">
the name of the window, which will be shown in the title of the window
      </parameter>
      <parameter id="2" datatype="optional integer" parmname="width">
the width of the window; minmum is 50
      </parameter>
      <parameter id="3" datatype="optional integer" parmname="height">
the height of the window; minimum is 16
      </parameter>
      <parameter id="4" datatype="optional integer" parmname="dockstate">
&amp;1=0, undocked; &amp;1=1, docked
      </parameter>
      <parameter id="5" datatype="optional integer" parmname="xpos">
x-position of the window in pixels; minimum is -80
      </parameter>
      <parameter id="6" datatype="optional integer" parmname="ypos">
y-position of the window in pixels; minimum is -15
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.line</slug>
    <functioncall prog_lang="lua">gfx.line(integer x, integer y, integer x2, integer y2, optional number aa)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased. 
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
x-position of start of the line in pixels
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
y-position of start of the line in pixels
      </parameter>
      <parameter id="3" datatype="integer" parmname="x2">
x-position of the end of the line in pixels
      </parameter>
      <parameter id="4" datatype="integer" parmname="y2">
y-position of the end of the line in pixels
      </parameter>
      <parameter id="5" datatype="optional number" parmname="aa">
&lt;0.5, no antialias; &gt;=0.5, antialias
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.lineto</slug>
    <functioncall prog_lang="lua">gfx.lineto(integer x, integer y, number aa)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
x-position of the end of the line in pixels
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
y-position of the end of the line in pixels
      </parameter>
      <parameter id="3" datatype="optional number" parmname="aa">
&lt;0.5, no antialias; &gt;=0.5, antialias
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.loadimg</slug>
    <functioncall prog_lang="lua">integer retval = gfx.loadimg(integer image, string filename)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. 
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
the image-index in case of successful loading; -1 if loading failed
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="image">
the buffer-index(0 - 1023), in which to load the image
      </parameter>
      <parameter id="2" datatype="string" parmname="filename">
the path+filename of the image to be loaded
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.measurechar</slug>
    <functioncall prog_lang="lua">integer width, integer height = gfx.measurechar(integer char)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Measures the drawing dimensions of a character with the current font (as set by <a href="#lua_gfx.setfont">gfx.setfont</a>). Returns width and height of character.</p>

    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="width">
the width of the character in pixels
      </retval>
      <retval id="2" datatype="integer" retvalname="height">
the height of the character in pixels
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="char">
ASCII-Code of the character to measure
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>lua_gfx.measurestr</slug>
    <functioncall prog_lang="lua">integer width, integer height = gfx.measurestr(string str)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
<p>Measures the drawing dimensions of a string with the current font (as set by <a href="#lua_gfx.setfont">gfx.setfont</a>). Returns width and height of string.</p>

    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="width">
the width of the drawing dimensions of str in pixels
      </retval>
      <retval id="2" datatype="integer" retvalname="height">
the height of the drawing dimensions of str in pixels
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="str">
the string, whose drawing dimensions you want to know
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.muladdrect</slug>
    <functioncall prog_lang="lua">integer retval = gfx.muladdrect(integer x, integer y, integer w, integer h, number mul_r, number mul_g, number mul_b, optional number mul_a, optional number add_r, optional number add_g, optional number add_b, optional number add_a)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Multiplies each pixel within the given rectangle(x,y,w,h) by the mul_*-parameters and optionally adds add_*-parameters, and updates in-place. Useful for changing brightness/contrast, or other effects.<br/>
<br/>
The multiplied values usually affect only pixels, that are not black(0,0,0,0), while the added values affect all pixels.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
unknown
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
the x-position of the rectangle in pixels, in which you want to multiply/add colorvalues to
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
the y-position of the rectangle in pixels, in which you want to multiply/add colorvalues to
      </parameter>
      <parameter id="3" datatype="integer" parmname="w">
the width of the rectangle in pixels, in which you want to multiply/add colorvalues to
      </parameter>
      <parameter id="4" datatype="integer" parmname="h">
the height of the rectangle in pixels, in which you want to multiply/add colorvalues to
      </parameter>
      <parameter id="5" datatype="number" parmname="mul_r">
the red-value to multiply by within the rectangle; 0 to 1
      </parameter>
      <parameter id="6" datatype="number" parmname="mul_g">
the green-value to multiply by within the rectangle; 0 to 1
      </parameter>
      <parameter id="7" datatype="number" parmname="mul_b">
the blue-value to multiply by within the rectangle; 0 to 1
      </parameter>
      <parameter id="8" datatype="optional number" parmname="mul_a">
the alpha-value to multiply by within the rectangle; 0 to 1
      </parameter>
      <parameter id="9" datatype="optional number" parmname="add_r">
the red-value to add by within the rectangle; 0 to 1
      </parameter>
      <parameter id="10" datatype="optional number" parmname="add_g">
the green-value to add by within the rectangle; 0 to 1
      </parameter>
      <parameter id="11" datatype="optional number" parmname="add_b">
the blue-value to add by within the rectangle; 0 to 1
      </parameter>
      <parameter id="12" datatype="optional number" parmname="add_a">
the alpha-value to add by within the rectangle; 0 to 1
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.printf</slug>
    <functioncall prog_lang="lua">gfx.printf(format[, ...])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()<br/>
<br/>
    * %% = %<br/>
    * %s = string from parameter<br/>
    * %d = parameter as integer<br/>
    * %i = parameter as integer<br/>
    * %u = parameter as unsigned integer<br/>
    * %x = parameter as hex (lowercase) integer<br/>
    * %X = parameter as hex (uppercase) integer<br/>
    * %c = parameter as character<br/>
    * %f = parameter as floating point<br/>
    * %e = parameter as floating point (scientific notation, lowercase)<br/>
    * %E = parameter as floating point (scientific notation, uppercase)<br/>
    * %g = parameter as floating point (shortest representation, lowercase)<br/>
    * %G = parameter as floating point (shortest representation, uppercase)<br/>
<br/>
Many standard C printf() modifiers can be used, including:<br/>
<br/>
    * %.10s = string, but only print up to 10 characters<br/>
    * %-10s = string, left justified to 10 characters<br/>
    * %10s = string, right justified to 10 characters<br/>
    * %+f = floating point, always show sign<br/>
    * %.4f = floating point, minimum of 4 digits after decimal point<br/>
    * %10d = integer, minimum of 10 digits (space padded)<br/>
    * %010f = integer, minimum of 10 digits (zero padded)<br/>
<br/>
Values for format specifiers can be specified as additional parameters to gfx.printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="format" parmname="format">

      </parameter>
      <parameter id="2" datatype="..." parmname="...">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.quit</slug>
    <functioncall prog_lang="lua">integer retval = gfx.quit()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Closes the graphics window.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
unknown, usually 0
      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.rect</slug>
    <functioncall prog_lang="lua">integer retval = gfx.rect(integer x, integer y, integer w, integer h, optional integer filled)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Fills a rectangle at x,y, w,h pixels in dimension, filled by default. 
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
unknown; usually 0
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
the x-position of the upper left corner
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
the y-position of the upper left corner
      </parameter>
      <parameter id="3" datatype="integer" parmname="w">
the width of the rectangle; must be positive
      </parameter>
      <parameter id="4" datatype="integer" parmname="h">
the height of the rectangle; must be positive
      </parameter>
      <parameter id="5" datatype="optional integer" parmname="filled">
0, unfilled; 1, filled; omitted/nil, filled
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.rectto</slug>
    <functioncall prog_lang="lua">integer x_coordinate = gfx.rectto(integer x, integer y)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y. 
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="x_coordinate">
the x-coordinate given as x-parameter; the purpose is unknown
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
the x-coordinate, to which the rectangle shall be drawn to
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
the y-coordinate, to which the rectangle shall be drawn to
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.roundrect</slug>
    <functioncall prog_lang="lua">integer retval = gfx.roundrect(integer x, integer y, integer w, integer h, number radius, optional integer antialias)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Draws a rectangle with rounded corners. 
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
unknown
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
the x-coordinate of the upper-left corner of the rectangle in pixels
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
the y-coordinate of the upper-left corner of the rectangle in pixels
      </parameter>
      <parameter id="3" datatype="integer" parmname="w">
the width of the rectangle in pixels
      </parameter>
      <parameter id="4" datatype="integer" parmname="h">
the height of the rectangle in pixels
      </parameter>
      <parameter id="5" datatype="number" parmname="radius">
the radius of the rounded corners of the rectangle; 0, for a normal rectangle; 
      </parameter>
      <parameter id="6" datatype="number" parmname="antialias">
0, no antialias; 1 and higher, apply antialias to the rectangle
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.screentoclient</slug>
    <functioncall prog_lang="lua">integer convx, integer convy = gfx.screentoclient(integer x, integer y)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Converts the screen coordinates x,y to client coordinates, returns those values.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="convx">
the x-client-coordinate, as converted from the x-screen-coordinate, in pixels
      </retval>
      <retval id="2" datatype="integer" retvalname="convy">
the y-client-coordinate, as converted from the y-screen-coordinate, in pixels
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x">
the x-screen-coordinate that shall be converted, in pixels
      </parameter>
      <parameter id="2" datatype="integer" parmname="y">
the y-screen-coordinate that shall be converted, in pixels
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.set</slug>
    <functioncall prog_lang="lua">integer retval = gfx.set(number r, optional number g, optional number b, optional number a2, optional integer mode, optional integer dest)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
Sets color, drawing mode and optionally the drawing-image-source-destination.<br/>
If sets the corresponding gfx-variables.<br/>
Sets gfx.r/gfx.g/gfx.b/gfx.a2/gfx.mode sets gfx.dest if final parameter specified
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
unknown
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="number" parmname="r">
the red-value; 0 to 1; if only parameter r is given, it's value will be used for g, b as well
      </parameter>
      <parameter id="2" datatype="optional number" parmname="g">
the green-value; 0 to 1
      </parameter>
      <parameter id="3" datatype="optional number" parmname="b">
the blue-value; 0 to 1
      </parameter>
      <parameter id="4" datatype="optional number" parmname="a2">
the alpha-value; 0 to 1
      </parameter>
      <parameter id="5" datatype="optional integer" parmname="mode">
the drawing-mode; <br/>
 Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). <br/>
 Add 2.0 to disable source alpha for gfx.blit(). <br/>
 Add 4.0 to disable filtering for gfx.blit(). 
      </parameter>
      <parameter id="6" datatype="optional integer" parmname="dest">
the source-image/framebuffer to draw to; -1 to 1023; -1 for the currently displayed framebuffer.
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.setcursor</slug>
    <functioncall prog_lang="lua">gfx.setcursor(resource_id,custom_cursor_name)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like &quot;arrow&quot; (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="resource_id" parmname="resource_id">

      </parameter>
      <parameter id="2" datatype="custom_cursor_name" parmname="custom_cursor_name">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.setfont</slug>
    <functioncall prog_lang="lua">gfx.setfont(integer idx,optional string fontface, optional integer sz, optional integer flags)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Can select a font and optionally configure it. <br/>
<br/>
After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="idx">
the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.<br/>
idx=1..16 for a configurable font
      </parameter>
      <parameter id="2" datatype="optional string" parmname="fontface">
the name of the font, like &quot;arial&quot;
      </parameter>
      <parameter id="3" datatype="optional integer" parmname="sz">
the size of the font (8-100)
      </parameter>
      <parameter id="4" datatype="optional integer" parmname="flags">
flags, how to render the text; up to 4 flags can be passed at the same time<br/>
a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. <br/>
These flags may or may not be supported depending on the font and OS. <br/>
  66 and 98, Bold (B), (b)<br/>
  73 and 105, italic (I), (i)<br/>
  79 and 111, white outline (O), (o)<br/>
  82 and 114, blurred (R), (r)<br/>
  83 and 115, sharpen (S), (s)<br/>
  85 and 117, underline (U), (u)<br/>
  86 and 118, inVerse (V), (v)<br/>
<br/>
To create such a multibyte-character, assume this flag-value as a 32-bit-value.<br/>
The first 8 bits are the first flag, the next 8 bits are the second flag, <br/>
the next 8 bits are the third flag and the last 8 bits are the second flag.<br/>
The flagvalue(each dot is a bit): .... ....   .... ....   .... ....   .... ....<br/>
If you want to set it to Bold(B) and Italic(I), you use the ASCII-Codes of both(66 and 73 respectively),<br/>
take them apart into bits and set them in this 32-bitfield.<br/>
The first 8 bits will be set by the bits of ASCII-value 66(B), the second 8 bits will be set by the bits of ASCII-Value 73(I).<br/>
The resulting flagvalue is: 0100 0010   1001 0010   0000 0000   0000 0000<br/>
which is a binary representation of the integer value 18754, which combines 66 and 73 in it.
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.setimgdim</slug>
    <functioncall prog_lang="lua">integer retval = gfx.setimgdim(integer image, integer w, integer h)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Resize image referenced by index 0..1024-1, width and height must be 0-2048. The contents of the image will be undefined after the resize.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
0, if image couldn't be set(e.g. no such handle exists); 1, if setting new dimensions was successful
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="image">
the image-handle/framebuffer, whose dimensions you want to set
      </parameter>
      <parameter id="2" datatype="integer" parmname="w">
the new width of the image-handle
      </parameter>
      <parameter id="3" datatype="integer" parmname="h">
the new height of the image-handle
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.setpixel</slug>
    <functioncall prog_lang="lua">integer retval = gfx.setpixel(number r, number g, number b)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Writes a pixel of r,g,b to gfx.x,gfx.y.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="retval">
1, if writing that pixel was successful; -1, is not
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="number" parmname="r">
the red-color-value of the pixel; 0-1
      </parameter>
      <parameter id="2" datatype="number" parmname="g">
the green-color-value of the pixel; 0-1
      </parameter>
      <parameter id="3" datatype="number" parmname="b">
the blue-color-value of the pixel; 0-1
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.showmenu</slug>
    <functioncall prog_lang="lua">integer selection = gfx.showmenu(string str)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. <br/>
Each field represents a menu item. Fields can start with special characters:#, grayed out; !, checked; &amp;gt;, this menu item shows a submenu;&amp;gt;, last item in the current submenu. <br/>
An empty field will appear as a separator in the menu. <br/>
<br/>
Example: selection = gfx.showmenu(&quot;first item, followed by separator||!second item, checked|&amp;gt;third item which spawns a submenu|#first item in submenu, grayed out|&amp;gt;second and last item in submenu|fourth item in top menu&quot;)<br/>
<br/>
gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="integer" retvalname="selection">
the menu-entry the user selected, with 1 for the first, 2 for the second, etc; 0, nothing was selected
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="str">
a string with the menu-entries; separate the entrynames with a |<br/>
  Each menu-entry can start with special characters that influence the appearance of that entry: <br/>
  #, item is grayed out; !, item is checked; &amp;gt;, this menu item shows a submenu;&amp;lt;, last item in the current submenu. 
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.transformblit</slug>
    <functioncall prog_lang="lua">gfx.transformblit(integer srcimg, integer destx, integer desty, integer destw, integer desth, integer div_w, integer div_h, table table)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="srcimg">
the image-index (1 to 1024) that you want to blit into the screenbuffer -1
      </parameter>
      <parameter id="2" datatype="integer" parmname="destx">
x position of the blit picture
      </parameter>
      <parameter id="3" datatype="integer" parmname="desty">
y position of the blit picture
      </parameter>
      <parameter id="4" datatype="integer" parmname="destw">
width of the blit picture
      </parameter>
      <parameter id="5" datatype="integer" parmname="desth">
height of the blit picture
      </parameter>
      <parameter id="6" datatype="integer" parmname="div_w">
unknown, 2 to 64; probably related to parameter table
      </parameter>
      <parameter id="7" datatype="integer" parmname="div_h">
unknown, 2 to 64; probably related to parameter table
      </parameter>
      <parameter id="8" datatype="table" parmname="table">
a table of the texture coordinates, with each entry being set to a pair of value, eg: 1, 0. Will be read from left to right and from top to bottom.<br/>
table[1]=1,2<br/>
table[2]=2,3<br/>
table[3]=3,1<br/>
How these values work needs more research...
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.triangle</slug>
    <functioncall prog_lang="lua">gfx.triangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, [optional integer x4, optional integer y4, ...)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Draws a filled triangle, or any convex polygon. 
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="x1">
the x-position of the first point of the polygon
      </parameter>
      <parameter id="2" datatype="integer" parmname="y1">
the y-position of the first point of the polygon
      </parameter>
      <parameter id="3" datatype="integer" parmname="x2">
the x-position of the second point of the polygon
      </parameter>
      <parameter id="4" datatype="integer" parmname="y2">
the y-position of the second point of the polygon
      </parameter>
      <parameter id="5" datatype="integer" parmname="x3">
the x-position of the third point of the polygon
      </parameter>
      <parameter id="6" datatype="integer" parmname="y3">
the y-position of the third point of the polygon
      </parameter>
      <parameter id="7" datatype="optional integer" parmname="x4">
the x-position of the fourth point of the polygon
      </parameter>
      <parameter id="8" datatype="optional integer" parmname="y4">
the y-position of the fourth point of the polygon
      </parameter>
      <parameter id="9" datatype="...            " parmname="">
...
      </parameter>
      <parameter id="10" datatype="...            " parmname="">
...
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gmem_attach</slug>
    <functioncall prog_lang="lua">reaper.gmem_attach(string sharedMemoryName)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach.<br/>
<br/>
Must be called, before you can use a specific gmem-variable-index with gmem_write!
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="string" parmname="sharedMemoryName">
the name of the shared memory
      </parameter>
    </parameters>
    <tags>
     lua
     shared memory
     video processor
     eel2
     jsfx
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gmem_read</slug>
    <functioncall prog_lang="lua">number retval = reaper.gmem_read(integer index)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1&amp;lt;&amp;lt;25).<br/>
<br/>
returns nil if not available
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="number" retvalname="retval">
the stored number-value stored in gmem-variable with index
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="integer" parmname="index">
the index of the memory-variable to read from
      </parameter>
    </parameters>
    <tags>
     lua
     shared memory
     read
     video processor
     eel2
     jsfx
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gmem_write</slug>
    <functioncall prog_lang="lua">reaper.gmem_write(integer index, number value)</functioncall>
    <requires>
      Reaper=5.97
      Lua=5.3
    </requires>
    <description>
<p>Write (number) value to shared memory attached-to by gmem_attach(). index can be [0..1&amp;lt;&amp;lt;25).</p>
<p>Before you can write into a currently unused variable with index “index”, you must call <a href="#lua_gmem_attach">gmem_attach</a> first!</p>

    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="integer" parmname="index">
the index of the memory-variable to write to
      </parameter>
      <parameter id="2" datatype="number" parmname="value">
a number, either integer or float
      </parameter>
    </parameters>
    <tags>
     lua
     shared memory
     write
     video processor
     eel2
     jsfx
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_gfx.update</slug>
    <functioncall prog_lang="lua">gfx.update()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Updates the graphics display, if opened
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_new_array</slug>
    <functioncall prog_lang="lua">ReaperArray reaper_array = reaper.new_array([table|array][size])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Creates a new reaper.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="reaper_array" retvalname="reaper_array">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="table|array" parmname="table|array">

      </parameter>
      <parameter id="2" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_runloop</slug>
    <functioncall prog_lang="lua">boolean retval = reaper.runloop(function function)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="retval">
true, if succeded
      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="function" parmname="function">
the function to be called
      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.clear</slug>
    <functioncall prog_lang="lua">boolean retval = {reaper.array}.clear([value, offset, size])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="value" parmname="value">

      </parameter>
      <parameter id="2" datatype="offset" parmname="offset">

      </parameter>
      <parameter id="3" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.convolve</slug>
    <functioncall prog_lang="lua">integer retval = {reaper.array}.convolve([src, srcoffs, size, destoffs])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
      <parameter id="2" datatype="scroffs" parmname="scroffs">

      </parameter>
      <parameter id="3" datatype="size" parmname="size">

      </parameter>
      <parameter id="4" datatype="destoffs" parmname="destoffs">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.copy</slug>
    <functioncall prog_lang="lua">integer retval = {reaper.array}.copy([src, srcoffs, size, destoffs])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="retval" retvalname="retval">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
      <parameter id="2" datatype="srcoffs" parmname="srcoffs">

      </parameter>
      <parameter id="3" datatype="size" parmname="size">

      </parameter>
      <parameter id="4" datatype="destoffs" parmname="destoffs">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.fft</slug>
    <functioncall prog_lang="lua">{reaper.array}.fft(size[, permute, offset])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="size" parmname="size">

      </parameter>
      <parameter id="2" datatype="premute" parmname="premute">

      </parameter>
      <parameter id="3" datatype="offset" parmname="offset">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.fft_real</slug>
    <functioncall prog_lang="lua">{reaper.array}.fft_real(size[, permute, offset])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Performs a forward real-&amp;gt;complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="size" parmname="size">

      </parameter>
      <parameter id="2" datatype="premute" parmname="premute">

      </parameter>
      <parameter id="3" datatype="offset" parmname="offset">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.get_alloc</slug>
    <functioncall prog_lang="lua">integer size = {reaper.array}.get_alloc()</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns the maximum (allocated) size of the array.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="size" retvalname="size">

      </retval>
    </retvals>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.ifft</slug>
    <functioncall prog_lang="lua">{reaper.array}.ifft(size[, permute, offset])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="size" parmname="size">

      </parameter>
      <parameter id="2" datatype="permute" parmname="permute">

      </parameter>
      <parameter id="3" datatype="offset" parmname="offset">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.ifft_real</slug>
    <functioncall prog_lang="lua">{reaper.array}.ifft_real(size[, permute, offset])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Performs a backwards complex-&amp;gt;real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="size" parmname="size">

      </parameter>
      <parameter id="2" datatype="permute" parmname="permute">

      </parameter>
      <parameter id="3" datatype="offset" parmname="offset">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.multiply</slug>
    <functioncall prog_lang="lua">{reaper.array}.multiply([src, srcoffs, size, destoffs])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
      <parameter id="2" datatype="srcoffs" parmname="srcoffs">

      </parameter>
      <parameter id="3" datatype="size" parmname="size">

      </parameter>
      <parameter id="4" datatype="destoff" parmname="destoff">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.resize</slug>
    <functioncall prog_lang="lua">{reaper.array}.resize(size)</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Resizes an array object to size. size must be [0..max_size].
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>lua_{reaper.array}.table</slug>
    <functioncall prog_lang="lua">{reaper.array}.table([offset, size])</functioncall>
    <requires>
      Reaper=5.62
      Lua=5.3
    </requires>
    <description>
Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.
    </description>
    <chapter_context>
      Additional Lua-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="offset" parmname="offset">

      </parameter>
      <parameter id="2" datatype="size" parmname="size">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>python_atexit</slug>
    <functioncall prog_lang="python">RPR_atexit(String code)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.
    </description>
    <chapter_context>
      Additional Python-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="String" parmname="code">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>python_defer</slug>
    <functioncall prog_lang="python">RPR_defer(String code)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().<br/>
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.    
    </description>
    <chapter_context>
      Additional Python-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="code" parmname="code">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>python_runloop</slug>
    <functioncall prog_lang="python">RPR_runloop(String code)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().<br/>
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
    </description>
    <chapter_context>
      Additional Python-Functions
    </chapter_context>
    <retvals>
    </retvals>
    <parameters>
      <parameter id="1" datatype="code" parmname="code">

      </parameter>
    </parameters>
    <tags>
     
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>__mergesort</slug>
    <functioncall prog_lang="cpp">void (*__mergesort)(void* base, size_t nmemb, size_t size, int (*cmpfunc)(const void*,const void*), void* tmpspace)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
is a stable sorting function with an API similar to qsort().<br/>
HOWEVER, it requires some temporary space, equal to the size of the data being sorted, so you can pass it as the last parameter,<br/>
or NULL and it will allocate and free space internally. 
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="base" parmname="base">

      </parameter>
      <parameter id="2" datatype="nmemb" parmname="nmemb">

      </parameter>
      <parameter id="3" datatype="size" parmname="size">

      </parameter>
      <parameter id="4" datatype="*cmpfunc" parmname="*cmpfunc">

      </parameter>
      <parameter id="5" datatype="tmpspace" parmname="tmpspace">

      </parameter>
    </parameters>
    <tags>
     cpp
     sort
     qsort
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AddCustomizableMenu</slug>
    <functioncall prog_lang="cpp">bool (*AddCustomizableMenu)(const char* menuidstr, const char* menuname, const char* kbdsecname, bool addtomainmenu)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Adds customizable menu.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="menuidstr" parmname="menuidstr">
is some unique identifying string
      </parameter>
      <parameter id="2" datatype="menuname" parmname="menuname">
is for main menus only (displayed in a menu bar somewhere), NULL otherwise 
      </parameter>
      <parameter id="3" datatype="kbdsecname" parmname="kbdsecname">
is the name of the KbdSectionInfo registered by this plugin, or NULL for the main actions section
      </parameter>
      <parameter id="4" datatype="addtomainmenu" parmname="addtomainmenu">
true, add to main menu; false, don't add to main menu
      </parameter>
    </parameters>
    <tags>
     cpp
     add
     customizable
     menu
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>AddExtensionsMainMenu</slug>
    <functioncall prog_lang="cpp">bool (*AddExtensionsMainMenu)()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Add an Extensions main menu, which the extension can populate/modify with <a href="#plugin_register">plugin_register(“hookcustommenu”)</a></p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <tags>
     cpp
     extension
     menu
     add
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>plugin_register</slug>
    <functioncall prog_lang="cpp">int (*plugin_register)(const char* name, void* infostruct)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
like rec-&gt;Register<br/>
        <br/>
if you have a function called myfunction(..) that you want to expose to other extensions or plug-ins, use register(&quot;API_myfunction&quot;,funcaddress), and &quot;-API_myfunction&quot; to remove.          Other extensions then use GetFunc(&quot;myfunction&quot;) to get the function pointer.<br/>
<br/>
REAPER will also export the function address to ReaScript, so your extension could supply a Python module that provides a wrapper called RPR_myfunction(..). <br/>
register(&quot;APIdef_myfunction&quot;,defstring) will include your function declaration and help in the auto-generated REAPER API header and ReaScript documentation.<br/>
<br/>
defstring is four null-separated fields: return type, argument types, argument names, and help.<br/>
<br/>
   Example: double myfunction(char* str, int flag) would have defstring=&quot;double\0char*,int\0str,flag\0help text for myfunction&quot;<br/>
<br/>
another thing you can register is &quot;hookcommand&quot;, which you pass a callback:<br/>
<br/>
   NON_API: bool runCommand(int command, int flag);<br/>
            register(&quot;hookcommand&quot;,runCommand);<br/>
<br/>
which returns TRUE to eat (process) the command.<br/>
<br/>
flag is usually 0 but can sometimes have useful info depending on the message.<br/>
<br/>
note: it's OK to call Main_OnCommand() within your runCommand, however you MUST check for recursion if doing so!<br/>
in fact, any use of this hook should benefit from a simple reentrancy test...<br/>
<br/>
to get notified when an action of the main section is performed, you can register &quot;hookpostcommand&quot;, which you pass a callback:<br/>
<br/>
   NON_API: void postCommand(int command, int flag);<br/>
            register(&quot;hookpostcommand&quot;,postCommand);<br/>
<br/>
you can also register &quot;hookcommand2&quot;, which you pass a callback:<br/>
<br/>
   NON_API: bool onAction(KbdSectionInfo *sec, int command, int val, int valhw, int relmode, HWND hwnd);<br/>
            register(&quot;hookcommand2&quot;,onAction);<br/>
<br/>
which returns TRUE to eat (process) the command.<br/>
<br/>
val/valhw are used for actions learned with MIDI/OSC.<br/>
val = \[0..127\] and valhw = -1 for MIDI CC, <br/>
valhw &gt;=0 for MIDI pitch or OSC with value = (valhw|val&lt;&lt;7)/16383.0, <br/>
relmode absolute(0) or 1/2/3 for relative adjust modes<br/>
<br/>
you can also register command IDs for actions, register with &quot;command_id&quot;, parameter is a unique string with only A-Z, 0-9, returns command ID (or 0 if not supported/out of actions)<br/>
<br/>
register(&quot;command_id_lookup&quot;, unique_string) will look up the integer ID of the named action without registering the string if it doesn't already exist.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="name" parmname="name">

      </parameter>
      <parameter id="2" datatype="infostruct" parmname="infostruct">

      </parameter>
    </parameters>
    <tags>
     cpp
     plugin
     register
     command
     actioncommandid
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Audio_RegHardwareHook</slug>
    <functioncall prog_lang="cpp">int (*Audio_RegHardwareHook)(bool isAdd, audio_hook_register_t* reg)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Registers Audio Hardware-Hook.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="isAdd" parmname="isAdd">

      </parameter>
      <parameter id="2" datatype="reg" parmname="reg">

      </parameter>
    </parameters>
    <tags>
     cpp
     register
     hardware
     hook
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CalculatePeaks</slug>
    <functioncall prog_lang="cpp">int (*CalculatePeaks)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Calculates Peaks.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="srcBlock" parmname="srcBlock">

      </parameter>
      <parameter id="2" datatype="pksBlock" parmname="pksBlock">

      </parameter>
    </parameters>
    <tags>
     cpp
     calculate
     peaks
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CalculatePeaksFloatSrcPtr</slug>
    <functioncall prog_lang="cpp">int (*CalculatePeaksFloatSrcPtr)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Calculates Peaks.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="srcBlock" parmname="srcBlock">

      </parameter>
      <parameter id="2" datatype="pksBlock" parmname="pksBlock">

      </parameter>
    </parameters>
    <tags>
     cpp
     calculate
     peaks
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CountActionShortcuts</slug>
    <functioncall prog_lang="cpp">int (*CountActionShortcuts)(KbdSectionInfo* section, int cmdID)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Returns the number of shortcuts that exist for the given command ID. See <a href="#GetActionShortcutDesc">GetActionShortcutDesc</a>, <a href="#DeleteActionShortcut">DeleteActionShortcut</a>, <a href="#DoActionShortcutDialog">DoActionShortcutDialog</a>.</p>
<p>Use <a href="#NamedCommandLookup">NamedCommandLookup</a> if you want to have the right commandID of an action, that is registered with an ActionCommandID-string.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">
the section, in which the action lies<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
      <parameter id="2" datatype="cmdID" parmname="cmdID">
the commandID of the action, whose count of shortcuts you want to know.
      </parameter>
    </parameters>
    <tags>
     cpp
     count
     actions
     shortcuts
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CreateLocalOscHandler</slug>
    <functioncall prog_lang="cpp">void* (*CreateLocalOscHandler)(void* obj, void* callback)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>callback is a function pointer: void (*callback)(void* obj, const char* msg, int msglen), which handles OSC messages sent from REAPER. The function return is a local osc handler. See <a href="#SendLocalOscMessage">SendLocalOscMessage</a>, <a href="#DestroyOscHandler">DestroyOscHandler</a>.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="obj" parmname="obj">

      </parameter>
      <parameter id="2" datatype="callback" parmname="callback">

      </parameter>
    </parameters>
    <tags>
     cpp
     create
     osc
     handler
     local
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CreateMIDIInput</slug>
    <functioncall prog_lang="cpp">midi_Input* (*CreateMIDIInput)(int dev)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="midi_Input*" retvalname="midi_Input*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dev" parmname="dev">

      </parameter>
    </parameters>
    <tags>
     cpp
     create
     midi
     input
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CreateMIDIOutput</slug>
    <functioncall prog_lang="cpp">midi_Output* (*CreateMIDIOutput)(int dev, bool streamMode, int* msoffset100)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc. 
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="midi_Output*" retvalname="midi_Output*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dev" parmname="dev">

      </parameter>
      <parameter id="2" datatype="streamMode" parmname="streamMode">
true, msoffset points to a persistent variable(see msoffset100 for more details)
      </parameter>
      <parameter id="3" datatype="int*" parmname="msoffset100">
points to a persistent variable that can change and reflects added delay to output in 100ths of a millisecond. 
      </parameter>
    </parameters>
    <tags>
     cpp
     midi
     output
     create
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>CSurf_OnOscControlMessage</slug>
    <functioncall prog_lang="cpp">void (*CSurf_OnOscControlMessage)(const char* msg, const float* arg)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
On OSC Control Message.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="msg" parmname="msg">

      </parameter>
      <parameter id="2" datatype="arg" parmname="arg">

      </parameter>
    </parameters>
    <tags>
     cpp
     control
     surface
     osc
     message
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DeleteActionShortcut</slug>
    <functioncall prog_lang="cpp">bool (*DeleteActionShortcut)(KbdSectionInfo* section, int cmdID, int shortcutidx)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Delete the specific shortcut for the given command ID. See <a href="#CountActionShortcuts">CountActionShortcuts</a>, <a href="#GetActionShortcutDesc">GetActionShortcutDesc</a>, <a href="#DoActionShortcutDialog">DoActionShortcutDialog</a>.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">
the section, to which this action belongs to<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
      <parameter id="2" datatype="cmdID" parmname="cmdID">
the commandID for the shortcut to be deleted
      </parameter>
      <parameter id="3" datatype="shortcutidx" parmname="shortcutidx">
the shortcut to be deleted
      </parameter>
    </parameters>
    <tags>
     cpp
     shortcut
     actions
     delete
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DestroyLocalOscHandler</slug>
    <functioncall prog_lang="cpp">void (*DestroyLocalOscHandler)(void* local_osc_handler)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>See <a href="#CreateLocalOscHandler">CreateLocalOscHandler</a>, <a href="#SendLocalOscMessage">SendLocalOscMessage</a>.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="local_osc_handler" parmname="local_osc_handler">

      </parameter>
    </parameters>
    <tags>
     cpp
     osc
     destroy
     local
     handler
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DoActionShortcutDialog</slug>
    <functioncall prog_lang="cpp">bool (*DoActionShortcutDialog)(HWND hwnd, KbdSectionInfo* section, int cmdID, int shortcutidx)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx &gt;= 0 &amp;&amp; shortcutidx &lt; CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added. See <a href="#CountActionShortcuts">CountActionShortcuts</a>, <a href="#GetActionShortcutDesc">GetActionShortcutDesc</a>, <a href="#DeleteActionShortcut">DeleteActionShortcut</a>.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">

      </parameter>
      <parameter id="2" datatype="cmdID" parmname="cmdID">

      </parameter>
      <parameter id="3" datatype="shortcutidx" parmname="shortcutidx">

      </parameter>
    </parameters>
    <tags>
     cpp
     actions
     commandid
     shortcut
     add
     dialog
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>DuplicateCustomizableMenu</slug>
    <functioncall prog_lang="cpp">bool (*DuplicateCustomizableMenu)(void* srcmenu, void* destmenu)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Populate destmenu with all the entries and submenus found in srcmenu.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="srcmenu" parmname="srcmenu">

      </parameter>
      <parameter id="2" datatype="destmenu" parmname="destmenu">

      </parameter>
    </parameters>
    <tags>
     cpp
     menu
     duplicate
     customizeable
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>FreeHeapPtr</slug>
    <functioncall prog_lang="cpp">void (*FreeHeapPtr)(void* ptr)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
free heap memory returned from a Reaper API function
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <parameters>
      <parameter id="1" datatype="ptr" parmname="ptr">

      </parameter>
    </parameters>
    <tags>
     cpp
     pointer
     free
     heap
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>get_config_var</slug>
    <functioncall prog_lang="cpp">void* (*get_config_var)(const char* name, int* szOut)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>gets config var</p>
<p>see <a href="Reaper_Config_Variables.html">Reaper_Config_Variables.html</a> for valid config-vars</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="name" parmname="name">

      </parameter>
      <parameter id="2" datatype="szOut" parmname="szOut">

      </parameter>
    </parameters>
    <tags>
     cpp
     config
     var
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>get_midi_config_var</slug>
    <functioncall prog_lang="cpp">void* (*get_midi_config_var)(const char* name, int* szOut);</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Deprecated.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="name" parmname="name">

      </parameter>
      <parameter id="2" datatype="szOut" parmname="szOut">

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     midi
     config
     var
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetActionShortcutDesc</slug>
    <functioncall prog_lang="cpp">bool (*GetActionShortcutDesc)(KbdSectionInfo* section, int cmdID, int shortcutidx, char* desc, int desclen)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Get the text description of a specific shortcut for the given command ID. See <a href="#CountActionShortcuts">CountActionShortcuts</a>,<a href="#DeleteActionShortcut">DeleteActionShortcut</a>,<a href="#DoActionShortcutDialog">DoActionShortcutDialog</a>.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">
the section of the action<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
      <parameter id="2" datatype="cmdID" parmname="cmdID">
the commandID of the action, whose shortcut-description you want.
      </parameter>
      <parameter id="3" datatype="shortcutidx" parmname="shortcutidx">

      </parameter>
      <parameter id="4" datatype="desc" parmname="desc">

      </parameter>
      <parameter id="5" datatype="descclean" parmname="descclean">

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     shortcut
     description
     section
     command
     commandid
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetColorTheme</slug>
    <functioncall prog_lang="cpp">INT_PTR (*GetColorTheme)(int idx, int defval)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Deprecated, see <a href="#GetColorThemeStruct">GetColorThemeStruct</a>.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="INT_PTR" retvalname="INT_PTR">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="idx" parmname="idx">

      </parameter>
      <parameter id="2" datatype="defval" parmname="defval">

      </parameter>
    </parameters>
    <tags>
     cpp
     color
     theme
     get
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetColorThemeStruct</slug>
    <functioncall prog_lang="cpp">void* (*GetColorThemeStruct)(int* szOut)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
returns the whole color theme (icontheme.h) and the size
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="szOut" parmname="szOut">

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     color
     theme
     struct
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetContextMenu</slug>
    <functioncall prog_lang="cpp">HMENU (*GetContextMenu)(int idx)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
gets context menus. submenu 0:trackctl, 1:mediaitems, 2:ruler, 3:empty track area 
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HMENU" retvalname="HMENU">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="idx" parmname="idx">

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     context
     menu
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetIconThemePointer</slug>
    <functioncall prog_lang="cpp">void* (*GetIconThemePointer)(const char* name)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
returns a named icontheme entry
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="name" parmname="name">

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     icon
     theme
     pointer
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetIconThemeStruct</slug>
    <functioncall prog_lang="cpp">void* (*GetIconThemeStruct)(int* szOut)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
returns a pointer to the icon theme (icontheme.h) and the size of that struct.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="szOut" parmname="szOut">

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     icon
     theme
     struct
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPeaksBitmap</slug>
    <functioncall prog_lang="cpp">void* (*GetPeaksBitmap)(PCM_source_peaktransfer_t* pks, double maxamp, int w, int h, LICE_IBitmap* bmp)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
See note in reaper_plugin.h about PCM_source_peaktransfer_t::samplerate
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="pks" parmname="pks">

      </parameter>
      <parameter id="2" datatype="maxamp" parmname="maxamp">

      </parameter>
      <parameter id="3" datatype="w" parmname="w">

      </parameter>
      <parameter id="4" datatype="h" parmname="h">

      </parameter>
      <parameter id="5" datatype="bmp" parmname="bmp">

      </parameter>
    </parameters>
    <tags>
     cpp
     peaks
     bitmap
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPreferredDiskReadMode</slug>
    <functioncall prog_lang="cpp">void (*GetPreferredDiskReadMode)(int* mode, int* nb, int* bs)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Gets user configured preferred disk read mode. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="2" datatype="nb" parmname="nb">

      </parameter>
      <parameter id="3" datatype="bs" parmname="bs">

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     preferred
     diskread
     mode
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPreferredDiskReadModePeak</slug>
    <functioncall prog_lang="cpp">void (*GetPreferredDiskReadModePeak)(int* mode, int* nb, int* bs)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Gets user configured preferred disk read mode for use when building peaks. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="2" datatype="nb" parmname="nb">

      </parameter>
      <parameter id="3" datatype="bs" parmname="bs">

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     preferred
     diskread
     mode
     peak
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetPreferredDiskWriteMode</slug>
    <functioncall prog_lang="cpp">void (*GetPreferredDiskWriteMode)(int* mode, int* nb, int* bs)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Gets user configured preferred disk write mode. nb will receive two values, the initial and maximum write buffer counts. mode/nb/bs are all parameters that should be passed to WDL_FileWrite, see for more information.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="2" datatype="nb" parmname="nb">

      </parameter>
      <parameter id="3" datatype="bs" parmname="bs">

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     preferred
     diskwrite
     mode
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetMediaItemTakeInfo</slug>
    <functioncall prog_lang="cpp">void* (*GetSetMediaItemTakeInfo)(MediaItem_Take* tk, const char* parmname, void* setNewValue)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Gets/Sets Media Item Take-parameters. Works like GetMediaItemTakeInfo_Value and SetMediaItemTakeInfo_Value but has more parameters.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tk" parmname="tk">
a MediaItem_Take-object, that shall be altered
      </parameter>
      <parameter id="2" datatype="parmname" parmname="parmname">
the name of the parameter to be changed<br/>
P_TRACK : pointer to MediaTrack (read-only)<br/>
P_ITEM : pointer to MediaItem (read-only)<br/>
P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.<br/>
GUID : GUID * : 16-byte GUID, can query or update<br/>
P_NAME : char * to take name<br/>
D_STARTOFFS : double *, start offset in take of item<br/>
D_VOL : double *, take volume<br/>
D_PAN : double *, take pan<br/>
D_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)<br/>
D_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)<br/>
D_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)<br/>
B_PPITCH, bool *, preserve pitch when changing rate<br/>
I_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)<br/>
I_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter<br/>
I_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).<br/>
IP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)
      </parameter>
      <parameter id="3" datatype="setNewValue" parmname="setNewValue">
the new value to be set to the parameter. See the description of parmname above for more details.
      </parameter>
    </parameters>
    <tags>
     cpp
     get
     set
     mediaitem
     take
     info
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetMediaTrackInfo</slug>
    <functioncall prog_lang="cpp">void* (*GetSetMediaTrackInfo)(MediaTrack* tr, const char* parmname, void* setNewValue)</functioncall>
    <requires>
      Reaper=5.941
    </requires>
    <description>
Gets/Sets MediaTrack-parameters. Works like GetMediaTrackInfo_Value and SetMediaTrackInfo_Value but has more parameters.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">
the Mediatrack-object, that shall be modified
      </parameter>
      <parameter id="2" datatype="parmname" parmname="parmname">
the parameter to be gotten or set<br/>
P_PARTRACK : MediaTrack * : parent track (read-only)<br/>
P_PROJECT : ReaProject * : parent project (read-only)<br/>
GUID : GUID * : 16-byte GUID, can query or update (do not use on master though)<br/>
P_NAME : char * : track name (on master returns NULL)<br/>
P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)<br/>
P_MCP_LAYOUT : const char * : layout name<br/>
P_TCP_LAYOUT : const char * : layout name<br/>
<br/>
B_MUTE : bool * : mute flag<br/>
B_PHASE : bool * : invert track phase<br/>
IP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)<br/>
I_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place<br/>
I_FXEN : int * : 0=fx bypassed, nonzero = fx active<br/>
I_RECARM : int * : 0=not record armed, 1=record armed<br/>
I_RECINPUT : int * : record input. &lt;0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)<br/>
I_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace<br/>
I_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))<br/>
I_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)<br/>
I_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)<br/>
I_NCHAN : int * : number of track channels, must be 2-64, even<br/>
I_SELECTED : int * : track selected? 0 or 1<br/>
I_WNDH : int * : current TCP window height (Read-only)<br/>
I_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc<br/>
I_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children<br/>
I_MIDIHWOUT : int * : track midi hardware output index (&lt;0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))<br/>
I_PERFFLAGS : int * : track perf flags (&amp;1=no media buffering, &amp;2=no anticipative FX)<br/>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).<br/>
I_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels<br/>
D_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)<br/>
D_PAN : double * : trim pan of track (-1..1)<br/>
D_WIDTH : double * : width of track (-1..1)<br/>
D_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6<br/>
D_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6<br/>
I_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)<br/>
D_PANLAW : double * : pan law of track. &lt;0 for project default, 1.0 for +0dB, etc<br/>
P_ENV : read only, returns TrackEnvelope *, setNewValue=&lt;VOLENV, &lt;PANENV, etc<br/>
B_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master<br/>
B_SHOWINTCP : bool * : show track panel in tcp -- do not use on master<br/>
B_MAINSEND : bool * : track sends audio to parent<br/>
C_MAINSEND_OFFS : char * : track send to parent channel offset<br/>
B_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)<br/>
C_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly<br/>
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)<br/>
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)
      </parameter>
      <parameter id="3" datatype="setNewValue" parmname="setNewValue">
the new value. See the description of parmname above for more details
      </parameter>
    </parameters>
    <tags>
     cpp
     get
     set
     track
     parameters
     info
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetObjectState</slug>
    <functioncall prog_lang="cpp">char* (*GetSetObjectState)(void* obj, const char* str)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
get or set the state of a {track,item,envelope} as an RPPXML chunk<br/>
str=&quot;&quot; to get the chunk string returned (must call FreeHeapPtr when done)<br/>
supply str to set the state (returns zero)
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="char*" retvalname="char*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="obj" parmname="obj">
<p>the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack.</p>

      </parameter>
      <parameter id="2" datatype="str" parmname="str">
<p>supply str to set the state (returns zero); str="" to get the chunk string returned (must call <a href="#FreeHeapPtr">FreeHeapPtr</a> when done)</p>

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     set
     object
     state
     rppxml
     statechunk
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetObjectState2</slug>
    <functioncall prog_lang="cpp">char* (*GetSetObjectState2)(void* obj, const char* str, bool isundo)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
get or set the state of a {track,item,envelope} as an RPPXML chunk         
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="char*" retvalname="char*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="obj" parmname="obj">
the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack.
      </parameter>
      <parameter id="2" datatype="str" parmname="str">
supply str to set the state (returns zero); str=&quot;&quot; to get the chunk string returned (must call FreeHeapPtr when done)
      </parameter>
      <parameter id="3" datatype="isundo" parmname="isundo">
set, if the state will be used for undo purposes (which may allow REAPER to get the state more efficiently
      </parameter>
    </parameters>
    <tags>
     cpp
     get
     set
     object
     state
     rppxml
     statechunk
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetTrackMIDISupportFile</slug>
    <functioncall prog_lang="cpp">const char* (*GetSetTrackMIDISupportFile)(ReaProject* proj, MediaTrack* track, int which, const char* filename)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Get or set the filename for storage of various track MIDI characteristics. <br/>
<br/>
If fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="char*" retvalname="char*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="track" parmname="track">
<p>the MediaTrack-object of the track to be treated</p>

      </parameter>
      <parameter id="3" datatype="which" parmname="which">
<p>thich MIDI-file to use 0, MIDI colormap image file, 1, MIDI bank/program select file, 2, MIDI text string file, 3, MIDI note mapping file.</p>

      </parameter>
      <parameter id="4" datatype="filename" parmname="filename">
<p>If fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned.</p>

      </parameter>
    </parameters>
    <tags>
     cpp
     get
     set
     midi
     support
     file
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>GetSetTrackSendInfo</slug>
    <functioncall prog_lang="cpp">void* (*GetSetTrackSendInfo)(MediaTrack* tr, int category, int sendidx, const char* parmname, void* setNewValue)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Get or set send/receive/hardware output attributes.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="tr" parmname="tr">
the MediaTrack object for the track to be gotten or set
      </parameter>
      <parameter id="2" datatype="category" parmname="category">
&lt;0 for receives, 0=sends, &gt;0 for hardware outputs 
      </parameter>
      <parameter id="3" datatype="sendidx" parmname="sendidx">
0..n (to enumerate, iterate over sendidx until it returns NULL) 
      </parameter>
      <parameter id="4" datatype="parmname" parmname="parmname">
the parameter to get/set<br/>
P_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs<br/>
P_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs<br/>
P_ENV : read only, returns TrackEnvelope *, setNewValue=&lt;VOLENV, &lt;PANENV, etc<br/>
B_MUTE : returns bool *<br/>
B_PHASE : returns bool *, true to flip phase<br/>
B_MONO : returns bool *<br/>
D_VOL : returns double *, 1.0 = +0dB etc<br/>
D_PAN : returns double *, -1..+1<br/>
D_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc<br/>
I_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx<br/>
I_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)<br/>
I_SRCCHAN : returns int *, index,&amp;1024=mono, -1 for none<br/>
I_DSTCHAN : returns int *, index, &amp;1024=mono, otherwise stereo pair, hwout:&amp;512=rearoute<br/>
I_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan
      </parameter>
      <parameter id="5" datatype="setNewValue" parmname="setNewValue">
the new value to be set
      </parameter>
    </parameters>
    <tags>
     cpp
     get
     set
     send
     receive
     hardware
     output
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetToggleCommandStateThroughHooks</slug>
    <functioncall prog_lang="cpp">int (*GetToggleCommandStateThroughHooks)(KbdSectionInfo* section, int command_id)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns the state of an action via extension plugins' hooks.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">
the section, in which the action appears in<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
      <parameter id="2" datatype="command_id" parmname="command_id">
the command-id of the action, whose state you want
      </parameter>
    </parameters>
    <tags>
     cpp
     get
     set
     toggle
     comand
     state
     hooks
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>HiresPeaksFromSource</slug>
    <functioncall prog_lang="cpp">void (*HiresPeaksFromSource)(PCM_source* src, PCM_source_peaktransfer_t* block)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Hires peaks from source.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
      <parameter id="2" datatype="block" parmname="block">

      </parameter>
    </parameters>
    <tags>
     cpp
     hires
     peaks
     source
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>IsInRealTimeAudio</slug>
    <functioncall prog_lang="cpp">int (*IsInRealTimeAudio)()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Are we in a realtime audio thread (between OnAudioBuffer calls,not in some worker/anticipative FX thread)? threadsafe
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <tags>
     cpp
     realtime
     audio
     thread
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>IsItemTakeActiveForPlayback</slug>
    <functioncall prog_lang="cpp">bool (*IsItemTakeActiveForPlayback)(MediaItem* item, MediaItem_Take* take)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
get whether a take will be played (active take, unmuted, etc)
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">
MediaItem in which the take is to be checked
      </parameter>
      <parameter id="2" datatype="take" parmname="take">
the MediaItem_Take to be checked
      </parameter>
    </parameters>
    <tags>
     cpp
     mediaitem
     take
     check
     played
     active
     unmute
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>IsREAPER</slug>
    <functioncall prog_lang="cpp">bool (*IsREAPER)()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Returns true if dealing with REAPER, returns false for ReaMote, etc
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <tags>
     cpp
     reaper
     reamote
     check
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_enumerateActions</slug>
    <functioncall prog_lang="cpp">int (*kbd_enumerateActions)(KbdSectionInfo* section, int idx, const char** nameOut)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Enumerates actions.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">
the section, in which the action exists<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
      <parameter id="2" datatype="idx" parmname="idx">

      </parameter>
      <parameter id="3" datatype="nameOut" parmname="nameOut">

      </parameter>
    </parameters>
    <tags>
     cpp
     actions
     section
     enumerate
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_formatKeyName</slug>
    <functioncall prog_lang="cpp">void (*kbd_formatKeyName)(ACCEL* ac, char* s)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Format keyname
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ac" parmname="ac">

      </parameter>
      <parameter id="2" datatype="s" parmname="s">

      </parameter>
    </parameters>
    <tags>
     cpp
     keyname
     format
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_getCommandName</slug>
    <functioncall prog_lang="cpp">void (*kbd_getCommandName)(int cmd, char* s, KbdSectionInfo* section)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Get the string of a key assigned to command “cmd” in a section. This function is poorly named as it doesn’t return the command’s name, see <a href="#kbd_getTextFromCmd">kbd_getTextFromCmd</a>.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="cmd" parmname="cmd">
commandid of the action
      </parameter>
      <parameter id="2" datatype="s" parmname="s">

      </parameter>
      <parameter id="3" datatype="section" parmname="section">
the section, in which the action exists<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
    </parameters>
    <tags>
     cpp
     get
     key
     assigned
     command
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_getTextFromCmd</slug>
    <functioncall prog_lang="cpp">const char* (*kbd_getTextFromCmd)(DWORD cmd, KbdSectionInfo* section)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Get text from Command
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="const" retvalname="char*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="cmd" parmname="cmd">

      </parameter>
      <parameter id="2" datatype="section" parmname="section">
the section, in which the action exists<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
    </parameters>
    <tags>
     cpp
     get
     text
     command
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_OnMidiEvent</slug>
    <functioncall prog_lang="cpp">void (*kbd_OnMidiEvent)(MIDI_event_t* evt, int dev_index)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
On Midi Event. Can be called from anywhere (threadsafe)
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="evt" parmname="evt">
the MIDI-event
      </parameter>
      <parameter id="2" datatype="dev_index" parmname="dev_index">

      </parameter>
    </parameters>
    <tags>
     cpp
     on
     midi
     event
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_OnMidiList</slug>
    <functioncall prog_lang="cpp">void (*kbd_OnMidiList)(MIDI_eventlist* list, int dev_index)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
On MIDI List. Can be called from anywhere (threadsafe)
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="list" parmname="list">

      </parameter>
      <parameter id="2" datatype="dev_index" parmname="dev_index">

      </parameter>
    </parameters>
    <tags>
     cpp
     on
     midi
     list
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_ProcessActionsMenu</slug>
    <functioncall prog_lang="cpp">void (*kbd_ProcessActionsMenu)(HMENU menu, KbdSectionInfo* section)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Process actions-menu.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="menu" parmname="menu">

      </parameter>
      <parameter id="2" datatype="section" parmname="section">
the section, in which the action exists<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
    </parameters>
    <tags>
     cpp
     process
     actions
     menu
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_processMidiEventActionEx</slug>
    <functioncall prog_lang="cpp">bool (*kbd_processMidiEventActionEx)(MIDI_event_t* evt, KbdSectionInfo* section, HWND hwndCtx)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Process Midi Event Action
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="evt" parmname="evt">

      </parameter>
      <parameter id="2" datatype="section" parmname="section">
the section, in which the action exists<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
      <parameter id="3" datatype="hwndCtx" parmname="hwndCtx">

      </parameter>
    </parameters>
    <tags>
     cpp
     process
     midi
     event
     action
     ex
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_reprocessMenu</slug>
    <functioncall prog_lang="cpp">void (*kbd_reprocessMenu)(HMENU menu, KbdSectionInfo* section)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Reprocess a menu recursively, setting key assignments to what their command IDs are mapped to.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="menu" parmname="menu">

      </parameter>
      <parameter id="2" datatype="section" parmname="section">
the section, in which the action exists<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
    </parameters>
    <tags>
     cpp
     reprocess
     menu
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_RunCommandThroughHooks</slug>
    <functioncall prog_lang="cpp">bool (*kbd_RunCommandThroughHooks)(KbdSectionInfo* section, int* actionCommandID, int* val, int* valhw, int* relmode, HWND hwnd)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Run command through hooks. actioncommandID may get modified.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">
the section, in which the action exists<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
      <parameter id="2" datatype="actionCommandID" parmname="actionCommandID">
the commandid-number of the action you want to run.
      </parameter>
      <parameter id="3" datatype="val" parmname="val">

      </parameter>
      <parameter id="4" datatype="valhw" parmname="valhw">

      </parameter>
      <parameter id="5" datatype="relmode" parmname="relmode">

      </parameter>
      <parameter id="6" datatype="hwnd" parmname="hwnd">

      </parameter>
    </parameters>
    <tags>
     cpp
     run
     command
     hooks
     action
     commandid
     section
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_translateAccelerator</slug>
    <functioncall prog_lang="cpp">int (*kbd_translateAccelerator)(HWND hwnd, MSG* msg, KbdSectionInfo* section)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Pass in the HWND to receive commands, a MSG of a key command,  and a valid section,<br/>
and kbd_translateAccelerator() will process it looking for any keys bound to it, and send the messages off.<br/>
Returns 1 if processed, 0 if no key binding found.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="hwnd" parmname="hwnd">

      </parameter>
      <parameter id="2" datatype="msg" parmname="msg">

      </parameter>
      <parameter id="3" datatype="section" parmname="section">
the section, in which the action exists<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
    </parameters>
    <tags>
     cpp
     translate
     accelerator
     message
     key
     section
     keybinding
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>kbd_translateMouse</slug>
    <functioncall prog_lang="cpp">bool (*kbd_translateMouse)(void* winmsg, unsigned char* midimsg)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Translate mouse.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="winmsg" parmname="winmsg">

      </parameter>
      <parameter id="2" datatype="midimsg" parmname="midimsg">

      </parameter>
    </parameters>
    <tags>
     cpp
     translate
     mouse
     midi
     message
     windows
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__Destroy</slug>
    <functioncall prog_lang="cpp">void (*LICE__Destroy)(LICE_IBitmap* bm)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE destroy.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     destroy
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__DestroyFont</slug>
    <functioncall prog_lang="cpp">void (*LICE__DestroyFont)(LICE_IFont* font);</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE destroy-font.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="font" parmname="font">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     font
     destroy
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__DrawText</slug>
    <functioncall prog_lang="cpp">int (*LICE__DrawText)(LICE_IFont* font, LICE_IBitmap* bm, const char* str, int strcnt, RECT* rect, UINT dtFlags)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE draw text.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="font" parmname="font">

      </parameter>
      <parameter id="2" datatype="bm" parmname="bm">

      </parameter>
      <parameter id="3" datatype="str" parmname="str">

      </parameter>
      <parameter id="4" datatype="strcnt" parmname="strcnt">

      </parameter>
      <parameter id="5" datatype="rect" parmname="rect">

      </parameter>
      <parameter id="6" datatype="dtFlags" parmname="dtFlags">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     draw
     text
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__GetBits</slug>
    <functioncall prog_lang="cpp">void* (*LICE__GetBits)(LICE_IBitmap* bm)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE get bits.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     get
     bits
     bitmap
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__GetDC</slug>
    <functioncall prog_lang="cpp">HDC (*LICE__GetDC)(LICE_IBitmap* bm)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Translate mouse.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="HDC" retvalname="HDC">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     get
     dc
     bitmap
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__GetHeight</slug>
    <functioncall prog_lang="cpp">int (*LICE__GetHeight)(LICE_IBitmap* bm)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE get height
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     get
     height
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__GetRowSpan</slug>
    <functioncall prog_lang="cpp">int (*LICE__GetRowSpan)(LICE_IBitmap* bm)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE get row span.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     get
     row
     span
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__GetWidth</slug>
    <functioncall prog_lang="cpp">int (*LICE__GetWidth)(LICE_IBitmap* bm)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE get width.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     get
     width
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__IsFlipped</slug>
    <functioncall prog_lang="cpp">bool (*LICE__IsFlipped)(LICE_IBitmap* bm)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE is flipped
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     is
     flipped
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__resize</slug>
    <functioncall prog_lang="cpp">bool (*LICE__resize)(LICE_IBitmap* bm, int w, int h)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE resize
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
      <parameter id="2" datatype="w" parmname="w">

      </parameter>
      <parameter id="3" datatype="h" parmname="h">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     resize
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__SetBkColor</slug>
    <functioncall prog_lang="cpp">LICE_pixel (*LICE__SetBkColor)(LICE_IFont* font, LICE_pixel color)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE set bk color
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="LICE_pixel" retvalname="LICE_pixel">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="font" parmname="font">

      </parameter>
      <parameter id="2" datatype="color" parmname="color">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     set
     bk
     color
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__SetFromHFont</slug>
    <functioncall prog_lang="cpp">void (*LICE__SetFromHFont)(LICE_IFont* font, HFONT hfont, int flags)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE set from h-font
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="font" parmname="font">
font must REMAIN valid,unless LICE_FONT_FLAG_PRECALCALL is set
      </parameter>
      <parameter id="2" datatype="hfont" parmname="hfont">

      </parameter>
      <parameter id="3" datatype="flags" parmname="flags">

      </parameter>
    </parameters>
    <tags>
     cpp
     translate
     lice
     set
     from
     hfont
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__SetTextColor</slug>
    <functioncall prog_lang="cpp">LICE_pixel (*LICE__SetTextColor)(LICE_IFont* font, LICE_pixel color)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE set text color
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="LICE_pixel" retvalname="LICE_pixel">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="font" parmname="font">

      </parameter>
      <parameter id="2" datatype="color" parmname="color">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     set
     text
     color
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE__SetTextCombineMode</slug>
    <functioncall prog_lang="cpp">void (*LICE__SetTextCombineMode)(LICE_IFont* ifont, int mode, float alpha)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE set text combine mode
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="ifont" parmname="ifont">

      </parameter>
      <parameter id="2" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="3" datatype="alpha" parmname="alpha">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     set
     text
     combine
     mode
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_Arc</slug>
    <functioncall prog_lang="cpp">void (*LICE_Arc)(LICE_IBitmap* dest, float cx, float cy, float r, float minAngle, float maxAngle, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE arc
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="cx" parmname="cx">

      </parameter>
      <parameter id="3" datatype="cy" parmname="cy">

      </parameter>
      <parameter id="4" datatype="r" parmname="r">

      </parameter>
      <parameter id="5" datatype="minAngle" parmname="minAngle">

      </parameter>
      <parameter id="6" datatype="maxAngle" parmname="maxAngle">

      </parameter>
      <parameter id="7" datatype="color" parmname="color">

      </parameter>
      <parameter id="8" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="9" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="10" datatype="aa" parmname="aa">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     arc
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_Blit</slug>
    <functioncall prog_lang="cpp">void (*LICE_Blit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE blit
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="src" parmname="src">

      </parameter>
      <parameter id="3" datatype="dstx" parmname="dstx">

      </parameter>
      <parameter id="4" datatype="dsty" parmname="dsty">

      </parameter>
      <parameter id="5" datatype="srcx" parmname="srcx">

      </parameter>
      <parameter id="6" datatype="srcy" parmname="srcy">

      </parameter>
      <parameter id="7" datatype="srcw" parmname="srcw">

      </parameter>
      <parameter id="8" datatype="srch" parmname="srch">

      </parameter>
      <parameter id="9" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="10" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     blit
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_Blur</slug>
    <functioncall prog_lang="cpp">void (*LICE_Blur)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE blur
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="src" parmname="src">

      </parameter>
      <parameter id="3" datatype="dstx" parmname="dstx">

      </parameter>
      <parameter id="4" datatype="dsty" parmname="dsty">

      </parameter>
      <parameter id="5" datatype="srcx" parmname="srcx">

      </parameter>
      <parameter id="6" datatype="srcy" parmname="srcy">

      </parameter>
      <parameter id="7" datatype="srcw" parmname="srcw">

      </parameter>
      <parameter id="8" datatype="srch" parmname="srch">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     blur
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>LICE_BorderedRect</slug>
    <functioncall prog_lang="cpp">void (*LICE_BorderedRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel bgcolor, LICE_pixel fgcolor, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE bordered rect.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="w" parmname="w">

      </parameter>
      <parameter id="5" datatype="h" parmname="h">

      </parameter>
      <parameter id="6" datatype="bgcolor" parmname="bgcolor">

      </parameter>
      <parameter id="7" datatype="fgcolor" parmname="fgcolor">

      </parameter>
      <parameter id="8" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="9" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     bordered
     rect
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_Circle</slug>
    <functioncall prog_lang="cpp">void (*LICE_Circle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE circle
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="cx" parmname="cx">

      </parameter>
      <parameter id="3" datatype="cy" parmname="cy">

      </parameter>
      <parameter id="4" datatype="r" parmname="r">

      </parameter>
      <parameter id="5" datatype="color" parmname="color">

      </parameter>
      <parameter id="6" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="7" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="8" datatype="aa" parmname="aa">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     circle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_Clear</slug>
    <functioncall prog_lang="cpp">void (*LICE_Clear)(LICE_IBitmap* dest, LICE_pixel color)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE clear
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="color" parmname="color">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     clear
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_ClearRect</slug>
    <functioncall prog_lang="cpp">void (*LICE_ClearRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel mask, LICE_pixel orbits)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE clear rect
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="w" parmname="w">

      </parameter>
      <parameter id="5" datatype="h" parmname="h">

      </parameter>
      <parameter id="6" datatype="mask" parmname="mask">

      </parameter>
      <parameter id="7" datatype="orbits" parmname="orbits">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     clear
     rect
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_Copy</slug>
    <functioncall prog_lang="cpp">void (*LICE_Copy)(LICE_IBitmap* dest, LICE_IBitmap* src)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE copy
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="src" parmname="src">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     copy
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_CreateBitmap</slug>
    <functioncall prog_lang="cpp">LICE_IBitmap* (*LICE_CreateBitmap)(int mode, int w, int h)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Create a new bitmap. this is like calling new LICE_MemBitmap (mode=0) or new LICE_SysBitmap (mode=1).
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="LICE_IBitmap*" retvalname="LICE_IBitmap*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="2" datatype="w" parmname="w">

      </parameter>
      <parameter id="3" datatype="h" parmname="h">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     create
     bitmap
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_CreateFont</slug>
    <functioncall prog_lang="cpp">LICE_IFont* (*LICE_CreateFont)()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE create font
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="LICE_IFont*" retvalname="LICE_IFont*">

      </retval>
    </retvals>
    <tags>
     cpp
     lice
     create
     font
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_DrawChar</slug>
    <functioncall prog_lang="cpp">void (*LICE_DrawChar)(LICE_IBitmap* bm, int x, int y, char c, LICE_pixel color, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE draw char
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="x" parmname="x">

      </parameter>
      <parameter id="2" datatype="y" parmname="y">

      </parameter>
      <parameter id="3" datatype="color" parmname="color">

      </parameter>
      <parameter id="4" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="5" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     draw
     char
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_DrawGlyph</slug>
    <functioncall prog_lang="cpp">void (*LICE_DrawGlyph)(LICE_IBitmap* dest, int x, int y, LICE_pixel color, LICE_pixel_chan* alphas, int glyph_w, int glyph_h, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE draw glyph
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="color" parmname="color">

      </parameter>
      <parameter id="5" datatype="alphas" parmname="alphas">

      </parameter>
      <parameter id="6" datatype="glyph_w" parmname="glyph_w">

      </parameter>
      <parameter id="7" datatype="glyph_h" parmname="glyph_h">

      </parameter>
      <parameter id="8" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="9" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     draw
     glyph
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_DrawCBezier</slug>
    <functioncall prog_lang="cpp">void (*LICE_DrawCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, LICE_pixel color, float alpha, int mode, bool aa, double tol)</functioncall>
    <requires>
      Reaper=5.80
    </requires>
    <description>
LICE Draw C Bezier
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="LICE_IBitmap*" parmname="dest">

      </parameter>
      <parameter id="2" datatype="double" parmname="xstart">

      </parameter>
      <parameter id="3" datatype="double" parmname="ystart">

      </parameter>
      <parameter id="4" datatype="double" parmname="xctl1">

      </parameter>
      <parameter id="5" datatype="double" parmname="yctl1">

      </parameter>
      <parameter id="6" datatype="double" parmname="xctl2">

      </parameter>
      <parameter id="7" datatype="double" parmname="yctl2">

      </parameter>
      <parameter id="8" datatype="double" parmname="xend">

      </parameter>
      <parameter id="9" datatype="double" parmname="yend">

      </parameter>
      <parameter id="10" datatype="LICE_pixel" parmname="color">

      </parameter>
      <parameter id="11" datatype="float" parmname="alpha">

      </parameter>
      <parameter id="12" datatype="int" parmname="mode">

      </parameter>
      <parameter id="13" datatype="bool" parmname="aa">

      </parameter>
      <parameter id="14" datatype="double" parmname="tol">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     draw
     bezier
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_DrawRect</slug>
    <functioncall prog_lang="cpp">void (*LICE_DrawRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE draw rect
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="w" parmname="w">

      </parameter>
      <parameter id="5" datatype="h" parmname="h">

      </parameter>
      <parameter id="6" datatype="color" parmname="color">

      </parameter>
      <parameter id="7" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="8" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     draw
     rectangle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_DrawText</slug>
    <functioncall prog_lang="cpp">void (*LICE_DrawText)(LICE_IBitmap* bm, int x, int y, const char* string, LICE_pixel color, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE draw text
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="string" parmname="string">

      </parameter>
      <parameter id="5" datatype="color" parmname="color">

      </parameter>
      <parameter id="6" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="7" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     draw
     text
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_FillCBezier</slug>
    <functioncall prog_lang="cpp">void (*LICE_FillCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, int yfill, LICE_pixel color, float alpha, int mode, bool aa, double tol);</functioncall>
    <requires>
      Reaper=5.95
    </requires>
    <description>
LICE Fill CBezier
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="LICE_IBitmap*" parmname="dest">

      </parameter>
      <parameter id="2" datatype="double" parmname="xstart">

      </parameter>
      <parameter id="3" datatype="double" parmname="ystart">

      </parameter>
      <parameter id="4" datatype="double" parmname="xctl1">

      </parameter>
      <parameter id="5" datatype="double" parmname="yctl1">

      </parameter>
      <parameter id="6" datatype="double" parmname="xctl2">

      </parameter>
      <parameter id="7" datatype="double" parmname="yctl2">

      </parameter>
      <parameter id="8" datatype="double" parmname="xend">

      </parameter>
      <parameter id="9" datatype="double" parmname="yend">

      </parameter>
      <parameter id="10" datatype="int" parmname="yfill">

      </parameter>
      <parameter id="11" datatype="LICE_pixel" parmname="color">

      </parameter>
      <parameter id="12" datatype="float" parmname="alpha">

      </parameter>
      <parameter id="13" datatype="int" parmname="mode">

      </parameter>
      <parameter id="14" datatype="bool" parmname="aa">

      </parameter>
      <parameter id="15" datatype="double" parmname="tol">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     fill
     bezier
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_FillCircle</slug>
    <functioncall prog_lang="cpp">void (*LICE_FillCircle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE fill circle
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="cx" parmname="cx">

      </parameter>
      <parameter id="3" datatype="cy" parmname="cy">

      </parameter>
      <parameter id="4" datatype="r" parmname="r">

      </parameter>
      <parameter id="5" datatype="color" parmname="color">

      </parameter>
      <parameter id="6" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="7" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="8" datatype="aa" parmname="aa">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     fill
     circle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_FillConvexPolygon</slug>
    <functioncall prog_lang="cpp">void (*LICE_FillConvexPolygon)(LICE_IBitmap* dest, int* x, int* y, int npoints, LICE_pixel color, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE fill convex polygon
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="npoints" parmname="npoints">

      </parameter>
      <parameter id="5" datatype="color" parmname="color">

      </parameter>
      <parameter id="6" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="7" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     fill
     convex
     polygon
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_FillRect</slug>
    <functioncall prog_lang="cpp">void (*LICE_FillRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE fill rect
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="w" parmname="w">

      </parameter>
      <parameter id="5" datatype="h" parmname="h">

      </parameter>
      <parameter id="6" datatype="color" parmname="color">

      </parameter>
      <parameter id="7" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="8" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     fill
     rect
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_FillTrapezoid</slug>
    <functioncall prog_lang="cpp">void (*LICE_FillTrapezoid)(LICE_IBitmap* dest, int x1a, int x1b, int y1, int x2a, int x2b, int y2, LICE_pixel color, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE fill trapezoid
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x1a" parmname="x1a">

      </parameter>
      <parameter id="3" datatype="x1b" parmname="x1b">

      </parameter>
      <parameter id="4" datatype="y1" parmname="y1">

      </parameter>
      <parameter id="5" datatype="x2a" parmname="x2a">

      </parameter>
      <parameter id="6" datatype="x2b" parmname="x2b">

      </parameter>
      <parameter id="7" datatype="y2" parmname="y2">

      </parameter>
      <parameter id="8" datatype="color" parmname="color">

      </parameter>
      <parameter id="9" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="10" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     fill
     trapezoid
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_FillTriangle</slug>
    <functioncall prog_lang="cpp">void (*LICE_FillTriangle)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, int x3, int y3, LICE_pixel color, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE fill triangle
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x1" parmname="x1">

      </parameter>
      <parameter id="3" datatype="y1" parmname="y1">

      </parameter>
      <parameter id="4" datatype="x2" parmname="x2">

      </parameter>
      <parameter id="5" datatype="y2" parmname="y2">

      </parameter>
      <parameter id="6" datatype="x3" parmname="x3">

      </parameter>
      <parameter id="7" datatype="y3" parmname="y3">

      </parameter>
      <parameter id="8" datatype="color" parmname="color">

      </parameter>
      <parameter id="9" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="10" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     fill
     triangle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_GetPixel</slug>
    <functioncall prog_lang="cpp">LICE_pixel (*LICE_GetPixel)(LICE_IBitmap* bm, int x, int y)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE get pixel
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="LICE_pixel" retvalname="LICE_pixel">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     get
     pixel
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_GradRect</slug>
    <functioncall prog_lang="cpp">void (*LICE_GradRect)(LICE_IBitmap* dest, int dstx, int dsty, int dstw, int dsth, float ir, float ig, float ib, float ia, float drdx, float dgdx, float dbdx, float dadx, float drdy, float dgdy, float dbdy, float dady, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE grad rect
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="dstx" parmname="dstx">

      </parameter>
      <parameter id="3" datatype="dsty" parmname="dsty">

      </parameter>
      <parameter id="4" datatype="dstw" parmname="dstw">

      </parameter>
      <parameter id="5" datatype="dsth" parmname="dsth">

      </parameter>
      <parameter id="6" datatype="ir" parmname="ir">

      </parameter>
      <parameter id="7" datatype="ig" parmname="ig">

      </parameter>
      <parameter id="8" datatype="ib" parmname="ib">

      </parameter>
      <parameter id="9" datatype="ia" parmname="ia">

      </parameter>
      <parameter id="10" datatype="drdx" parmname="drdx">

      </parameter>
      <parameter id="11" datatype="dgdx" parmname="dgdx">

      </parameter>
      <parameter id="12" datatype="dbdx" parmname="dbdx">

      </parameter>
      <parameter id="13" datatype="dadx" parmname="dadx">

      </parameter>
      <parameter id="14" datatype="drdy" parmname="drdy">

      </parameter>
      <parameter id="15" datatype="dgdy" parmname="dgdy">

      </parameter>
      <parameter id="16" datatype="dbdy" parmname="dbdy">

      </parameter>
      <parameter id="17" datatype="dady" parmname="dady">

      </parameter>
      <parameter id="18" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     grad
     rectangle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_Line</slug>
    <functioncall prog_lang="cpp">void (*LICE_Line)(LICE_IBitmap* dest, float x1, float y1, float x2, float y2, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE line
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x1" parmname="x1">

      </parameter>
      <parameter id="3" datatype="y1" parmname="y1">

      </parameter>
      <parameter id="4" datatype="x2" parmname="x2">

      </parameter>
      <parameter id="5" datatype="y2" parmname="y2">

      </parameter>
      <parameter id="6" datatype="color" parmname="color">

      </parameter>
      <parameter id="7" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="8" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="9" datatype="aa" parmname="aa">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     line
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_LineInt</slug>
    <functioncall prog_lang="cpp">void (*LICE_LineInt)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, LICE_pixel color, float alpha, int mode, bool aa)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE line int
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x1" parmname="x1">

      </parameter>
      <parameter id="3" datatype="y1" parmname="y1">

      </parameter>
      <parameter id="4" datatype="x2" parmname="x2">

      </parameter>
      <parameter id="5" datatype="y2" parmname="y2">

      </parameter>
      <parameter id="6" datatype="color" parmname="color">

      </parameter>
      <parameter id="7" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="8" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="9" datatype="aa" parmname="aa">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     line
     int
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_LoadPNG</slug>
    <functioncall prog_lang="cpp">LICE_IBitmap* (*LICE_LoadPNG)(const char* filename, LICE_IBitmap* bmp)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE load png
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="LICE_IBitmap*" retvalname="LICE_IBitmap*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="filename" parmname="filename">

      </parameter>
      <parameter id="2" datatype="bmp" parmname="bmp">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     load
     png
     file
     graphic
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_LoadPNGFromResource</slug>
    <functioncall prog_lang="cpp">LICE_IBitmap* (*LICE_LoadPNGFromResource)(HINSTANCE hInst, int resid, LICE_IBitmap* bmp)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE load png from resource
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="LICE_IBitmap*" retvalname="LICE_IBitmap*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="hInst" parmname="hInst">

      </parameter>
      <parameter id="2" datatype="resid" parmname="resid">

      </parameter>
      <parameter id="3" datatype="bmp" parmname="bmp">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     load
     png
     resource
     hinstance
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_MeasureText</slug>
    <functioncall prog_lang="cpp">void (*LICE_MeasureText)(const char* string, int* w, int* h)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE measure text
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="string" parmname="string">

      </parameter>
      <parameter id="2" datatype="w" parmname="w">

      </parameter>
      <parameter id="3" datatype="h" parmname="h">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     measure
     text
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_MultiplyAddRect</slug>
    <functioncall prog_lang="cpp">void (*LICE_MultiplyAddRect)(LICE_IBitmap* dest, int x, int y, int w, int h, float rsc, float gsc, float bsc, float asc, float radd, float gadd, float badd, float aadd)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE multiplay add rect
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="w" parmname="w">

      </parameter>
      <parameter id="5" datatype="h" parmname="h">

      </parameter>
      <parameter id="6" datatype="rsc" parmname="rsc">

      </parameter>
      <parameter id="7" datatype="gsc" parmname="gsc">

      </parameter>
      <parameter id="8" datatype="bsc" parmname="bsc">

      </parameter>
      <parameter id="9" datatype="asc" parmname="asc">

      </parameter>
      <parameter id="10" datatype="radd" parmname="radd">

      </parameter>
      <parameter id="11" datatype="gadd" parmname="gadd">

      </parameter>
      <parameter id="12" datatype="badd" parmname="badd">

      </parameter>
      <parameter id="13" datatype="aadd" parmname="aadd">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     multiply
     add
     rectangle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_PutPixel</slug>
    <functioncall prog_lang="cpp">void (*LICE_PutPixel)(LICE_IBitmap* bm, int x, int y, LICE_pixel color, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE put pixel
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="bm" parmname="bm">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="color" parmname="color">

      </parameter>
      <parameter id="5" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="6" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     put
     pixel
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_RotatedBlit</slug>
    <functioncall prog_lang="cpp">void (*LICE_RotatedBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float angle, bool cliptosourcerect, float alpha, int mode, float rotxcent, float rotycent)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE rotate blit. These coordinates are offset from the center of the image,in source pixel coordinates.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="src" parmname="src">

      </parameter>
      <parameter id="3" datatype="dstx" parmname="dstx">

      </parameter>
      <parameter id="4" datatype="dsty" parmname="dsty">

      </parameter>
      <parameter id="5" datatype="dstw" parmname="dstw">

      </parameter>
      <parameter id="6" datatype="dsth" parmname="dsth">

      </parameter>
      <parameter id="7" datatype="srcx" parmname="srcx">

      </parameter>
      <parameter id="8" datatype="srcy" parmname="srcy">

      </parameter>
      <parameter id="9" datatype="srcw" parmname="srcw">

      </parameter>
      <parameter id="10" datatype="srch" parmname="srch">

      </parameter>
      <parameter id="11" datatype="angle" parmname="angle">

      </parameter>
      <parameter id="12" datatype="cliptosourcerect" parmname="cliptosourcerect">

      </parameter>
      <parameter id="13" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="14" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="15" datatype="rotxcent" parmname="rotxcent">

      </parameter>
      <parameter id="16" datatype="rtoycent" parmname="rtoycent">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     rotate
     blit
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_RoundRect</slug>
    <functioncall prog_lang="cpp">void (*LICE_RoundRect)(LICE_IBitmap* drawbm, float xpos, float ypos, float w, float h, int cornerradius, LICE_pixel col, float alpha, int mode, bool aa)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE round rect
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="drawbm" parmname="drawbm">

      </parameter>
      <parameter id="2" datatype="xpos" parmname="xpos">

      </parameter>
      <parameter id="3" datatype="ypos" parmname="ypos">

      </parameter>
      <parameter id="4" datatype="w" parmname="w">

      </parameter>
      <parameter id="5" datatype="h" parmname="h">

      </parameter>
      <parameter id="6" datatype="cornerradius" parmname="cornerradius">

      </parameter>
      <parameter id="7" datatype="col" parmname="col">

      </parameter>
      <parameter id="8" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="9" datatype="mode" parmname="mode">

      </parameter>
      <parameter id="10" datatype="aa" parmname="aa">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     round
     rectangle
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_ScaledBlit</slug>
    <functioncall prog_lang="cpp">void (*LICE_ScaledBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE scaled blit.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="src" parmname="src">

      </parameter>
      <parameter id="3" datatype="dstx" parmname="dstx">

      </parameter>
      <parameter id="4" datatype="dsty" parmname="dsty">

      </parameter>
      <parameter id="5" datatype="dstw" parmname="dstw">

      </parameter>
      <parameter id="6" datatype="dsth" parmname="dsth">

      </parameter>
      <parameter id="7" datatype="srcx" parmname="srcx">

      </parameter>
      <parameter id="8" datatype="srcy" parmname="srcy">

      </parameter>
      <parameter id="9" datatype="srcw" parmname="srcw">

      </parameter>
      <parameter id="10" datatype="srch" parmname="srch">

      </parameter>
      <parameter id="11" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="12" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     scaled
     blit
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>LICE_SimpleFill</slug>
    <functioncall prog_lang="cpp">void (*LICE_SimpleFill)(LICE_IBitmap* dest, int x, int y, LICE_pixel newcolor, LICE_pixel comparemask, LICE_pixel keepmask)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE simple fill
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="x" parmname="x">

      </parameter>
      <parameter id="3" datatype="y" parmname="y">

      </parameter>
      <parameter id="4" datatype="newcolor" parmname="newcolor">

      </parameter>
      <parameter id="5" datatype="comparemask" parmname="comparemask">

      </parameter>
      <parameter id="6" datatype="keepmask" parmname="keepmask">

      </parameter>
    </parameters>
    <tags>
     cpp
     lice
     simple
     fill
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Source_CreateFromSimple</slug>
    <functioncall prog_lang="cpp">PCM_source* (*PCM_Source_CreateFromSimple)(ISimpleMediaDecoder* dec, const char* fn)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
PCM_Source create from simple
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_source*" retvalname="PCM_source*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dec" parmname="dec">

      </parameter>
      <parameter id="2" datatype="fn" parmname="fn">

      </parameter>
    </parameters>
    <tags>
     cpp
     pcm
     source
     create
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PeakBuild_Create</slug>
    <functioncall prog_lang="cpp">REAPER_PeakBuild_Interface* (*PeakBuild_Create)(PCM_source* src, const char* fn, int srate, int nch)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Peak build create
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="REAPER_PeakBuild_Interface*" retvalname="REAPER_PeakBuild_Interface*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
      <parameter id="2" datatype="fn" parmname="fn">

      </parameter>
      <parameter id="3" datatype="srate" parmname="srate">

      </parameter>
      <parameter id="4" datatype="nch" parmname="nch">

      </parameter>
    </parameters>
    <tags>
     cpp
     peak
     build
     create
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PeakBuild_CreateEx</slug>
    <functioncall prog_lang="cpp">REAPER_PeakBuild_Interface* (*PeakBuild_CreateEx)(PCM_source* src, const char* fn, int srate, int nch, int flags)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Peakbuild create-ex. flags&amp;1 for FP support
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="REAPER_PeakBuild_Interface*" retvalname="REAPER_PeakBuild_Interface*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="src" parmname="src">

      </parameter>
      <parameter id="2" datatype="fn" parmname="fn">

      </parameter>
      <parameter id="3" datatype="srate" parmname="srate">

      </parameter>
      <parameter id="4" datatype="nch" parmname="nch">

      </parameter>
      <parameter id="5" datatype="flags" parmname="flags">

      </parameter>
    </parameters>
    <tags>
     cpp
     peak
     ex
     create
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PeakGet_Create</slug>
    <functioncall prog_lang="cpp">REAPER_PeakGet_Interface* (*PeakGet_Create)(const char* fn, int srate, int nch)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Peak get create.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="REAPER_PeakGet_Interface*" retvalname="REAPER_PeakGet_Interface*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="fn" parmname="fn">

      </parameter>
      <parameter id="2" datatype="srate" parmname="srate">

      </parameter>
      <parameter id="3" datatype="nch" parmname="nch">

      </parameter>
    </parameters>
    <tags>
     cpp
     peak
     create
     get
    </tags>
  </USDocBloc>



  <USDocBloc>
    <slug>PlayPreview</slug>
    <functioncall prog_lang="cpp">int (*PlayPreview)(preview_register_t* preview)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Play preview. Return nonzero on success.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="preview" parmname="preview">

      </parameter>
    </parameters>
    <tags>
     cpp
     play
     preview
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PlayPreviewEx</slug>
    <functioncall prog_lang="cpp">int (*PlayPreviewEx)(preview_register_t* preview, int bufflags, double MSI)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Play preview ex. Return nonzero on success.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="preview" parmname="preview">

      </parameter>
      <parameter id="2" datatype="bufflags" parmname="bufflags">

      </parameter>
      <parameter id="3" datatype="MSI" parmname="MSI">

      </parameter>
    </parameters>
    <tags>
     cpp
     play
     preview
     ex
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PlayTrackPreview</slug>
    <functioncall prog_lang="cpp">int (*PlayTrackPreview)(preview_register_t* preview)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Play track preview. Returns nonzero on success,in these,m_out_chan is a track index (0-n).
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="preview" parmname="preview">

      </parameter>
    </parameters>
    <tags>
     cpp
     play
     track
     preview
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PlayTrackPreview2</slug>
    <functioncall prog_lang="cpp">int (*PlayTrackPreview2)(ReaProject* proj, preview_register_t* preview)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Play track preview. Return nonzero on success,in these,m_out_chan is a track index (0-n).
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="preview" parmname="preview">


      </parameter>
    </parameters>
    <tags>
     cpp
     play
     track
     preview
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PlayTrackPreview2Ex</slug>
    <functioncall prog_lang="cpp">int (*PlayTrackPreview2Ex)(ReaProject* proj, preview_register_t* preview, int flags, double msi)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Play track preview 2 Ex. Return nonzero on success,in these,m_out_chan is a track index (0-n).
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="preview" parmname="preview">


      </parameter>
      <parameter id="3" datatype="flags" parmname="flags">


      </parameter>
      <parameter id="4" datatype="msi" parmname="msi">


      </parameter>
    </parameters>
    <tags>
     cpp
     play
     track
     preview
     ex
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>plugin_getapi</slug>
    <functioncall prog_lang="cpp">void* (*plugin_getapi)(const char* name)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Plugin get api.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="name" parmname="name">

      </parameter>
    </parameters>
    <tags>
     cpp
     plugin
     get
     api
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>plugin_getFilterList</slug>
    <functioncall prog_lang="cpp">const char* (*plugin_getFilterList)()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Plugin get filter list. Returns a double-NULL terminated list of importable media files, suitable for passing to <a href="#GetOpenFileName">GetOpenFileName()</a> etc. Includes <em>.</em> (All files).</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="char*" retvalname="char*">

      </retval>
    </retvals>
    <tags>
     cpp
     get
     filter
     list
     plugin
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>plugin_getImportableProjectFilterList</slug>
    <functioncall prog_lang="cpp">const char* (*plugin_getImportableProjectFilterList)()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Plugin get importable project filter list. Returns a double-NULL terminated list of importable project files, suitable for passing to <a href="#GetOpenFileName">GetOpenFileName()</a> etc. Includes <em>.</em> (All files).</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="char*" retvalname="char*">

      </retval>
    </retvals>
    <tags>
     cpp
     plugin
     get
     importable
     project
     filter
     list
     file
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>projectconfig_var_addr</slug>
    <functioncall prog_lang="cpp">void* (*projectconfig_var_addr)(ReaProject* proj, int idx)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Project config var addr.</p>
<p>see <a href="Reaper_Config_Variables.html">Reaper_Config_Variables.html</a> for valid config-vars</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="idx" parmname="idx">


      </parameter>
    </parameters>
    <tags>
     cpp
     project
     config
     var
     addr
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>projectconfig_var_getoffs</slug>
    <functioncall prog_lang="cpp">int (*projectconfig_var_getoffs)(const char* name, int* szOut)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Returns offset to pass to projectconfig_var_addr() to get project-config var of name. szout gets size of object.</p>
<p>see <a href="Reaper_Config_Variables.html">Reaper_Config_Variables.html</a> for valid config-vars</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="name" parmname="name">

      </parameter>
      <parameter id="2" datatype="szOut" parmname="szOut">
size of the object
      </parameter>
    </parameters>
    <tags>
     cpp
     project
     config
     var
     getoffs
     offset
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>ReaperGetPitchShiftAPI</slug>
    <functioncall prog_lang="cpp">IReaperPitchShift* (*ReaperGetPitchShiftAPI)(int version)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
version must be REAPER_PITCHSHIFT_API_VER
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="IReaperPitchShift*" retvalname="IReaperPitchShift*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="version" parmname="version">

      </parameter>
    </parameters>
    <tags>
     cpp
     reaper
     pitch
     shift
     api
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>Resampler_Create</slug>
    <functioncall prog_lang="cpp">REAPER_Resample_Interface* (*Resampler_Create)()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Resampler create
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="REAPER_Resample_Interface*" retvalname="REAPER_Resample_Interface*">

      </retval>
    </retvals>
    <tags>
     cpp
     resampler
     create
     interface
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>screenset_register</slug>
    <functioncall prog_lang="cpp">void (*screenset_register)(char* id, void* callbackFunc, void* param)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Screenset register.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="id" parmname="id">

      </parameter>
      <parameter id="2" datatype="callbackFunc" parmname="callbackFunc">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     cpp
     screenset
     register
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>screenset_registerNew</slug>
    <functioncall prog_lang="cpp">void (*screenset_registerNew)(char* id, screensetNewCallbackFunc callbackFunc, void* param)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Screenset register new.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="id" parmname="id">

      </parameter>
      <parameter id="2" datatype="callbackFunc" parmname="callbackFunc">

      </parameter>
      <parameter id="3" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     cpp
     screenset
     register
     new
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>screenset_unregister</slug>
    <functioncall prog_lang="cpp">void (*screenset_unregister)(char* id)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Screenset unregister.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="id" parmname="id">

      </parameter>
    </parameters>
    <tags>
     cpp
     screenset
     unregister
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>screenset_unregisterByParam</slug>
    <functioncall prog_lang="cpp">void (*screenset_unregisterByParam)(void* param)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Screenset unregister by param
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="param" parmname="param">

      </parameter>
    </parameters>
    <tags>
     cpp
     screenset
     unregister
     param
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>screenset_updateLastFocus</slug>
    <functioncall prog_lang="cpp">void (*screenset_updateLastFocus)(HWND prevWin)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
LICE simple fill
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="prevWin" parmname="prevWin">

      </parameter>
    </parameters>
    <tags>
     cpp
     screenset
     update
     focus
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SectionFromUniqueID</slug>
    <functioncall prog_lang="cpp">KbdSectionInfo* (*SectionFromUniqueID)(int uniqueID)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Section from unique ID.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="KbdSectionInfo*" retvalname="KbdSectionInfo*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="uniqueID" parmname="uniqueID">

      </parameter>
    </parameters>
    <tags>
     cpp
     section
     unique
     id
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SetRenderLastError</slug>
    <functioncall prog_lang="cpp">void (*SetRenderLastError)(const char* errorstr)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Set render last error.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="errorstr" parmname="errorstr">

      </parameter>
    </parameters>
    <tags>
     cpp
     set
     render
     error
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>StopPreview</slug>
    <functioncall prog_lang="cpp">int (*StopPreview)(preview_register_t* preview)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Stop preview.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="preview" parmname="preview">

      </parameter>
    </parameters>
    <tags>
     cpp
     stop
     preview
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>StopTrackPreview</slug>
    <functioncall prog_lang="cpp">int (*StopTrackPreview)(preview_register_t* preview)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Stop track preview. Return nonzero on success.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="preview" parmname="preview">

      </parameter>
    </parameters>
    <tags>
     cpp
     stop
     track
     preview
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>StopTrackPreview2</slug>
    <functioncall prog_lang="cpp">int (*StopTrackPreview2)(void* proj, preview_register_t* preview)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Stop track preview2.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="preview" parmname="preview">


      </parameter>
    </parameters>
    <tags>
     cpp
     stop
     track
     preview
     ex
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>update_disk_counters</slug>
    <functioncall prog_lang="cpp">void (*update_disk_counters)(int readamt, int writeamt)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Updates disk I/O statistics with bytes transferred since last call.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="readamt" parmname="readamt">

      </parameter>
      <parameter id="2" datatype="writeamt" parmname="writeamt">

      </parameter>
    </parameters>
    <tags>
     cpp
     update
     disk
     counters
     statistics
     bytes
     transferred
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>WDL_VirtualWnd_ScaledBlitBG</slug>
    <functioncall prog_lang="cpp">bool (*WDL_VirtualWnd_ScaledBlitBG)(LICE_IBitmap* dest, WDL_VirtualWnd_BGCfg* src, int destx, int desty, int destw, int desth, int clipx, int clipy, int clipw, int cliph, float alpha, int mode)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
WDL virtualwnd scale blit bg.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="bool" retvalname="bool">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="dest" parmname="dest">

      </parameter>
      <parameter id="2" datatype="src" parmname="src">

      </parameter>
      <parameter id="3" datatype="destx" parmname="destx">

      </parameter>
      <parameter id="4" datatype="desty" parmname="desty">

      </parameter>
      <parameter id="5" datatype="destw" parmname="destw">

      </parameter>
      <parameter id="6" datatype="desth" parmname="desth">

      </parameter>
      <parameter id="7" datatype="clipx" parmname="clipx">

      </parameter>
      <parameter id="8" datatype="clipy" parmname="clipy">

      </parameter>
      <parameter id="9" datatype="clipw" parmname="clipw">

      </parameter>
      <parameter id="10" datatype="cliph" parmname="cliph">

      </parameter>
      <parameter id="11" datatype="alpha" parmname="alpha">

      </parameter>
      <parameter id="12" datatype="mode" parmname="mode">

      </parameter>
    </parameters>
    <tags>
     cpp
     set
     render
     error
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetSetMediaItemInfo</slug>
    <functioncall prog_lang="cpp">void* (*GetSetMediaItemInfo)(MediaItem* item, const char* parmname, void* setNewValue)</functioncall>
    <requires>
      Reaper=5.976
    </requires>
    <description>
Get/Set Media Item Info
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void*" retvalname="void*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="item" parmname="item">
a MediaItem-object
      </parameter>
      <parameter id="2" datatype="parmname" parmname="parmname">
the parameter to be gotten/set<br/>
P_TRACK : MediaTrack * (read only)<br/>
P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)<br/>
B_MUTE : bool * to muted state<br/>
B_LOOPSRC : bool * to loop source<br/>
B_ALLTAKESPLAY : bool * to all takes play<br/>
B_UISEL : bool * to ui selected<br/>
C_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly<br/>
C_LOCK : char * to one char of lock flags (&amp;1 is locked, currently)<br/>
D_VOL : double *, take volume (negative if take polarity is flipped)<br/>
D_POSITION : double * of item position (seconds)<br/>
D_LENGTH : double * of item length (seconds)<br/>
D_SNAPOFFSET : double * of item snap offset (seconds)<br/>
D_FADEINLEN : double * of item fade in length (manual, seconds)<br/>
D_FADEOUTLEN : double * of item fade out length (manual, seconds)<br/>
D_FADEINDIR : double * of item fade in curve [-1; 1]<br/>
D_FADEOUTDIR : double * of item fade out curve [-1; 1]<br/>
D_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)<br/>
D_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)<br/>
C_FADEINSHAPE : int * to fadein shape, 0=linear, ...<br/>
C_FADEOUTSHAPE : int * to fadeout shape<br/>
I_GROUPID : int * to group ID (0 = no group)<br/>
I_LASTY : int * to last y position in track (readonly)<br/>
I_LASTH : int * to last height in track (readonly)<br/>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).<br/>
I_CURTAKE : int * to active take<br/>
IP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)<br/>
F_FREEMODE_Y : float * to free mode y position (0..1)<br/>
F_FREEMODE_H : float * to free mode height (0..1)
      </parameter>
      <parameter id="3" datatype="setNewValue" parmname="setNewValue">
the new value to be set, refer description of parmname for the values
      </parameter>
    </parameters>
    <tags>
     cpp
     mediaitem
     parameters
     get
     set
     info
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetToggleCommandState2</slug>
    <functioncall prog_lang="cpp">int (*GetToggleCommandState2)(KbdSectionInfo* section, int command_id)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Get Toggle Command State 2
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="section" parmname="section">
the section, in which the action exists<br/>
0, Main<br/>
100, Main (alt recording)<br/>
32060, MIDI Editor<br/>
32061, MIDI Event List Editor<br/>
32062, MIDI Inline Editor<br/>
32063, Media Explorer
      </parameter>
      <parameter id="2" datatype="command_id" parmname="command_id">
the command-id of the command, whose toggle-state you want
      </parameter>
    </parameters>
    <tags>
     cpp
     get
     toggle
     command
     state
     section
     commandid
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>GetTrackInfo</slug>
    <functioncall prog_lang="cpp">const char* (*GetTrackInfo)(INT_PTR track, int* flags)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Gets track info (returns name).
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="char*" retvalname="char*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="track" parmname="track">
track index, -1=master, 0..n, or cast a MediaTrack* to int 
      </parameter>
      <parameter id="2" datatype="flags" parmname="flags">
if flags is non-NULL, will be set to:<br/>
&amp;1, folder<br/>
&amp;2, selected<br/>
&amp;4, has fx enabled<br/>
&amp;8, muted<br/>
&amp;16, soloed<br/>
&amp;32, SIP'd (with &amp;16)<br/>
&amp;64, rec armed
      </parameter>
    </parameters>
    <tags>
     cpp
     get
     track
     info
     flag
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>KBD_OnMainActionEx</slug>
    <functioncall prog_lang="cpp">int (*KBD_OnMainActionEx)(int cmd, int val, int valhw, int relmode, HWND hwnd, ReaProject* proj)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
val/valhw are used for midi stuff.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="int" retvalname="int">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="cmd" parmname="cmd">

      </parameter>
      <parameter id="2" datatype="val" parmname="val">
val=[0..127] and valhw=-1 (midi CC)
      </parameter>
      <parameter id="3" datatype="valhw" parmname="valhw">
valhw &gt;=0 (midi pitch (valhw | val&lt;&lt;7))
      </parameter>
      <parameter id="4" datatype="relmode" parmname="relmode">
relmode absolute (0) or 1/2/3 for relative adjust modes
      </parameter>
      <parameter id="5" datatype="hwnd" parmname="hwnd">

      </parameter>
      <parameter id="6" datatype="proj" parmname="proj">

      </parameter>
    </parameters>
    <tags>
     cpp
     midi
     command
     value
     relmode
     main
     action
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_eventlist_Create</slug>
    <functioncall prog_lang="cpp">MIDI_eventlist* (*MIDI_eventlist_Create)()</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Create a MIDI_eventlist object. The returned object must be deleted with <a href="#MIDI_eventlist_destroy">MIDI_eventlist_destroy()</a>.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="MIDI_eventlist*" retvalname="MIDI_eventlist*">

      </retval>
    </retvals>
    <tags>
     cpp
     midi
     event
     list
     create
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>MIDI_eventlist_Destroy</slug>
    <functioncall prog_lang="cpp">void (*MIDI_eventlist_Destroy)(MIDI_eventlist* evtlist)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
<p>Destroy a MIDI_eventlist object that was created using <a href="#MIDI_eventlist_Create">MIDI_eventlist_Create()</a>.</p>

    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="evtlist" parmname="evtlist">

      </parameter>
    </parameters>
    <tags>
     cpp
     midi
     event
     list
     destroy
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Sink_Create</slug>
    <functioncall prog_lang="cpp">PCM_sink* (*PCM_Sink_Create)(const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
PCM sink create
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_sink*" retvalname="PCM_sink*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="filename" parmname="filename">

      </parameter>
      <parameter id="2" datatype="cfg" parmname="cfg">

      </parameter>
      <parameter id="3" datatype="cfg_sz" parmname="cfg_sz">

      </parameter>
      <parameter id="4" datatype="nch" parmname="nch">

      </parameter>
      <parameter id="5" datatype="srate" parmname="srate">

      </parameter>
      <parameter id="6" datatype="buildpeaks" parmname="buildpeaks">

      </parameter>
    </parameters>
    <tags>
     cpp
     pcm
     sink
     create
     filename
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Sink_CreateEx</slug>
    <functioncall prog_lang="cpp">PCM_sink* (*PCM_Sink_CreateEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
PCM sink create ex.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_sink*" retvalname="PCM_sink*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="filename" parmname="filename">


      </parameter>
      <parameter id="3" datatype="cfg" parmname="cfg">


      </parameter>
      <parameter id="4" datatype="cfg_sz" parmname="cfg_sz">


      </parameter>
      <parameter id="5" datatype="nch" parmname="nch">


      </parameter>
      <parameter id="6" datatype="srate" parmname="srate">


      </parameter>
      <parameter id="7" datatype="buildpeaks" parmname="buildpeaks">


      </parameter>
    </parameters>
    <tags>
     cpp
     pcm
     sink
     create
     filename
     ex
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Sink_CreateMIDIFile</slug>
    <functioncall prog_lang="cpp">PCM_sink* (*PCM_Sink_CreateMIDIFile)(const char* filename, const char* cfg, int cfg_sz, double bpm, int div)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
PCM sink create MIDI file.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_sink*" retvalname="PCM_sink*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="filename" parmname="filename">

      </parameter>
      <parameter id="2" datatype="cfg" parmname="cfg">

      </parameter>
      <parameter id="3" datatype="cfg_sz" parmname="cfg_sz">

      </parameter>
      <parameter id="4" datatype="bpm" parmname="bpm">

      </parameter>
      <parameter id="5" datatype="div" parmname="div">

      </parameter>
    </parameters>
    <tags>
     cpp
     pcm
     sink
     create
     midi
     filename
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>PCM_Sink_CreateMIDIFileEx</slug>
    <functioncall prog_lang="cpp">PCM_sink* (*PCM_Sink_CreateMIDIFileEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, double bpm, int div)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
PCM sink create MIDI file ex
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="PCM_sink*" retvalname="PCM_sink*">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="proj" parmname="proj">
<p>the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by <a href="#EnumProjects">EnumProjects</a></p>

      </parameter>
      <parameter id="2" datatype="filename" parmname="filename">


      </parameter>
      <parameter id="3" datatype="cfg" parmname="cfg">


      </parameter>
      <parameter id="4" datatype="cfg_sz" parmname="cfg_sz">


      </parameter>
      <parameter id="5" datatype="bpm" parmname="bpm">


      </parameter>
      <parameter id="6" datatype="div" parmname="div">


      </parameter>
    </parameters>
    <tags>
     cpp
     pcm
     sink
     create
     midi
     filename
     ex
    </tags>
  </USDocBloc>

  <USDocBloc>
    <slug>SendLocalOscMessage</slug>
    <functioncall prog_lang="cpp">void (*SendLocalOscMessage)(void* local_osc_handler, const char* msg, int msglen)</functioncall>
    <requires>
      Reaper=5.62
    </requires>
    <description>
Send local Osc message.
    </description>
    <chapter_context>
      Additional C++ Functions
    </chapter_context>
    <retvals>
      <retval id="1" datatype="void" retvalname="void">

      </retval>
    </retvals>
    <parameters>
      <parameter id="1" datatype="local_osc_handler" parmname="local_osc_handler">

      </parameter>
      <parameter id="2" datatype="msg" parmname="msg">

      </parameter>
      <parameter id="3" datatype="msglen" parmname="msglen">

      </parameter>
    </parameters>
    <tags>
     cpp
     send
     local
     osc
     message
    </tags>
  </USDocBloc>



</USDocBlocs>